{"ast":null,"code":"import store from \"store2\";\nconst CONNECTED_WALLET = \"CONNECTED_WALLET\";\nconst TRANSACTIONS = \"TRANSACTIONS\";\nexport class LocalStorage {\n  static setWallet(connectedWallet) {\n    const validated = validateConnectedWallet(connectedWallet);\n    store.set(CONNECTED_WALLET, validated);\n  }\n\n  static removeWallet() {\n    store.remove(CONNECTED_WALLET);\n  }\n\n  static addTransaction(tx) {\n    if (store.has(TRANSACTIONS)) {\n      store.add(TRANSACTIONS, tx);\n    } else {\n      store.set(TRANSACTIONS, [tx]);\n    }\n\n    window.dispatchEvent(new Event(\"transactions\"));\n  }\n\n  static updatePendingTransaction(txId) {\n    let transactions = store.get(TRANSACTIONS);\n    transactions = transactions.map(tx => {\n      if (tx.txid === txId) {\n        tx.status = \"SUBMITTED\";\n      }\n\n      return tx;\n    });\n    store.set(TRANSACTIONS, transactions);\n  }\n\n}\n\nLocalStorage.getWallet = () => validateConnectedWallet(store.get(CONNECTED_WALLET));\n\nLocalStorage.getTransactions = () => store.has(TRANSACTIONS) ? store.get(TRANSACTIONS) : [];\n\nLocalStorage.removeTransaction = tx => store.remove(TRANSACTIONS, tx);\n\nLocalStorage.clearTransaction = () => store.set(TRANSACTIONS, []);\n\nconst validateConnectedWallet = connectedWallet => {\n  if (!connectedWallet || !connectedWallet.account || !connectedWallet.provider || !connectedWallet.network) {\n    return undefined;\n  }\n\n  return connectedWallet;\n}; //\n// const validateTransaction = (connectedWallet?: IConnectedWallet) => {\n//   if (\n//     !connectedWallet ||\n//     !connectedWallet.account ||\n//     !connectedWallet.provider ||\n//     !connectedWallet.network\n//   ) {\n//     return undefined;\n//   }\n//   return connectedWallet;\n// };","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/local-storage/index.ts"],"names":["store","CONNECTED_WALLET","TRANSACTIONS","LocalStorage","setWallet","connectedWallet","validated","validateConnectedWallet","set","removeWallet","remove","addTransaction","tx","has","add","window","dispatchEvent","Event","updatePendingTransaction","txId","transactions","get","map","txid","status","getWallet","getTransactions","removeTransaction","clearTransaction","account","provider","network","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,QAAlB;AAGA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,MAAMC,YAAN,CAAmB;AAID,SAATC,SAAS,CAACC,eAAD,EAAoC;AACzD,UAAMC,SAAS,GAAGC,uBAAuB,CAACF,eAAD,CAAzC;AACAL,IAAAA,KAAK,CAACQ,GAAN,CAAUP,gBAAV,EAA4BK,SAA5B;AACD;;AAEyB,SAAZG,YAAY,GAAG;AAC3BT,IAAAA,KAAK,CAACU,MAAN,CAAaT,gBAAb;AACD;;AAK2B,SAAdU,cAAc,CAACC,EAAD,EAAmB;AAC7C,QAAIZ,KAAK,CAACa,GAAN,CAAUX,YAAV,CAAJ,EAA6B;AAC3BF,MAAAA,KAAK,CAACc,GAAN,CAAUZ,YAAV,EAAwBU,EAAxB;AACD,KAFD,MAEO;AACLZ,MAAAA,KAAK,CAACQ,GAAN,CAAUN,YAAV,EAAwB,CAACU,EAAD,CAAxB;AACD;;AACDG,IAAAA,MAAM,CAACC,aAAP,CAAqB,IAAIC,KAAJ,CAAU,cAAV,CAArB;AACD;;AACqC,SAAxBC,wBAAwB,CAACC,IAAD,EAAe;AACnD,QAAIC,YAAY,GAAGpB,KAAK,CAACqB,GAAN,CAAUnB,YAAV,CAAnB;AACAkB,IAAAA,YAAY,GAAGA,YAAY,CAACE,GAAb,CAAkBV,EAAD,IAAQ;AACtC,UAAIA,EAAE,CAACW,IAAH,KAAYJ,IAAhB,EAAsB;AACpBP,QAAAA,EAAE,CAACY,MAAH,GAAY,WAAZ;AACD;;AACD,aAAOZ,EAAP;AACD,KALc,CAAf;AAMAZ,IAAAA,KAAK,CAACQ,GAAN,CAAUN,YAAV,EAAwBkB,YAAxB;AACD;;AAjCuB;;AAAbjB,Y,CACGsB,S,GAAY,MACxBlB,uBAAuB,CAACP,KAAK,CAACqB,GAAN,CAAUpB,gBAAV,CAAD,C;;AAFdE,Y,CAaGuB,e,GAAkB,MAC9B1B,KAAK,CAACa,GAAN,CAAUX,YAAV,IAA0BF,KAAK,CAACqB,GAAN,CAAUnB,YAAV,CAA1B,GAAoD,E;;AAd3CC,Y,CAmCGwB,iB,GAAqBf,EAAD,IAChCZ,KAAK,CAACU,MAAN,CAAaR,YAAb,EAA2BU,EAA3B,C;;AApCST,Y,CAsCGyB,gB,GAAmB,MAAM5B,KAAK,CAACQ,GAAN,CAAUN,YAAV,EAAwB,EAAxB,C;;AAGzC,MAAMK,uBAAuB,GAAIF,eAAD,IAAwC;AACtE,MACE,CAACA,eAAD,IACA,CAACA,eAAe,CAACwB,OADjB,IAEA,CAACxB,eAAe,CAACyB,QAFjB,IAGA,CAACzB,eAAe,CAAC0B,OAJnB,EAKE;AACA,WAAOC,SAAP;AACD;;AACD,SAAO3B,eAAP;AACD,CAVD,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import store from \"store2\";\nimport { IConnectedWallet, ITransaction } from \"../wallet/interfaces\";\n\nconst CONNECTED_WALLET = \"CONNECTED_WALLET\";\nconst TRANSACTIONS = \"TRANSACTIONS\";\n\nexport class LocalStorage {\n  public static getWallet = (): IConnectedWallet | undefined =>\n    validateConnectedWallet(store.get(CONNECTED_WALLET));\n\n  public static setWallet(connectedWallet: IConnectedWallet) {\n    const validated = validateConnectedWallet(connectedWallet);\n    store.set(CONNECTED_WALLET, validated);\n  }\n\n  public static removeWallet() {\n    store.remove(CONNECTED_WALLET);\n  }\n\n  public static getTransactions = (): ITransaction[] =>\n    store.has(TRANSACTIONS) ? store.get(TRANSACTIONS) : [];\n\n  public static addTransaction(tx: ITransaction) {\n    if (store.has(TRANSACTIONS)) {\n      store.add(TRANSACTIONS, tx);\n    } else {\n      store.set(TRANSACTIONS, [tx]);\n    }\n    window.dispatchEvent(new Event(\"transactions\"));\n  }\n  public static updatePendingTransaction(txId: string) {\n    let transactions = store.get(TRANSACTIONS);\n    transactions = transactions.map((tx) => {\n      if (tx.txid === txId) {\n        tx.status = \"SUBMITTED\";\n      }\n      return tx;\n    });\n    store.set(TRANSACTIONS, transactions);\n  }\n\n  public static removeTransaction = (tx: ITransaction) =>\n    store.remove(TRANSACTIONS, tx);\n\n  public static clearTransaction = () => store.set(TRANSACTIONS, []);\n}\n\nconst validateConnectedWallet = (connectedWallet?: IConnectedWallet) => {\n  if (\n    !connectedWallet ||\n    !connectedWallet.account ||\n    !connectedWallet.provider ||\n    !connectedWallet.network\n  ) {\n    return undefined;\n  }\n  return connectedWallet;\n};\n//\n// const validateTransaction = (connectedWallet?: IConnectedWallet) => {\n//   if (\n//     !connectedWallet ||\n//     !connectedWallet.account ||\n//     !connectedWallet.provider ||\n//     !connectedWallet.network\n//   ) {\n//     return undefined;\n//   }\n//   return connectedWallet;\n// };\n"]},"metadata":{},"sourceType":"module"}