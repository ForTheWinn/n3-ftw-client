{"ast":null,"code":"import { DEV_WALLET_PRIVATE_KEY, GAS_SCRIPT_HASH, NEO_SCRIPT_HASH } from \"../consts\";\nimport { CONST, sc, tx, u, wallet } from \"@cityofzion/neon-core\";\nimport { Network } from \"../network\";\nimport { convertContractCallParam } from \"../utils\";\nexport class DevWallet {\n  static async getAccount() {\n    return {\n      address: DevWallet.account.address,\n      label: \"DEV\"\n    };\n  }\n\n  static async getProvider() {\n    return {\n      name: \"Dev wallet\",\n      version: \"0.0\",\n      website: \"https://\",\n      // @ts-ignore\n      compatibility: [],\n      extra: {\n        currency: \"USD\",\n        theme: \"\"\n      }\n    };\n  }\n\n  static async getNetworks(network) {\n    return {\n      chainId: 4,\n      defaultNetwork: network,\n      networks: [\"MainNet\", \"TestNet\", \"N3MainNet\", \"N3TestNet\"]\n    };\n  }\n  /* Convert balance as neoline does */\n\n\n  static async getBalance(network) {\n    const rpc = Network.getRPCClient(network);\n    const res = await rpc.getNep17Balances(DevWallet.account.address);\n    const balances = [];\n    res.balance.forEach(item => {\n      let symbol;\n\n      if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n        symbol = \"GAS\";\n      }\n\n      if (item.assethash.includes(NEO_SCRIPT_HASH)) {\n        symbol = \"NEO\";\n      }\n\n      balances.push({\n        contract: item.assethash,\n        amount: u.BigInteger.fromNumber(item.amount).toDecimal(8).toString(),\n        symbol\n      });\n    });\n    return balances;\n  }\n\n  static async invoke(network, invokeScript) {\n    const rpc = Network.getRPCClient(network);\n    console.log(\"Dev wallet invoking\");\n    console.log(\"RPC:\", rpc);\n    const tx = await DevWallet.build(rpc, invokeScript, DevWallet.account.address);\n    console.log(\"Transaction:\", tx);\n    const version = await rpc.getVersion();\n    console.log(\"Network\", version);\n    tx.sign(DevWallet.account, version.protocol.network);\n    console.log(\"System fee\", tx.systemFee.toDecimal(8).toString());\n    console.log(\"Network fee\", tx.networkFee.toDecimal(8).toString());\n    const txid = await rpc.sendRawTransaction(tx);\n    return {\n      txid,\n      nodeUrl: rpc.url\n    };\n  }\n\n}\nDevWallet.account = new wallet.Account(DEV_WALLET_PRIVATE_KEY);\n\nDevWallet.build = async (rpcClient, invokeScript, senderAddress, cosignerAddress) => {\n  const currentHeight = await rpcClient.getBlockCount(); // @ts-ignore\n\n  invokeScript.args = invokeScript.args.map(param => convertContractCallParam(param));\n  const script = sc.createScript({ ...invokeScript\n  });\n  const signers = [{\n    account: wallet.getScriptHashFromAddress(senderAddress),\n    scopes: tx.WitnessScope.Global\n  }];\n\n  if (cosignerAddress) {\n    signers.push({\n      account: wallet.getScriptHashFromAddress(cosignerAddress),\n      scopes: tx.WitnessScope.Global\n    });\n  }\n\n  const transaction = new tx.Transaction({\n    validUntilBlock: currentHeight + 1,\n    script,\n    signers\n  });\n  transaction.networkFee = await DevWallet.calculateNetworkFee(rpcClient, transaction);\n  const systemFee = await DevWallet.calculateSystemFee(rpcClient, transaction);\n  transaction.systemFee = systemFee; //\n  // if (cosigner) {\n  //   transaction.sign(cosigner, version.network);\n  // }\n\n  /* Temporary hard coding to solve NeonJS ordering bug */\n  // if (\n  //   transaction.witnesses[0].scriptHash !== sender.scriptHash &&\n  //   signers.length > 1\n  // ) {\n  //   let sig1 = transaction.witnesses[0];\n  //   let sig2 = transaction.witnesses[1];\n  //   transaction.witnesses[1] = sig1;\n  //   transaction.witnesses[0] = sig2;\n  // }\n\n  return transaction;\n};\n\nDevWallet.calculateNetworkFee = async (rpcClient, transaction) => {\n  const invokeFunctionResponse = await rpcClient.invokeFunction(CONST.NATIVE_CONTRACT_HASH.PolicyContract, \"getFeePerByte\");\n\n  if (invokeFunctionResponse.state !== \"HALT\") {\n    throw new Error(invokeFunctionResponse.exception ? invokeFunctionResponse.exception : \"Failed\");\n  }\n\n  const feePerByte = u.BigInteger.fromNumber( // @ts-ignore\n  invokeFunctionResponse.stack[0].value); // Account for witness size\n\n  const transactionByteSize = transaction.serialize().length / 2 + 109; // Hardcoded. Running a witness is always the same cost for the basic account.\n\n  const witnessProcessingFee = u.BigInteger.fromNumber( // In case of cosigner, check signer length check and mul the fee.\n  1000390 * (transaction.signers.length === 1 ? 1 : 3));\n  return feePerByte.mul(transactionByteSize).add(witnessProcessingFee);\n};\n\nDevWallet.calculateSystemFee = async (rpcClient, transaction) => {\n  const invokeFunctionResponse = await rpcClient.invokeScript(transaction.script, transaction.signers);\n\n  if (invokeFunctionResponse.state !== \"HALT\") {\n    throw new Error(invokeFunctionResponse.exception ? invokeFunctionResponse.exception : \"Failed\");\n  }\n\n  return u.BigInteger.fromNumber(invokeFunctionResponse.gasconsumed);\n};\n\nDevWallet.balanceCheck = async (rpcClient, sender, systemFee, networkFee, transferScript) => {\n  const res = await rpcClient.getNep17Balances(sender);\n  let gasBalance = 0;\n  const requiredGas = systemFee + networkFee;\n  let transferTokenBalance = 0;\n  res.balance.map(item => {\n    if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n      gasBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n    }\n\n    if (transferScript && transferScript.operation === \"transfer\" && item.assethash.includes(transferScript.scriptHash)) {\n      transferTokenBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n    }\n  });\n\n  if (gasBalance < requiredGas) {\n    return false;\n  }\n\n  gasBalance = gasBalance - requiredGas;\n\n  if (transferScript && transferScript.operation === \"transfer\") {\n    const transferAmount = u.Fixed8.fromRawNumber( // @ts-ignore\n    transferScript.args[2].value).toNumber();\n\n    if (transferScript.scriptHash === GAS_SCRIPT_HASH) {\n      if (gasBalance < transferAmount) {\n        return false;\n      }\n    } else {\n      if (transferTokenBalance < transferAmount) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/wallet/dev-wallet.ts"],"names":["DEV_WALLET_PRIVATE_KEY","GAS_SCRIPT_HASH","NEO_SCRIPT_HASH","CONST","sc","tx","u","wallet","Network","convertContractCallParam","DevWallet","getAccount","address","account","label","getProvider","name","version","website","compatibility","extra","currency","theme","getNetworks","network","chainId","defaultNetwork","networks","getBalance","rpc","getRPCClient","res","getNep17Balances","balances","balance","forEach","item","symbol","assethash","includes","push","contract","amount","BigInteger","fromNumber","toDecimal","toString","invoke","invokeScript","console","log","build","getVersion","sign","protocol","systemFee","networkFee","txid","sendRawTransaction","nodeUrl","url","Account","rpcClient","senderAddress","cosignerAddress","currentHeight","getBlockCount","args","map","param","script","createScript","signers","getScriptHashFromAddress","scopes","WitnessScope","Global","transaction","Transaction","validUntilBlock","calculateNetworkFee","calculateSystemFee","invokeFunctionResponse","invokeFunction","NATIVE_CONTRACT_HASH","PolicyContract","state","Error","exception","feePerByte","stack","value","transactionByteSize","serialize","length","witnessProcessingFee","mul","add","gasconsumed","balanceCheck","sender","transferScript","gasBalance","requiredGas","transferTokenBalance","Fixed8","fromRawNumber","toNumber","operation","scriptHash","transferAmount"],"mappings":"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","sourcesContent":["import {\n  DEV_WALLET_PRIVATE_KEY,\n  GAS_SCRIPT_HASH,\n  NEO_SCRIPT_HASH,\n} from \"../consts\";\nimport { CONST, rpc, sc, tx, u, wallet } from \"@cityofzion/neon-core\";\nimport { BigInteger } from \"@cityofzion/neon-core/lib/u\";\nimport { INetworkType, Network } from \"../network\";\nimport { IBalance } from \"./interfaces\";\nimport { convertContractCallParam } from \"../utils\";\n\nexport class DevWallet {\n  static account = new wallet.Account(DEV_WALLET_PRIVATE_KEY);\n  static async getAccount() {\n    return {\n      address: DevWallet.account.address,\n      label: \"DEV\",\n    };\n  }\n\n  static async getProvider() {\n    return {\n      name: \"Dev wallet\",\n      version: \"0.0\",\n      website: \"https://\",\n      // @ts-ignore\n      compatibility: [],\n      extra: { currency: \"USD\", theme: \"\" },\n    };\n  }\n\n  static async getNetworks(network: INetworkType) {\n    return {\n      chainId: 4,\n      defaultNetwork: network,\n      networks: [\"MainNet\", \"TestNet\", \"N3MainNet\", \"N3TestNet\"],\n    };\n  }\n\n  /* Convert balance as neoline does */\n  static async getBalance(network: INetworkType) {\n    const rpc = Network.getRPCClient(network);\n    const res = await rpc.getNep17Balances(DevWallet.account.address);\n    const balances: IBalance[] = [];\n    res.balance.forEach((item) => {\n      let symbol;\n      if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n        symbol = \"GAS\";\n      }\n      if (item.assethash.includes(NEO_SCRIPT_HASH)) {\n        symbol = \"NEO\";\n      }\n      balances.push({\n        contract: item.assethash,\n        amount: u.BigInteger.fromNumber(item.amount).toDecimal(8).toString(),\n        symbol,\n      });\n    });\n    return balances;\n  }\n\n  static async invoke(\n    network: INetworkType,\n    invokeScript: sc.ContractCallJson\n  ) {\n    const rpc = Network.getRPCClient(network);\n    console.log(\"Dev wallet invoking\");\n    console.log(\"RPC:\", rpc);\n    const tx = await DevWallet.build(\n      rpc,\n      invokeScript,\n      DevWallet.account.address\n    );\n    console.log(\"Transaction:\", tx);\n    const version: any = await rpc.getVersion();\n    console.log(\"Network\", version);\n    tx.sign(DevWallet.account, version.protocol.network);\n    console.log(\"System fee\", tx.systemFee.toDecimal(8).toString());\n    console.log(\"Network fee\", tx.networkFee.toDecimal(8).toString());\n    const txid = await rpc.sendRawTransaction(tx);\n    return {\n      txid,\n      nodeUrl: rpc.url,\n    };\n  }\n\n  static build = async (\n    rpcClient: rpc.RPCClient,\n    invokeScript: sc.ContractCallJson,\n    senderAddress: string,\n    cosignerAddress?: string\n  ): Promise<tx.Transaction> => {\n    const currentHeight = await rpcClient.getBlockCount();\n    // @ts-ignore\n    invokeScript.args = invokeScript.args.map((param: any) =>\n      convertContractCallParam(param)\n    );\n    const script = sc.createScript({ ...invokeScript });\n\n    const signers = [\n      {\n        account: wallet.getScriptHashFromAddress(senderAddress),\n        scopes: tx.WitnessScope.Global,\n      },\n    ];\n    if (cosignerAddress) {\n      signers.push({\n        account: wallet.getScriptHashFromAddress(cosignerAddress),\n        scopes: tx.WitnessScope.Global,\n      });\n    }\n\n    const transaction = new tx.Transaction({\n      validUntilBlock: currentHeight + 1,\n      script,\n      signers,\n    });\n\n    transaction.networkFee = await DevWallet.calculateNetworkFee(\n      rpcClient,\n      transaction\n    );\n    const systemFee = await DevWallet.calculateSystemFee(\n      rpcClient,\n      transaction\n    );\n    transaction.systemFee = systemFee;\n    //\n    // if (cosigner) {\n    //   transaction.sign(cosigner, version.network);\n    // }\n    /* Temporary hard coding to solve NeonJS ordering bug */\n    // if (\n    //   transaction.witnesses[0].scriptHash !== sender.scriptHash &&\n    //   signers.length > 1\n    // ) {\n    //   let sig1 = transaction.witnesses[0];\n    //   let sig2 = transaction.witnesses[1];\n    //   transaction.witnesses[1] = sig1;\n    //   transaction.witnesses[0] = sig2;\n    // }\n    return transaction;\n  };\n\n  static calculateNetworkFee = async (\n    rpcClient: rpc.RPCClient,\n    transaction: tx.Transaction\n  ): Promise<BigInteger> => {\n    const invokeFunctionResponse = await rpcClient.invokeFunction(\n      CONST.NATIVE_CONTRACT_HASH.PolicyContract,\n      \"getFeePerByte\"\n    );\n\n    if (invokeFunctionResponse.state !== \"HALT\") {\n      throw new Error(\n        invokeFunctionResponse.exception\n          ? invokeFunctionResponse.exception\n          : \"Failed\"\n      );\n    }\n\n    const feePerByte = u.BigInteger.fromNumber(\n      // @ts-ignore\n      invokeFunctionResponse.stack[0].value\n    );\n    // Account for witness size\n    const transactionByteSize = transaction.serialize().length / 2 + 109;\n    // Hardcoded. Running a witness is always the same cost for the basic account.\n    const witnessProcessingFee = u.BigInteger.fromNumber(\n      // In case of cosigner, check signer length check and mul the fee.\n      1000390 * (transaction.signers.length === 1 ? 1 : 3)\n    );\n\n    return feePerByte.mul(transactionByteSize).add(witnessProcessingFee);\n  };\n\n  static calculateSystemFee = async (\n    rpcClient: rpc.RPCClient,\n    transaction: tx.Transaction\n  ) => {\n    const invokeFunctionResponse = await rpcClient.invokeScript(\n      transaction.script,\n      transaction.signers\n    );\n    if (invokeFunctionResponse.state !== \"HALT\") {\n      throw new Error(\n        invokeFunctionResponse.exception\n          ? invokeFunctionResponse.exception\n          : \"Failed\"\n      );\n    }\n\n    return u.BigInteger.fromNumber(invokeFunctionResponse.gasconsumed);\n  };\n\n  static balanceCheck = async (\n    rpcClient: rpc.RPCClient,\n    sender: string,\n    systemFee: number,\n    networkFee: number,\n    transferScript?: sc.ContractCallJson\n  ): Promise<boolean> => {\n    const res = await rpcClient.getNep17Balances(sender);\n    let gasBalance = 0;\n    const requiredGas = systemFee + networkFee;\n    let transferTokenBalance = 0;\n\n    res.balance.map((item) => {\n      if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n        gasBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n      }\n      if (\n        transferScript &&\n        transferScript.operation === \"transfer\" &&\n        item.assethash.includes(transferScript.scriptHash)\n      ) {\n        transferTokenBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n      }\n    });\n\n    if (gasBalance < requiredGas) {\n      return false;\n    }\n\n    gasBalance = gasBalance - requiredGas;\n\n    if (transferScript && transferScript.operation === \"transfer\") {\n      const transferAmount = u.Fixed8.fromRawNumber(\n        // @ts-ignore\n        transferScript.args[2].value\n      ).toNumber();\n\n      if (transferScript.scriptHash === GAS_SCRIPT_HASH) {\n        if (gasBalance < transferAmount) {\n          return false;\n        }\n      } else {\n        if (transferTokenBalance < transferAmount) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}