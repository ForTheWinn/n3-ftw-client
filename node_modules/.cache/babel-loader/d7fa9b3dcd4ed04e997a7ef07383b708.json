{"ast":null,"code":"import { Network } from \"../../../network\";\nimport { wallet } from \"../../../index\";\nimport { NEO_SCRIPT_HASH } from \"../../../consts\";\nimport { FARM_SCRIPT_HASH } from \"./consts\";\nimport { parseClaimPaginate, parseDeposit, parseSnapshotPaginate } from \"./helpers\";\nimport { FTW_SCRIPT_HASH } from \"../nep17\";\nexport class FarmContract {\n  constructor(networkType) {\n    this.network = void 0;\n    this.contractHash = void 0;\n\n    this.deposit = async (connectedWallet, amount, position) => {\n      const invokeScript = {\n        operation: \"transfer\",\n        scriptHash: NEO_SCRIPT_HASH,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }, {\n          type: \"Hash160\",\n          value: this.contractHash\n        }, {\n          type: \"Integer\",\n          value: amount\n        }, {\n          type: \"Integer\",\n          value: parseFloat(position)\n        }]\n      };\n      return new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.remove = async connectedWallet => {\n      const invokeScript = {\n        operation: \"removeFund\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }]\n      };\n      return new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.createSnapshot = async connectedWallet => {\n      const invokeScript = {\n        operation: \"createSnapshot\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      return new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.claim = async connectedWallet => {\n      const invokeScript = {\n        operation: \"claim\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }]\n      };\n      return new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.getStatus = async connectedWallet => {\n      const neoBalance = {\n        operation: \"balanceOf\",\n        scriptHash: NEO_SCRIPT_HASH,\n        args: [{\n          type: \"Hash160\",\n          value: this.contractHash\n        }]\n      };\n      const ftwBalance = {\n        operation: \"balanceOf\",\n        scriptHash: FTW_SCRIPT_HASH[this.network],\n        args: [{\n          type: \"Hash160\",\n          value: this.contractHash\n        }]\n      };\n      const timeLeft = {\n        operation: \"timeLeft\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const interval = {\n        operation: \"getSnapshotInterval\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const range = {\n        operation: \"getRange\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const vote = {\n        operation: \"getVote\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const snapshots = {\n        operation: \"getSnapshots\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Integer\",\n          value: 1\n        }]\n      };\n      const scripts = [neoBalance, ftwBalance, timeLeft, interval, range, vote, snapshots];\n\n      if (connectedWallet) {\n        const deposit = {\n          operation: \"getDeposit\",\n          scriptHash: this.contractHash,\n          args: [{\n            type: \"Address\",\n            value: connectedWallet.account.address\n          }]\n        };\n        const claims = {\n          operation: \"getClaims\",\n          scriptHash: this.contractHash,\n          args: [{\n            // @ts-ignore\n            type: \"Address\",\n            // @ts-ignore\n            value: connectedWallet.account.address\n          }, {\n            type: \"Integer\",\n            value: 1\n          }]\n        };\n        scripts.push(deposit);\n        scripts.push(claims);\n      }\n\n      const res = await Network.read(this.network, scripts);\n      return {\n        neoBalance: res.stack[0].value,\n        ftwBalance: res.stack[1].value,\n        timeLeft: res.stack[2].value,\n        interval: res.stack[3].value,\n        range: res.stack[4].value,\n        vote: res.stack[5].value,\n        snapshots: parseSnapshotPaginate(res.stack[6].value),\n        deposit: connectedWallet && res.stack[7].value ? parseDeposit(res.stack[7].value) : undefined,\n        claims: connectedWallet && res.stack[8].value ? parseClaimPaginate(res.stack[8].value) : undefined\n      };\n    };\n\n    this.network = networkType;\n    this.contractHash = FARM_SCRIPT_HASH[networkType];\n  }\n\n}","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/contracts/ftw/farm/index.ts"],"names":["Network","wallet","NEO_SCRIPT_HASH","FARM_SCRIPT_HASH","parseClaimPaginate","parseDeposit","parseSnapshotPaginate","FTW_SCRIPT_HASH","FarmContract","constructor","networkType","network","contractHash","deposit","connectedWallet","amount","position","invokeScript","operation","scriptHash","args","type","value","account","address","parseFloat","WalletAPI","key","invoke","remove","createSnapshot","claim","getStatus","neoBalance","ftwBalance","timeLeft","interval","range","vote","snapshots","scripts","claims","push","res","read","stack","undefined"],"mappings":"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","sourcesContent":["import { INetworkType, Network } from \"../../../network\";\nimport { IConnectedWallet } from \"../../../wallet/interfaces\";\nimport { wallet } from \"../../../index\";\nimport { NEO_SCRIPT_HASH } from \"../../../consts\";\nimport { FARM_SCRIPT_HASH } from \"./consts\";\nimport { IFarmContractStatus } from \"./interfaces\";\nimport {\n  parseClaimPaginate,\n  parseDeposit,\n  parseSnapshotPaginate,\n} from \"./helpers\";\nimport { FTW_SCRIPT_HASH } from \"../nep17\";\n\nexport class FarmContract {\n  network: INetworkType;\n  contractHash: string;\n\n  constructor(networkType: INetworkType) {\n    this.network = networkType;\n    this.contractHash = FARM_SCRIPT_HASH[networkType];\n  }\n\n  deposit = async (\n    connectedWallet: IConnectedWallet,\n    amount: string,\n    position: string\n  ): Promise<string> => {\n    const invokeScript = {\n      operation: \"transfer\",\n      scriptHash: NEO_SCRIPT_HASH,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n        {\n          type: \"Hash160\",\n          value: this.contractHash,\n        },\n        {\n          type: \"Integer\",\n          value: amount,\n        },\n        {\n          type: \"Integer\",\n          value: parseFloat(position),\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  remove = async (connectedWallet: IConnectedWallet): Promise<string> => {\n    const invokeScript = {\n      operation: \"removeFund\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  createSnapshot = async (\n    connectedWallet: IConnectedWallet\n  ): Promise<string> => {\n    const invokeScript = {\n      operation: \"createSnapshot\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  claim = async (connectedWallet: IConnectedWallet): Promise<string> => {\n    const invokeScript = {\n      operation: \"claim\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  getStatus = async (\n    connectedWallet?: IConnectedWallet\n  ): Promise<IFarmContractStatus> => {\n    const neoBalance = {\n      operation: \"balanceOf\",\n      scriptHash: NEO_SCRIPT_HASH,\n      args: [\n        {\n          type: \"Hash160\",\n          value: this.contractHash,\n        },\n      ],\n    };\n\n    const ftwBalance = {\n      operation: \"balanceOf\",\n      scriptHash: FTW_SCRIPT_HASH[this.network],\n      args: [\n        {\n          type: \"Hash160\",\n          value: this.contractHash,\n        },\n      ],\n    };\n\n    const timeLeft = {\n      operation: \"timeLeft\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const interval = {\n      operation: \"getSnapshotInterval\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const range = {\n      operation: \"getRange\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const vote = {\n      operation: \"getVote\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const snapshots = {\n      operation: \"getSnapshots\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Integer\",\n          value: 1,\n        },\n      ],\n    };\n\n    const scripts = [\n      neoBalance,\n      ftwBalance,\n      timeLeft,\n      interval,\n      range,\n      vote,\n      snapshots,\n    ];\n\n    if (connectedWallet) {\n      const deposit = {\n        operation: \"getDeposit\",\n        scriptHash: this.contractHash,\n        args: [\n          {\n            type: \"Address\",\n            value: connectedWallet.account.address,\n          },\n        ],\n      };\n      const claims = {\n        operation: \"getClaims\",\n        scriptHash: this.contractHash,\n        args: [\n          {\n            // @ts-ignore\n            type: \"Address\",\n            // @ts-ignore\n            value: connectedWallet.account.address,\n          },\n          {\n            type: \"Integer\",\n            value: 1,\n          },\n        ],\n      };\n      scripts.push(deposit);\n      scripts.push(claims);\n    }\n\n    const res = await Network.read(this.network, scripts);\n    return {\n      neoBalance: res.stack[0].value as string,\n      ftwBalance: res.stack[1].value as string,\n      timeLeft: res.stack[2].value as string,\n      interval: res.stack[3].value as string,\n      range: res.stack[4].value as string,\n      vote: res.stack[5].value as string,\n      snapshots: parseSnapshotPaginate(res.stack[6].value),\n      deposit:\n        connectedWallet && res.stack[7].value\n          ? parseDeposit(res.stack[7].value)\n          : undefined,\n      claims:\n        connectedWallet && res.stack[8].value\n          ? parseClaimPaginate(res.stack[8].value)\n          : undefined,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}