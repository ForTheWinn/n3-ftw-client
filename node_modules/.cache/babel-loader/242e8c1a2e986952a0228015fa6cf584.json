{"ast":null,"code":"import store from \"store2\";\nimport { FARM_SCRIPT_HASH } from \"../contracts/ftw/farm/consts\";\nimport { NFT_SCRIPT_HASH } from \"../contracts\";\nconst CONNECTED_WALLET = \"CONNECTED_WALLET\";\nconst TRANSACTIONS = \"TRANSACTIONS\";\nexport class LocalStorage {\n  static setWallet(connectedWallet) {\n    const validated = validateConnectedWallet(connectedWallet);\n    store.set(CONNECTED_WALLET, validated);\n  }\n\n  static removeWallet() {\n    store.remove(CONNECTED_WALLET);\n  }\n\n  static addTransaction(tx) {\n    if (store.has(TRANSACTIONS)) {\n      store.add(TRANSACTIONS, tx);\n    } else {\n      store.set(TRANSACTIONS, [tx]);\n    }\n\n    window.dispatchEvent(new Event(\"transactions\"));\n  }\n\n  static updatePendingTransaction(txId) {\n    let transactions = store.get(TRANSACTIONS);\n    transactions = transactions.map(tx => {\n      if (tx.txid === txId) {\n        tx.status = \"SUBMITTED\";\n      }\n\n      return tx;\n    });\n    store.set(TRANSACTIONS, transactions);\n  }\n\n}\n\nLocalStorage.initStorage = network => {\n  const supportContracts = [FARM_SCRIPT_HASH[network], NFT_SCRIPT_HASH[network]];\n  const transactions = LocalStorage.getTransactions();\n  const validatedTx = [];\n  transactions.forEach(tx => {\n    if (supportContracts.includes(tx.contractHash)) {\n      validatedTx.push(tx);\n    } else {\n      LocalStorage.removeTransaction(tx);\n    }\n  });\n  return validatedTx;\n};\n\nLocalStorage.getWallet = () => validateConnectedWallet(store.get(CONNECTED_WALLET));\n\nLocalStorage.getTransactions = () => store.has(TRANSACTIONS) ? store.get(TRANSACTIONS) : [];\n\nLocalStorage.removeTransaction = tx => store.remove(TRANSACTIONS, tx);\n\nLocalStorage.clearTransaction = () => store.set(TRANSACTIONS, []);\n\nconst validateConnectedWallet = connectedWallet => {\n  if (!connectedWallet || !connectedWallet.account || !connectedWallet.provider || !connectedWallet.network) {\n    return undefined;\n  }\n\n  return connectedWallet;\n}; //\n// const validateTransaction = (connectedWallet?: IConnectedWallet) => {\n//   if (\n//     !connectedWallet ||\n//     !connectedWallet.account ||\n//     !connectedWallet.provider ||\n//     !connectedWallet.network\n//   ) {\n//     return undefined;\n//   }\n//   return connectedWallet;\n// };","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/local-storage/index.ts"],"names":["store","FARM_SCRIPT_HASH","NFT_SCRIPT_HASH","CONNECTED_WALLET","TRANSACTIONS","LocalStorage","setWallet","connectedWallet","validated","validateConnectedWallet","set","removeWallet","remove","addTransaction","tx","has","add","window","dispatchEvent","Event","updatePendingTransaction","txId","transactions","get","map","txid","status","initStorage","network","supportContracts","getTransactions","validatedTx","forEach","includes","contractHash","push","removeTransaction","getWallet","clearTransaction","account","provider","undefined"],"mappings":"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","sourcesContent":["import store from \"store2\";\nimport { IConnectedWallet, ITransaction } from \"../wallet/interfaces\";\nimport { FARM_SCRIPT_HASH } from \"../contracts/ftw/farm/consts\";\nimport { NFT_SCRIPT_HASH } from \"../contracts\";\n\nconst CONNECTED_WALLET = \"CONNECTED_WALLET\";\nconst TRANSACTIONS = \"TRANSACTIONS\";\n\nexport class LocalStorage {\n  public static initStorage = (network: string): ITransaction[] => {\n    const supportContracts = [\n      FARM_SCRIPT_HASH[network],\n      NFT_SCRIPT_HASH[network],\n    ];\n    const transactions = LocalStorage.getTransactions();\n    const validatedTx: ITransaction[] = [];\n    transactions.forEach((tx) => {\n      if (supportContracts.includes(tx.contractHash)) {\n        validatedTx.push(tx);\n      } else {\n        LocalStorage.removeTransaction(tx);\n      }\n    });\n    return validatedTx;\n  };\n  public static getWallet = (): IConnectedWallet | undefined =>\n    validateConnectedWallet(store.get(CONNECTED_WALLET));\n\n  public static setWallet(connectedWallet: IConnectedWallet) {\n    const validated = validateConnectedWallet(connectedWallet);\n    store.set(CONNECTED_WALLET, validated);\n  }\n\n  public static removeWallet() {\n    store.remove(CONNECTED_WALLET);\n  }\n\n  public static getTransactions = (): ITransaction[] =>\n    store.has(TRANSACTIONS) ? store.get(TRANSACTIONS) : [];\n\n  public static addTransaction(tx: ITransaction) {\n    if (store.has(TRANSACTIONS)) {\n      store.add(TRANSACTIONS, tx);\n    } else {\n      store.set(TRANSACTIONS, [tx]);\n    }\n    window.dispatchEvent(new Event(\"transactions\"));\n  }\n\n  public static updatePendingTransaction(txId: string) {\n    let transactions = store.get(TRANSACTIONS);\n    transactions = transactions.map((tx) => {\n      if (tx.txid === txId) {\n        tx.status = \"SUBMITTED\";\n      }\n      return tx;\n    });\n    store.set(TRANSACTIONS, transactions);\n  }\n\n  public static removeTransaction = (tx: ITransaction) =>\n    store.remove(TRANSACTIONS, tx);\n\n  public static clearTransaction = () => store.set(TRANSACTIONS, []);\n}\n\nconst validateConnectedWallet = (connectedWallet?: IConnectedWallet) => {\n  if (\n    !connectedWallet ||\n    !connectedWallet.account ||\n    !connectedWallet.provider ||\n    !connectedWallet.network\n  ) {\n    return undefined;\n  }\n  return connectedWallet;\n};\n//\n// const validateTransaction = (connectedWallet?: IConnectedWallet) => {\n//   if (\n//     !connectedWallet ||\n//     !connectedWallet.account ||\n//     !connectedWallet.provider ||\n//     !connectedWallet.network\n//   ) {\n//     return undefined;\n//   }\n//   return connectedWallet;\n// };\n"]},"metadata":{},"sourceType":"module"}