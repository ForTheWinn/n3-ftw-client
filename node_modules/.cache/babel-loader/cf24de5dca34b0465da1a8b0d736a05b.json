{"ast":null,"code":"import { sc, u, wallet } from \"@cityofzion/neon-core\";\nimport moment from \"moment\";\nexport const truncateAddress = address => {\n  return `${address.substring(0, 4)}...${address.substr(address.length - 2)}`;\n};\n/**\n * It converts contract call params for dev wallet. Depending on 3rd wallet params.\n * @param param\n */\n\nexport const convertContractCallParam = param => {\n  switch (param.type) {\n    case \"Address\":\n      return sc.ContractParam.hash160(wallet.getScriptHashFromAddress(param.value));\n\n    case \"Hash160\":\n      return sc.ContractParam.hash160(param.value);\n\n    case \"String\":\n      return sc.ContractParam.string(param.value);\n\n    case \"Integer\":\n      return sc.ContractParam.integer(param.value);\n\n    case \"Array\":\n      return sc.ContractParam.array(...param.value.map(i => convertContractCallParam(i)));\n\n    case \"ByteArray\":\n      return sc.ContractParam.byteArray(u.hex2base64(u.str2hexstring(param.value)));\n\n    default:\n      throw new Error(\"No support param\");\n  }\n};\nexport const base64ToAddress = str => wallet.getAddressFromScriptHash(base64ToHash160(str));\nexport const base64ToHash160 = str => u.reverseHex(u.base642hex(str));\nexport const base64ToString = str => u.HexString.fromBase64(str).toAscii().toString();\nexport const base64ToFixed8 = str => {\n  // u.BigInteger.fromNumber(str).toDecimal(8);\n  return truncateDecimal(8, str); // return u.num2fixed8(parseFloat(str), 8);\n}; // u.BigInteger.fromNumber(str).toDecimal(8);\n// u.BigInteger.fromNumber(str).toDecimal(8);\n\nexport const base64ToDate = str => moment.unix(parseFloat(str) / 1000).format(\"lll\");\nexport function truncateDecimal(v, p) {\n  const s = Math.pow(10, p || 0);\n  return Math.trunc(s * v) / s;\n}","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/utils/index.ts"],"names":["sc","u","wallet","moment","truncateAddress","address","substring","substr","length","convertContractCallParam","param","type","ContractParam","hash160","getScriptHashFromAddress","value","string","integer","array","map","i","byteArray","hex2base64","str2hexstring","Error","base64ToAddress","str","getAddressFromScriptHash","base64ToHash160","reverseHex","base642hex","base64ToString","HexString","fromBase64","toAscii","toString","base64ToFixed8","truncateDecimal","base64ToDate","unix","parseFloat","format","v","p","s","Math","pow","trunc"],"mappings":"AAAA,SAASA,EAAT,EAAaC,CAAb,EAAgBC,MAAhB,QAA8B,uBAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAqB;AAClD,SAAQ,GAAEA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,CAAwB,MAAKD,OAAO,CAACE,MAAR,CAAeF,OAAO,CAACG,MAAR,GAAiB,CAAhC,CAAmC,EAA1E;AACD,CAFM;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAIC,KAAD,IAAgB;AACtD,UAAQA,KAAK,CAACC,IAAd;AACE,SAAK,SAAL;AACE,aAAOX,EAAE,CAACY,aAAH,CAAiBC,OAAjB,CACLX,MAAM,CAACY,wBAAP,CAAgCJ,KAAK,CAACK,KAAtC,CADK,CAAP;;AAIF,SAAK,SAAL;AACE,aAAOf,EAAE,CAACY,aAAH,CAAiBC,OAAjB,CAAyBH,KAAK,CAACK,KAA/B,CAAP;;AACF,SAAK,QAAL;AACE,aAAOf,EAAE,CAACY,aAAH,CAAiBI,MAAjB,CAAwBN,KAAK,CAACK,KAA9B,CAAP;;AACF,SAAK,SAAL;AACE,aAAOf,EAAE,CAACY,aAAH,CAAiBK,OAAjB,CAAyBP,KAAK,CAACK,KAA/B,CAAP;;AACF,SAAK,OAAL;AACE,aAAOf,EAAE,CAACY,aAAH,CAAiBM,KAAjB,CACL,GAAGR,KAAK,CAACK,KAAN,CAAYI,GAAZ,CAAiBC,CAAD,IAAYX,wBAAwB,CAACW,CAAD,CAApD,CADE,CAAP;;AAGF,SAAK,WAAL;AACE,aAAOpB,EAAE,CAACY,aAAH,CAAiBS,SAAjB,CACLpB,CAAC,CAACqB,UAAF,CAAarB,CAAC,CAACsB,aAAF,CAAgBb,KAAK,CAACK,KAAtB,CAAb,CADK,CAAP;;AAGF;AACE,YAAM,IAAIS,KAAJ,CAAU,kBAAV,CAAN;AArBJ;AAuBD,CAxBM;AA0BP,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAC7BxB,MAAM,CAACyB,wBAAP,CAAgCC,eAAe,CAACF,GAAD,CAA/C,CADK;AAGP,OAAO,MAAME,eAAe,GAAIF,GAAD,IAAiBzB,CAAC,CAAC4B,UAAF,CAAa5B,CAAC,CAAC6B,UAAF,CAAaJ,GAAb,CAAb,CAAzC;AAEP,OAAO,MAAMK,cAAc,GAAIL,GAAD,IAC5BzB,CAAC,CAAC+B,SAAF,CAAYC,UAAZ,CAAuBP,GAAvB,EAA4BQ,OAA5B,GAAsCC,QAAtC,EADK;AAGP,OAAO,MAAMC,cAAc,GAAIV,GAAD,IAAiB;AAC9C;AACA,SAAOW,eAAe,CAAC,CAAD,EAAIX,GAAJ,CAAtB,CAF8C,CAG7C;AACD,CAJM,C,CAKP;AACA;;AAEA,OAAO,MAAMY,YAAY,GAAIZ,GAAD,IAC1BvB,MAAM,CAACoC,IAAP,CAAYC,UAAU,CAACd,GAAD,CAAV,GAAkB,IAA9B,EAAoCe,MAApC,CAA2C,KAA3C,CADK;AAGP,OAAO,SAASJ,eAAT,CAAyBK,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,QAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaH,CAAC,IAAI,CAAlB,CAAV;AACA,SAAOE,IAAI,CAACE,KAAL,CAAWH,CAAC,GAAGF,CAAf,IAAoBE,CAA3B;AACD","sourcesContent":["import { sc, u, wallet } from \"@cityofzion/neon-core\";\nimport moment from \"moment\";\nimport { num2fixed8 } from \"@cityofzion/neon-core/lib/u/BigInteger\";\n\nexport const truncateAddress = (address: string) => {\n  return `${address.substring(0, 4)}...${address.substr(address.length - 2)}`;\n};\n\n/**\n * It converts contract call params for dev wallet. Depending on 3rd wallet params.\n * @param param\n */\nexport const convertContractCallParam = (param: any) => {\n  switch (param.type) {\n    case \"Address\":\n      return sc.ContractParam.hash160(\n        wallet.getScriptHashFromAddress(param.value)\n      );\n\n    case \"Hash160\":\n      return sc.ContractParam.hash160(param.value);\n    case \"String\":\n      return sc.ContractParam.string(param.value);\n    case \"Integer\":\n      return sc.ContractParam.integer(param.value);\n    case \"Array\":\n      return sc.ContractParam.array(\n        ...param.value.map((i: any) => convertContractCallParam(i))\n      );\n    case \"ByteArray\":\n      return sc.ContractParam.byteArray(\n        u.hex2base64(u.str2hexstring(param.value))\n      );\n    default:\n      throw new Error(\"No support param\");\n  }\n};\n\nexport const base64ToAddress = (str: string) =>\n  wallet.getAddressFromScriptHash(base64ToHash160(str));\n\nexport const base64ToHash160 = (str: string) => u.reverseHex(u.base642hex(str));\n\nexport const base64ToString = (str: string) =>\n  u.HexString.fromBase64(str).toAscii().toString();\n\nexport const base64ToFixed8 = (str: string) => {\n\t// u.BigInteger.fromNumber(str).toDecimal(8);\n\treturn truncateDecimal(8, str)\n  // return u.num2fixed8(parseFloat(str), 8);\n};\n// u.BigInteger.fromNumber(str).toDecimal(8);\n// u.BigInteger.fromNumber(str).toDecimal(8);\n\nexport const base64ToDate = (str: string) =>\n  moment.unix(parseFloat(str) / 1000).format(\"lll\");\n\nexport function truncateDecimal(v, p) {\n  const s = Math.pow(10, p || 0);\n  return Math.trunc(s * v) / s;\n}\n"]},"metadata":{},"sourceType":"module"}