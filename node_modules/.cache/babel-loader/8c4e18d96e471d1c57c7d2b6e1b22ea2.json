{"ast":null,"code":"var _jsxFileName = \"/Users/ed/Projects/n3-ftw/client/src/packages/ui/Wallet/Runes.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { NFTContract } from \"../../neo/contracts\";\nimport { useWallet } from \"../../provider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Runes = _ref => {\n  _s();\n\n  let {\n    connectedWallet\n  } = _ref;\n  const [tokens, setTokens] = useState([]);\n  const [error, setError] = useState(\"\");\n  useState();\n  const {\n    network\n  } = useWallet(); // const onPropertiesModalActive = (obj: IRuneMeta) => {\n  //   if (connectedWallet) {\n  //     setPropertiesModalActive(obj);\n  //   } else {\n  //     toast.error(\"Please connect wallet.\");\n  //   }\n  // };\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      try {\n        const res = await new NFTContract(network).getTokens();\n        setTokens(res);\n      } catch (e) {\n        setError(e.message);\n      }\n    }\n\n    fetchContractStatus();\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexFlow: \"wrap\" // width: \"640px\",\n        // margin: \"0 auto\"\n\n      },\n      className: \"is-flex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Runes, \"wHh+xr4E6+pDsGyhw+P/l6M8y/s=\", false, function () {\n  return [useWallet];\n});\n\n_c = Runes;\nexport default Runes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Runes\");","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/ui/Wallet/Runes.tsx"],"names":["React","useEffect","useState","NFTContract","useWallet","Runes","connectedWallet","tokens","setTokens","error","setError","network","fetchContractStatus","res","getTokens","e","message","flexFlow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,SAASC,SAAT,QAA0B,gBAA1B;;;AASA,MAAMC,KAAK,GAAG,QAAsC;AAAA;;AAAA,MAArC;AAAEC,IAAAA;AAAF,GAAqC;AAClD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAM,EAAN,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACAA,EAAAA,QAAQ;AACR,QAAM;AAAES,IAAAA;AAAF,MAAcP,SAAS,EAA7B,CAJkD,CAKlD;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,mBAAf,GAAqC;AACnC,UAAI;AACF,cAAMC,GAAG,GAAG,MAAM,IAAIV,WAAJ,CAAgBQ,OAAhB,EAAyBG,SAAzB,EAAlB;AACAN,QAAAA,SAAS,CAACK,GAAD,CAAT;AACD,OAHD,CAGE,OAAOE,CAAP,EAAe;AACfL,QAAAA,QAAQ,CAACK,CAAC,CAACC,OAAH,CAAR;AACD;AACF;;AACDJ,IAAAA,mBAAmB;AACpB,GAVQ,EAUN,CAACN,eAAD,CAVM,CAAT;AAWA,sBACE;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLW,QAAAA,QAAQ,EAAE,MADL,CAEL;AACA;;AAHK,OADT;AAME,MAAA,SAAS,EAAC;AANZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA5CD;;GAAMZ,K;UAIgBD,S;;;KAJhBC,K;AA8CN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { NFTContract } from \"../../neo/contracts\";\nimport { IRuneMeta } from \"../../neo/contracts/ftw/nft/interfaces\";\nimport { useWallet } from \"../../provider\";\nimport toast from \"react-hot-toast\";\nimport DisplayRune from \"../../../ui/pages/Gallery/DisplayRune\";\nimport DisplayRandomRune from \"../../../ui/components/DisplayRandomRune\";\nimport { IConnectedWallet } from \"../../neo/wallet/interfaces\";\n\ninterface IRunesProps {\n  connectedWallet: IConnectedWallet;\n}\nconst Runes = ({ connectedWallet }: IRunesProps) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [error, setError] = useState(\"\");\n  useState<IRuneMeta>();\n  const { network } = useWallet();\n  // const onPropertiesModalActive = (obj: IRuneMeta) => {\n  //   if (connectedWallet) {\n  //     setPropertiesModalActive(obj);\n  //   } else {\n  //     toast.error(\"Please connect wallet.\");\n  //   }\n  // };\n  useEffect(() => {\n    async function fetchContractStatus() {\n      try {\n        const res = await new NFTContract(network).getTokens();\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet]);\n  return (\n    <div>\n      <div\n        style={{\n          flexFlow: \"wrap\",\n          // width: \"640px\",\n          // margin: \"0 auto\"\n        }}\n        className=\"is-flex\"\n      >\n        {/*{tokens.map((tokenId) => (*/}\n        {/*  <DisplayRune*/}\n        {/*    tokenId={tokenId}*/}\n        {/*    network={network}*/}\n        {/*    onClick={() => false}*/}\n        {/*  />*/}\n        {/*))}*/}\n        {/*<DisplayRandomRune width=\"64px\" height=\"64px\" />*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Runes;\n"]},"metadata":{},"sourceType":"module"}