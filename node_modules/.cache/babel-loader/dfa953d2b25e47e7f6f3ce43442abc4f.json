{"ast":null,"code":"import { u } from \"@cityofzion/neon-core\";\nimport { base64ToAddress, base64ToString } from \"../../../utils\";\n/* Parse properties from rpc. */\n\nexport const parseProperties = stackItem => {\n  const obj = {}; // return JSON.stringify(res, null, 2);\n\n  stackItem[0].value.map(item => {\n    console.log(item);\n    const key = u.base642utf8(item.key.value);\n    let value = \"\";\n\n    if (key === \"owner\") {\n      value = base64ToAddress(item.value.value);\n    } else {\n      if (item.value.type === \"Integer\") {\n        value = item.value.value;\n      } else {\n        value = base64ToString(item.value.value);\n      }\n    }\n\n    obj[key] = value;\n  });\n  return obj;\n};","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/contracts/ftw/nft/helpers.ts"],"names":["u","base64ToAddress","base64ToString","parseProperties","stackItem","obj","value","map","item","console","log","key","base642utf8","type"],"mappings":"AAAA,SAASA,CAAT,QAAkB,uBAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,gBAAhD;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAIC,SAAD,IAAe;AAC5C,QAAMC,GAAG,GAAG,EAAZ,CAD4C,CAE5C;;AACAD,EAAAA,SAAS,CAAC,CAAD,CAAT,CAAaE,KAAb,CAAmBC,GAAnB,CAAwBC,IAAD,IAAU;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACC,UAAMG,GAAG,GAAGX,CAAC,CAACY,WAAF,CAAcJ,IAAI,CAACG,GAAL,CAASL,KAAvB,CAAZ;AACA,QAAIA,KAAK,GAAG,EAAZ;;AAEA,QAAIK,GAAG,KAAK,OAAZ,EAAqB;AACnBL,MAAAA,KAAK,GAAGL,eAAe,CAACO,IAAI,CAACF,KAAL,CAAWA,KAAZ,CAAvB;AACD,KAFD,MAEO;AACN,UAAGE,IAAI,CAACF,KAAL,CAAWO,IAAX,KAAoB,SAAvB,EAAiC;AAChCP,QAAAA,KAAK,GAAGE,IAAI,CAACF,KAAL,CAAWA,KAAnB;AACA,OAFD,MAEK;AACJA,QAAAA,KAAK,GAAGJ,cAAc,CAACM,IAAI,CAACF,KAAL,CAAWA,KAAZ,CAAtB;AACA;AACD;;AACDD,IAAAA,GAAG,CAACM,GAAD,CAAH,GAAWL,KAAX;AACD,GAfD;AAgBA,SAAOD,GAAP;AACD,CApBM","sourcesContent":["import { u } from \"@cityofzion/neon-core\";\nimport { base64ToAddress, base64ToString } from \"../../../utils\";\n\n/* Parse properties from rpc. */\nexport const parseProperties = (stackItem) => {\n  const obj = {};\n  // return JSON.stringify(res, null, 2);\n  stackItem[0].value.map((item) => {\n  \tconsole.log(item)\n    const key = u.base642utf8(item.key.value);\n    let value = \"\";\n\n    if (key === \"owner\") {\n      value = base64ToAddress(item.value.value);\n    } else {\n    \tif(item.value.type === \"Integer\"){\n\t\t    value = item.value.value;\n\t    }else{\n\t\t    value = base64ToString(item.value.value);\n\t    }\n    }\n    obj[key] = value;\n  });\n  return obj;\n};\n"]},"metadata":{},"sourceType":"module"}