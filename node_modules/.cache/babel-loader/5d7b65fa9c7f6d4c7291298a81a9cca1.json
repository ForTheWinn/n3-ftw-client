{"ast":null,"code":"var _jsxFileName = \"/Users/ed/Projects/n3-ftw/client/src/ui/pages/Gallery/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport PropertiesModal from \"./PropertiesModal\";\nimport toast from \"react-hot-toast\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { NFTContract } from \"../../../packages/neo/contracts\";\nimport DisplayRune from \"./DisplayRune\";\nimport DisplayRandomRune from \"../../components/DisplayRandomRune\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Gallery = props => {\n  _s();\n\n  const [tokens, setTokens] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [propertiesModalActive, setPropertiesModalActive] = useState();\n  const {\n    connectedWallet,\n    network,\n    addPendingTransaction\n  } = useWallet();\n\n  const onPropertiesModalActive = obj => {\n    if (connectedWallet) {\n      setPropertiesModalActive(obj);\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n\n  const onMint = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new NFTContract(network).mint(connectedWallet);\n        addPendingTransaction(res);\n      } catch (e) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  }; // const withdraw = async () => {\n  //   if (connectedWallet) {\n  //     try {\n  //       const res = await new NFTContract(network).withdrawFund(\n  //         connectedWallet\n  //       );\n  //       addPendingTransaction(res)\n  //     } catch (e: any) {\n  //       toast.error(e.message);\n  //     }\n  //   } else {\n  //     toast.error(\"Please connect wallet.\");\n  //   }\n  // };\n\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n\n      try {\n        const res = await new NFTContract(network).getTokens();\n        setTokens(res);\n      } catch (e) {\n        setError(e.message);\n      }\n    }\n\n    fetchContractStatus();\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"hero is-white\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"title\",\n            children: \"Forthewin Runes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"subtitle\",\n            children: \"FTW Rune is unique. Purely generated in the smart contract with random pixels and attributes.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onMint,\n            className: \"button is-primary\",\n            children: \"Mint: 10 GAS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexFlow: \"wrap\" // width: \"640px\",\n          // margin: \"0 auto\"\n\n        },\n        className: \"is-flex\",\n        children: [/*#__PURE__*/_jsxDEV(DisplayRandomRune, {\n          width: \"20%\",\n          height: \"20%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), tokens.map(tokenId => /*#__PURE__*/_jsxDEV(DisplayRune, {\n          width: \"20%\",\n          height: \"20%\",\n          tokenId: tokenId,\n          network: network,\n          onClick: onPropertiesModalActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), propertiesModalActive && /*#__PURE__*/_jsxDEV(PropertiesModal, {\n      properties: propertiesModalActive,\n      onClose: () => setPropertiesModalActive(undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Gallery, \"/6EwAzu6pd1ElNW8z4qXdyc+tPM=\", false, function () {\n  return [useWallet];\n});\n\n_c = Gallery;\nexport default Gallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/ui/pages/Gallery/index.tsx"],"names":["React","useEffect","useState","PageLayout","PropertiesModal","toast","useWallet","NFTContract","DisplayRune","DisplayRandomRune","Gallery","props","tokens","setTokens","error","setError","propertiesModalActive","setPropertiesModalActive","connectedWallet","network","addPendingTransaction","onPropertiesModalActive","obj","onMint","res","mint","e","message","fetchContractStatus","getTokens","flexFlow","map","tokenId","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport PropertiesModal from \"./PropertiesModal\";\nimport toast from \"react-hot-toast\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { NFTContract } from \"../../../packages/neo/contracts\";\nimport DisplayRune from \"./DisplayRune\";\nimport { IRuneMeta } from \"../../../packages/neo/contracts/ftw/nft/interfaces\";\nimport DisplayRandomRune from \"../../components/DisplayRandomRune\";\n\nconst Gallery = (props) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [error, setError] = useState(\"\");\n  const [propertiesModalActive, setPropertiesModalActive] =\n    useState<IRuneMeta>();\n  const { connectedWallet, network, addPendingTransaction } = useWallet();\n  const onPropertiesModalActive = (obj: IRuneMeta) => {\n    if (connectedWallet) {\n      setPropertiesModalActive(obj);\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n  const onMint = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new NFTContract(network).mint(connectedWallet);\n        addPendingTransaction(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n\n  // const withdraw = async () => {\n  //   if (connectedWallet) {\n  //     try {\n  //       const res = await new NFTContract(network).withdrawFund(\n  //         connectedWallet\n  //       );\n  //       addPendingTransaction(res)\n  //     } catch (e: any) {\n  //       toast.error(e.message);\n  //     }\n  //   } else {\n  //     toast.error(\"Please connect wallet.\");\n  //   }\n  // };\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      try {\n        const res = await new NFTContract(network).getTokens();\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet]);\n  return (\n    <>\n      <section className=\"hero is-white\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Forthewin Runes</h1>\n            <p className=\"subtitle\">\n              FTW Rune is unique. Purely generated in the smart contract with\n              random pixels and attributes.\n            </p>\n            <button onClick={onMint} className=\"button is-primary\">\n              Mint: 10 GAS\n            </button>\n          </div>\n        </div>\n      </section>\n      <PageLayout>\n        <div\n          style={{\n            flexFlow: \"wrap\",\n            // width: \"640px\",\n            // margin: \"0 auto\"\n          }}\n          className=\"is-flex\"\n        >\n          <DisplayRandomRune width=\"20%\" height=\"20%\" />\n          {tokens.map((tokenId) => (\n            <DisplayRune\n              width={\"20%\"}\n              height={\"20%\"}\n              tokenId={tokenId}\n              network={network}\n              onClick={onPropertiesModalActive}\n            />\n          ))}\n        </div>\n      </PageLayout>\n      {/*<button onClick={onMint} className=\"button is-black\">Mint</button>*/}\n      {propertiesModalActive && (\n        <PropertiesModal\n          properties={propertiesModalActive}\n          onClose={() => setPropertiesModalActive(undefined)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Gallery;\n"]},"metadata":{},"sourceType":"module"}