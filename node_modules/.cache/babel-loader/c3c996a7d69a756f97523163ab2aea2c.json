{"ast":null,"code":"var _jsxFileName = \"/Users/ed/Projects/n3-ftw/client/src/packages/provider/wallet-provider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport { LocalStorage } from \"../neo/local-storage\";\nimport { WalletAPI } from \"../neo/wallet\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext({});\nexport const WalletContextProvider = props => {\n  _s();\n\n  const [network] = useState(props.options.network);\n  const [isWalletModalActive, setWalletModalActive] = useState(false);\n  const [connectedWallet, setConnectedWallet] = useState(props.options.useLocalStorage ? LocalStorage.getWallet() : undefined);\n  const [invokeScript, setInvokeScript] = useState();\n  const [transactions, setTransactions] = useState(props.options.useLocalStorage ? LocalStorage.getTransactions() : []);\n\n  const openWalletModal = () => setWalletModalActive(true);\n\n  const closeWalletModal = () => setWalletModalActive(false);\n\n  const connectWallet = async walletType => {\n    try {\n      const connectedWallet = await new WalletAPI(walletType).init(network);\n      setConnectedWallet(connectedWallet);\n\n      if (props.options.useLocalStorage) {\n        LocalStorage.setWallet(connectedWallet);\n      }\n\n      setWalletModalActive(false);\n    } catch (e) {\n      console.error(e);\n      toast.error(`Failed to connect`);\n    }\n  };\n\n  const disConnectWallet = () => {\n    LocalStorage.removeWallet();\n    setConnectedWallet(undefined);\n  };\n\n  const doInvoke = invokeScript => {\n    if (isWalletModalActive) setWalletModalActive(false);\n    setInvokeScript(invokeScript);\n  };\n\n  const closeInvoke = () => setInvokeScript(undefined);\n\n  const contextValue = {\n    useDevWallet: props.options.useDevWallet,\n    network,\n    invokeScript,\n    list: WalletAPI.list,\n    connectedWallet,\n    isWalletModalActive,\n    openWalletModal,\n    closeWalletModal,\n    connectWallet,\n    disConnectWallet,\n    doInvoke,\n    closeInvoke,\n    transactions\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletContextProvider, \"IcyT7r2uJQG2nzar1Bj34Ru6oZU=\");\n\n_c = WalletContextProvider;\nexport const useWallet = () => {\n  _s2();\n\n  return useContext(WalletContext);\n};\n\n_s2(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletContextProvider\");","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/provider/wallet-provider.tsx"],"names":["React","createContext","useContext","useState","LocalStorage","WalletAPI","toast","WalletContext","WalletContextProvider","props","network","options","isWalletModalActive","setWalletModalActive","connectedWallet","setConnectedWallet","useLocalStorage","getWallet","undefined","invokeScript","setInvokeScript","transactions","setTransactions","getTransactions","openWalletModal","closeWalletModal","connectWallet","walletType","init","setWallet","e","console","error","disConnectWallet","removeWallet","doInvoke","closeInvoke","contextValue","useDevWallet","list","children","useWallet"],"mappings":"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","sourcesContent":["import { ContextOptions, IWalletStates } from \"./interfaces\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { IConnectedWallet, IWalletType } from \"../neo/wallet/interfaces\";\nimport { LocalStorage } from \"../neo/local-storage\";\nimport { sc } from \"@cityofzion/neon-core\";\nimport { WalletAPI } from \"../neo/wallet\";\nimport toast from \"react-hot-toast\";\n\nexport const WalletContext = createContext({} as IWalletStates);\nexport const WalletContextProvider = (props: {\n  options: ContextOptions;\n  children: any;\n}) => {\n  const [network] = useState(props.options.network);\n\n  const [isWalletModalActive, setWalletModalActive] = useState(false);\n\n  const [connectedWallet, setConnectedWallet] = useState<IConnectedWallet | undefined>(props.options.useLocalStorage ? LocalStorage.getWallet() : undefined);\n\n  const [invokeScript, setInvokeScript] = useState<sc.ContractCallJson | undefined>();\n\n  const [transactions, setTransactions] = useState(props.options.useLocalStorage ? LocalStorage.getTransactions() : []);\n\n  const openWalletModal = () => setWalletModalActive(true);\n\n  const closeWalletModal = () => setWalletModalActive(false);\n\n  const connectWallet = async (walletType: IWalletType) => {\n    try {\n      const connectedWallet = await new WalletAPI(walletType).init(network);\n      setConnectedWallet(connectedWallet);\n      if (props.options.useLocalStorage) {\n        LocalStorage.setWallet(connectedWallet);\n      }\n      setWalletModalActive(false);\n    } catch (e) {\n      console.error(e);\n      toast.error(`Failed to connect`);\n    }\n  };\n\n  const disConnectWallet = () => {\n    LocalStorage.removeWallet();\n    setConnectedWallet(undefined);\n  };\n\n  const doInvoke = (invokeScript: sc.ContractCallJson) => {\n    if (isWalletModalActive) setWalletModalActive(false);\n    setInvokeScript(invokeScript);\n  };\n\n  const closeInvoke = () => setInvokeScript(undefined);\n\n  const contextValue: IWalletStates = {\n    useDevWallet: props.options.useDevWallet,\n    network,\n    invokeScript,\n    list: WalletAPI.list,\n    connectedWallet,\n    isWalletModalActive,\n    openWalletModal,\n    closeWalletModal,\n    connectWallet,\n    disConnectWallet,\n    doInvoke,\n    closeInvoke,\n    transactions,\n  };\n\n  return (\n    <WalletContext.Provider value={contextValue}>\n      {props.children}\n    </WalletContext.Provider>\n  );\n};\nexport const useWallet = () => useContext(WalletContext);\n"]},"metadata":{},"sourceType":"module"}