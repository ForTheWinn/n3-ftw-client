{"ast":null,"code":"var _jsxFileName = \"/Users/ed/Projects/n3-ftw/client/src/packages/ui/PendingTransaction/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport { useWallet } from \"../../provider\";\nimport { LocalStorage } from \"../../neo/local-storage\";\nimport { Network } from \"../../neo/network\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PendingTransaction = props => {\n  _s();\n\n  const {\n    network\n  } = useWallet();\n  const [items, setItems] = useState([]);\n  const handleTransactionsChange = useCallback(event => {\n    const transactions = LocalStorage.getTransactions();\n    const pendingTransactions = transactions.filter(i => i.status === \"PENDING\");\n\n    if (pendingTransactions.length > 0) {\n      setItems(transactions);\n\n      for (const tx of transactions) {\n        pingFunc(tx);\n      }\n    }\n  }, []);\n\n  const pingFunc = tx => {\n    let retryNum = 0; // create interval as a named function\n\n    const getTx = async () => {\n      const res = await Network.getRawTx(tx.txid, network);\n      console.log(res); // if (res) {\n      //   // const _items = items.filter((item) => item.txid !== tx.txid);\n      //   // setItems(_items);\n      //   // LocalStorage.updatePendingTransaction(tx.txid);\n      //   // return false;\n      // }\n\n      retryNum++;\n\n      if (retryNum >= 10) {\n        return;\n      }\n\n      setTimeout(getTx, 10000);\n    }; // call interval\n\n\n    getTx();\n  };\n\n  useEffect(() => {\n    // handleTransactionsChange(() => {});\n    window.addEventListener(\"transactions\", handleTransactionsChange);\n    return () => {\n      window.removeEventListener(\"transactions\", handleTransactionsChange);\n    };\n  }, []);\n  console.log(items);\n  if (items.length === 0) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar-item pr-0\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        pointerEvents: \"none\"\n      },\n      className: \"is-center button is-outlined is-rounded is-small\",\n      children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n        loading: true,\n        size: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: `${items.length} Pending`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PendingTransaction, \"i9DRpFL2jIBXzYOlU3aqaV2Bq8E=\", false, function () {\n  return [useWallet];\n});\n\n_c = PendingTransaction;\nexport default PendingTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingTransaction\");","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/ui/PendingTransaction/index.tsx"],"names":["React","useCallback","useEffect","useState","ClipLoader","useWallet","LocalStorage","Network","PendingTransaction","props","network","items","setItems","handleTransactionsChange","event","transactions","getTransactions","pendingTransactions","filter","i","status","length","tx","pingFunc","retryNum","getTx","res","getRawTx","txid","console","log","setTimeout","window","addEventListener","removeEventListener","pointerEvents"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,OAAT,QAAwB,mBAAxB;;;;AAGA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAcL,SAAS,EAA7B;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAiB,EAAjB,CAAlC;AAEA,QAAMU,wBAAwB,GAAGZ,WAAW,CAAEa,KAAD,IAAW;AACtD,UAAMC,YAAY,GAAGT,YAAY,CAACU,eAAb,EAArB;AACA,UAAMC,mBAAmB,GAAGF,YAAY,CAACG,MAAb,CACzBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAa,SADM,CAA5B;;AAGA,QAAIH,mBAAmB,CAACI,MAApB,GAA6B,CAAjC,EAAoC;AAClCT,MAAAA,QAAQ,CAACG,YAAD,CAAR;;AACA,WAAK,MAAMO,EAAX,IAAiBP,YAAjB,EAA+B;AAC7BQ,QAAAA,QAAQ,CAACD,EAAD,CAAR;AACD;AACF;AACF,GAX2C,EAWzC,EAXyC,CAA5C;;AAaA,QAAMC,QAAQ,GAAID,EAAD,IAAQ;AACvB,QAAIE,QAAQ,GAAG,CAAf,CADuB,CAEvB;;AACA,UAAMC,KAAK,GAAG,YAAY;AACxB,YAAMC,GAAG,GAAG,MAAMnB,OAAO,CAACoB,QAAR,CAAiBL,EAAE,CAACM,IAApB,EAA0BlB,OAA1B,CAAlB;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAFwB,CAGxB;AACA;AACA;AACA;AACA;AACA;;AACAF,MAAAA,QAAQ;;AACR,UAAIA,QAAQ,IAAI,EAAhB,EAAoB;AAClB;AACD;;AACDO,MAAAA,UAAU,CAACN,KAAD,EAAQ,KAAR,CAAV;AACD,KAdD,CAHuB,CAkBvB;;;AACAA,IAAAA,KAAK;AACN,GApBD;;AAsBAvB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA8B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCpB,wBAAxC;AACA,WAAO,MAAM;AACXmB,MAAAA,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CrB,wBAA3C;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAOAgB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACA,MAAIA,KAAK,CAACU,MAAN,KAAiB,CAArB,EAAwB,oBAAO,qCAAP;AACxB,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AAAEc,QAAAA,aAAa,EAAE;AAAjB,OADT;AAEE,MAAA,SAAS,EAAC,kDAFZ;AAAA,8BAIE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAE,IAArB;AAA2B,QAAA,IAAI,EAAE;AAAjC;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA,kBAAyB,GAAExB,KAAK,CAACU,MAAO;AAAxC;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3DD;;GAAMb,kB;UACgBH,S;;;KADhBG,kB;AA6DN,eAAeA,kBAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport { useWallet } from \"../../provider\";\nimport { LocalStorage } from \"../../neo/local-storage\";\nimport { Network } from \"../../neo/network\";\nimport { ITransaction } from \"../../neo/wallet/interfaces\";\n\nconst PendingTransaction = (props) => {\n  const { network } = useWallet();\n  const [items, setItems] = useState<ITransaction[]>([]);\n\n  const handleTransactionsChange = useCallback((event) => {\n    const transactions = LocalStorage.getTransactions();\n    const pendingTransactions = transactions.filter(\n      (i) => i.status === \"PENDING\"\n    );\n    if (pendingTransactions.length > 0) {\n      setItems(transactions);\n      for (const tx of transactions) {\n        pingFunc(tx);\n      }\n    }\n  }, []);\n\n  const pingFunc = (tx) => {\n    let retryNum = 0;\n    // create interval as a named function\n    const getTx = async () => {\n      const res = await Network.getRawTx(tx.txid, network);\n      console.log(res);\n      // if (res) {\n      //   // const _items = items.filter((item) => item.txid !== tx.txid);\n      //   // setItems(_items);\n      //   // LocalStorage.updatePendingTransaction(tx.txid);\n      //   // return false;\n      // }\n      retryNum++;\n      if (retryNum >= 10) {\n        return;\n      }\n      setTimeout(getTx, 10000);\n    };\n    // call interval\n    getTx();\n  };\n\n  useEffect(() => {\n    // handleTransactionsChange(() => {});\n    window.addEventListener(\"transactions\", handleTransactionsChange);\n    return () => {\n      window.removeEventListener(\"transactions\", handleTransactionsChange);\n    };\n  }, []);\n  console.log(items);\n  if (items.length === 0) return <></>;\n  return (\n    <div className=\"navbar-item pr-0\">\n      <div\n        style={{ pointerEvents: \"none\" }}\n        className=\"is-center button is-outlined is-rounded is-small\"\n      >\n        <ClipLoader loading={true} size={15} />\n        <span className=\"ml-2\">{`${items.length} Pending`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default PendingTransaction;\n"]},"metadata":{},"sourceType":"module"}