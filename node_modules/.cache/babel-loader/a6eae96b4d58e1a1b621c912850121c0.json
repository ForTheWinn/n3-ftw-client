{"ast":null,"code":"import { Network } from \"../../../network\";\nimport { wallet } from \"../../../index\";\nimport { NEO_SCRIPT_HASH } from \"../../../consts\";\nimport { FARM_SCRIPT_HASH } from \"./consts\";\nimport { parseClaimPaginate, parseDeposit, parseSnapshotPaginate } from \"./helpers\";\nexport class FarmContract {\n  constructor(networkType) {\n    this.network = void 0;\n    this.contractHash = void 0;\n\n    this.deposit = async (connectedWallet, amount, position) => {\n      console.log(connectedWallet.account.address);\n      const invokeScript = {\n        operation: \"transfer\",\n        scriptHash: NEO_SCRIPT_HASH,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }, {\n          type: \"Hash160\",\n          value: this.contractHash\n        }, {\n          type: \"Integer\",\n          value: amount\n        }, {\n          type: \"String\",\n          value: position\n        }]\n      };\n      return await new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.remove = async connectedWallet => {\n      const invokeScript = {\n        operation: \"removeFund\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }]\n      };\n      return await new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.createSnapshot = async connectedWallet => {\n      const invokeScript = {\n        operation: \"createSnapshot\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      return await new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.claim = async connectedWallet => {\n      console.log(this.contractHash);\n      const invokeScript = {\n        operation: \"claim\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Address\",\n          value: connectedWallet.account.address\n        }]\n      };\n      return await new wallet.WalletAPI(connectedWallet.key).invoke(this.network, connectedWallet.account.address, invokeScript);\n    };\n\n    this.getCurrentActivityHeight = async () => {\n      const getHeight = {\n        operation: \"getActivityHeight\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const res = await Network.read(this.network, [getHeight]); // @ts-ignore\n\n      return res.stack[0].value;\n    };\n\n    this.getStatus = async connectedWallet => {\n      const neoBalance = {\n        operation: \"balanceOf\",\n        scriptHash: NEO_SCRIPT_HASH,\n        args: [{\n          type: \"Hash160\",\n          value: this.contractHash\n        }]\n      };\n      const timeLeft = {\n        operation: \"timeLeft\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const snapshots = {\n        operation: \"getSnapshots\",\n        scriptHash: this.contractHash,\n        args: [{\n          type: \"Integer\",\n          value: 1\n        }]\n      };\n      const interval = {\n        operation: \"getSnapshotInterval\",\n        scriptHash: this.contractHash,\n        args: []\n      };\n      const scripts = [neoBalance, timeLeft, interval, snapshots];\n\n      if (connectedWallet) {\n        const deposit = {\n          operation: \"getDeposit\",\n          scriptHash: this.contractHash,\n          args: [{\n            type: \"Address\",\n            value: connectedWallet.account.address\n          }]\n        };\n        const claims = {\n          operation: \"getClaims\",\n          scriptHash: this.contractHash,\n          args: [{\n            // @ts-ignore\n            type: \"Address\",\n            // @ts-ignore\n            value: connectedWallet.account.address\n          }, {\n            type: \"Integer\",\n            value: 1\n          }]\n        };\n        scripts.push(deposit);\n        scripts.push(claims);\n      }\n\n      const res = await Network.read(this.network, scripts);\n      console.log(res);\n      return {\n        neoBalance: res.stack[0].value,\n        timeLeft: res.stack[1].value,\n        interval: res.stack[2].value,\n        snapshots: parseSnapshotPaginate(res.stack[3].value),\n        deposit: connectedWallet && res.stack[4].value ? parseDeposit(res.stack[4].value) : undefined,\n        claims: connectedWallet && res.stack[5].value ? parseClaimPaginate(res.stack[5].value) : undefined\n      };\n    };\n\n    this.network = networkType;\n    this.contractHash = FARM_SCRIPT_HASH[networkType];\n  }\n  /**\n   * Listing NFT to sell\n   */\n\n\n}","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/contracts/ftw/farm/index.ts"],"names":["Network","wallet","NEO_SCRIPT_HASH","FARM_SCRIPT_HASH","parseClaimPaginate","parseDeposit","parseSnapshotPaginate","FarmContract","constructor","networkType","network","contractHash","deposit","connectedWallet","amount","position","console","log","account","address","invokeScript","operation","scriptHash","args","type","value","WalletAPI","key","invoke","remove","createSnapshot","claim","getCurrentActivityHeight","getHeight","res","read","stack","getStatus","neoBalance","timeLeft","snapshots","interval","scripts","claims","push","undefined"],"mappings":"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","sourcesContent":["import { INetworkType, Network } from \"../../../network\";\nimport { IConnectedWallet } from \"../../../wallet/interfaces\";\nimport { wallet } from \"../../../index\";\nimport { NEO_SCRIPT_HASH } from \"../../../consts\";\nimport { InvokeResult } from \"@cityofzion/neon-core/lib/rpc/Query\";\nimport { FARM_SCRIPT_HASH } from \"./consts\";\nimport { IFarmContractStatus } from \"./interfaces\";\nimport { parseClaim, parseClaimPaginate, parseDeposit, parseSnapshotPaginate } from \"./helpers\";\nimport { u } from \"@cityofzion/neon-core\";\n\nexport class FarmContract {\n  network: INetworkType;\n  contractHash: string;\n\n  constructor(networkType: INetworkType) {\n    this.network = networkType;\n    this.contractHash = FARM_SCRIPT_HASH[networkType];\n  }\n\n  /**\n   * Listing NFT to sell\n   */\n  deposit = async (\n    connectedWallet: IConnectedWallet,\n    amount: string,\n    position: string\n  ): Promise<string> => {\n    console.log(connectedWallet.account.address);\n    const invokeScript = {\n      operation: \"transfer\",\n      scriptHash: NEO_SCRIPT_HASH,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n        {\n          type: \"Hash160\",\n          value: this.contractHash,\n        },\n        {\n          type: \"Integer\",\n          value: amount,\n        },\n        {\n          type: \"String\",\n          value: position,\n        },\n      ],\n    };\n    return await new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  remove = async (connectedWallet: IConnectedWallet): Promise<string> => {\n    const invokeScript = {\n      operation: \"removeFund\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n      ],\n    };\n    return await new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  createSnapshot = async (\n    connectedWallet: IConnectedWallet,\n  ): Promise<string> => {\n    const invokeScript = {\n      operation: \"createSnapshot\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n    return await new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  claim = async (connectedWallet: IConnectedWallet): Promise<string> => {\n    console.log(this.contractHash)\n    const invokeScript = {\n      operation: \"claim\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Address\",\n          value: connectedWallet.account.address,\n        },\n      ],\n    };\n    return await new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      connectedWallet.account.address,\n      invokeScript\n    );\n  };\n\n  getCurrentActivityHeight = async (): Promise<string> => {\n    const getHeight = {\n      operation: \"getActivityHeight\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const res: InvokeResult = await Network.read(this.network, [getHeight]);\n    // @ts-ignore\n    return res.stack[0].value;\n  };\n\n  getStatus = async (\n    connectedWallet?: IConnectedWallet\n  ): Promise<IFarmContractStatus> => {\n    const neoBalance = {\n      operation: \"balanceOf\",\n      scriptHash: NEO_SCRIPT_HASH,\n      args: [\n        {\n          type: \"Hash160\",\n          value: this.contractHash,\n        },\n      ],\n    };\n    const timeLeft = {\n      operation: \"timeLeft\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const snapshots = {\n      operation: \"getSnapshots\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Integer\",\n          value: 1,\n        },\n      ],\n    };\n\n    const interval = {\n      operation: \"getSnapshotInterval\",\n      scriptHash: this.contractHash,\n      args: [],\n    };\n\n    const scripts = [neoBalance, timeLeft, interval, snapshots];\n\n    if (connectedWallet) {\n      const deposit = {\n        operation: \"getDeposit\",\n        scriptHash: this.contractHash,\n        args: [\n          {\n            type: \"Address\",\n            value: connectedWallet.account.address,\n          },\n        ],\n      };\n      const claims = {\n        operation: \"getClaims\",\n        scriptHash: this.contractHash,\n        args: [\n          {\n            // @ts-ignore\n            type: \"Address\",\n            // @ts-ignore\n            value: connectedWallet.account.address,\n          },\n          {\n            type: \"Integer\",\n            value: 1,\n          },\n        ],\n      };\n      scripts.push(deposit)\n      scripts.push(claims)\n    }\n\n    const res = await Network.read(this.network, scripts);\n    console.log(res);\n    return {\n      neoBalance: res.stack[0].value as string,\n      timeLeft: res.stack[1].value as string,\n      interval: res.stack[2].value as string,\n      snapshots: parseSnapshotPaginate(res.stack[3].value),\n      deposit: connectedWallet && res.stack[4].value ? parseDeposit(res.stack[4].value) : undefined,\n      claims: connectedWallet && res.stack[5].value ? parseClaimPaginate(res.stack[5].value) : undefined,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}