{"ast":null,"code":"import neo3Dapi from \"neo3-dapi\";\nimport { DEV, NEO_LINE, O3, TOKEN_LIST, WALLET_LIST } from \"../consts\";\nimport { DevWallet } from \"./dev-wallet\";\nimport { tx, wallet as NeonWallet } from \"@cityofzion/neon-core\";\nimport { LocalStorage } from \"../local-storage\";\nimport moment from \"moment\";\nexport class WalletAPI {\n  constructor(_walletType) {\n    this.walletType = void 0;\n\n    this.getInstance = async walletType => {\n      let instance;\n\n      switch (walletType) {\n        case O3:\n          instance = neo3Dapi;\n          break;\n\n        case NEO_LINE:\n          // @ts-ignore\n          instance = new NEOLineN3.Init();\n          break;\n\n        case DEV:\n          instance = DevWallet;\n          break;\n\n        default:\n          throw new Error(\"No support wallet!\");\n      }\n\n      return instance;\n    };\n\n    this.init = async defaultNetwork => {\n      try {\n        const wallet = await this.getInstance(this.walletType);\n        let network;\n        let balances;\n        /* Temporary hard coding because of neoline */\n\n        if (this.walletType === NEO_LINE) {\n          // @ts-ignore\n          const neoline = new NEOLine.Init();\n          network = await neoline.getNetworks();\n        } else if (this.walletType === DEV) {\n          network = await wallet.getNetworks(defaultNetwork);\n        }\n\n        const provider = await wallet.getProvider();\n        const account = await wallet.getAccount();\n\n        if (this.walletType === DEV) {\n          balances = await wallet.getBalance(defaultNetwork);\n        } else {\n          const res = await wallet.getBalance({\n            params: {\n              address: account.address,\n              contracts: TOKEN_LIST(network.defaultNetwork)\n            }\n          });\n          balances = res[account.address]; // console.log(res)\n        }\n\n        return {\n          key: this.walletType,\n          provider,\n          account,\n          network,\n          balances\n        };\n      } catch (e) {\n        throw e;\n      }\n    };\n\n    this.invoke = async (network, senderAddress, invokeScript) => {\n      const wallet = await this.getInstance(this.walletType);\n      let res;\n\n      if (this.walletType === DEV) {\n        res = await wallet.invoke(network, invokeScript);\n      } else {\n        // @ts-ignore\n        invokeScript.signers = [{\n          account: NeonWallet.getScriptHashFromAddress(senderAddress),\n          scopes: tx.WitnessScope.CalledByEntry\n        }];\n        res = await wallet.invoke(invokeScript);\n      }\n\n      const submittedTx = {\n        network,\n        wallet: this.walletType,\n        status: \"PENDING\",\n        txid: res.txid,\n        contractHash: invokeScript.scriptHash,\n        method: invokeScript.operation,\n        args: invokeScript.args,\n        createdAt: moment().format(\"MMMM Do YYYY, h:mm:ss a\")\n      };\n      LocalStorage.addTransaction(submittedTx);\n      return res.txid;\n    };\n\n    this.walletType = _walletType;\n  }\n\n}\nWalletAPI.list = WALLET_LIST;","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/neo/wallet/index.ts"],"names":["neo3Dapi","DEV","NEO_LINE","O3","TOKEN_LIST","WALLET_LIST","DevWallet","tx","wallet","NeonWallet","LocalStorage","moment","WalletAPI","constructor","walletType","getInstance","instance","NEOLineN3","Init","Error","init","defaultNetwork","network","balances","neoline","NEOLine","getNetworks","provider","getProvider","account","getAccount","getBalance","res","params","address","contracts","key","e","invoke","senderAddress","invokeScript","signers","getScriptHashFromAddress","scopes","WitnessScope","CalledByEntry","submittedTx","status","txid","contractHash","scriptHash","method","operation","args","createdAt","format","addTransaction","list"],"mappings":"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","sourcesContent":["import neo3Dapi from \"neo3-dapi\";\nimport { IConnectedWallet, ITransaction, IWalletType } from \"./interfaces\";\nimport { DEV, NEO_LINE, O3, TOKEN_LIST, WALLET_LIST } from \"../consts\";\nimport { DevWallet } from \"./dev-wallet\";\nimport { sc, tx, wallet as NeonWallet } from \"@cityofzion/neon-core\";\nimport { INetworkType } from \"../network\";\nimport { LocalStorage } from \"../local-storage\";\nimport moment from \"moment\";\n\nexport class WalletAPI {\n  walletType: IWalletType;\n\n  constructor(walletType: IWalletType) {\n    this.walletType = walletType;\n  }\n\n  static list = WALLET_LIST;\n\n  private getInstance = async (walletType: IWalletType): Promise<any> => {\n    let instance: any;\n    switch (walletType) {\n      case O3:\n        instance = neo3Dapi;\n        break;\n      case NEO_LINE:\n        // @ts-ignore\n        instance = new NEOLineN3.Init();\n        break;\n      case DEV:\n        instance = DevWallet;\n        break;\n      default:\n        throw new Error(\"No support wallet!\");\n    }\n    return instance;\n  };\n\n  /**\n   * TODO: Remove dev wallet when 3rd party has privatenet support\n   * @param defaultNetwork\n   */\n  init = async (defaultNetwork: INetworkType): Promise<IConnectedWallet> => {\n    try {\n      const wallet = await this.getInstance(this.walletType);\n      let network;\n      let balances;\n      /* Temporary hard coding because of neoline */\n      if (this.walletType === NEO_LINE) {\n        // @ts-ignore\n        const neoline = new NEOLine.Init();\n        network = await neoline.getNetworks();\n      } else if (this.walletType === DEV) {\n        network = await wallet.getNetworks(defaultNetwork);\n      }\n\n      const provider = await wallet.getProvider();\n      const account = await wallet.getAccount();\n\n      if (this.walletType === DEV) {\n        balances = await wallet.getBalance(defaultNetwork);\n      } else {\n        const res = await wallet.getBalance({\n          params: {\n            address: account.address,\n            contracts: TOKEN_LIST(network.defaultNetwork),\n          },\n        });\n        balances = res[account.address];\n        // console.log(res)\n      }\n      return {\n        key: this.walletType,\n        provider,\n        account,\n        network,\n        balances,\n      };\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  /* Control signing and send transaction. TODO:Need to improve type hardcoding later */\n  invoke = async (\n    network: INetworkType,\n    senderAddress: string,\n    invokeScript: sc.ContractCallJson\n  ): Promise<string> => {\n    const wallet = await this.getInstance(this.walletType);\n    let res;\n    if (this.walletType === DEV) {\n      res = await wallet.invoke(network, invokeScript);\n    } else {\n      // @ts-ignore\n      invokeScript.signers = [\n        {\n          account: NeonWallet.getScriptHashFromAddress(senderAddress),\n          scopes: tx.WitnessScope.CalledByEntry,\n        },\n      ];\n      res = await wallet.invoke(invokeScript);\n    }\n    const submittedTx: ITransaction = {\n      network,\n      wallet: this.walletType,\n      status: \"PENDING\",\n      txid: res.txid,\n      contractHash: invokeScript.scriptHash,\n      method: invokeScript.operation,\n      args: invokeScript.args,\n      createdAt: moment().format(\"MMMM Do YYYY, h:mm:ss a\"),\n    };\n    LocalStorage.addTransaction(submittedTx);\n    return res.txid;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}