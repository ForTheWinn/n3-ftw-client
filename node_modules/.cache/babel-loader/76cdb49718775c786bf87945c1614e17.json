{"ast":null,"code":"var _jsxFileName = \"/Users/ed/Projects/n3-ftw/client/src/packages/ui/PendingTransaction/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { useWallet } from \"../../provider\";\nimport { LocalStorage } from \"../../neo/local-storage\";\nimport { Network } from \"../../neo/network\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PendingTransaction = props => {\n  _s();\n\n  const {\n    network\n  } = useWallet();\n  const [items, setItems] = useState([]);\n  const handleTransactionsChange = useCallback(event => {\n    let transactions = LocalStorage.getTransactions();\n    transactions = transactions.filter(i => i.status === \"PENDING\");\n\n    if (transactions.length > 0) {\n      setItems(transactions);\n\n      for (const tx of transactions) {\n        pingFunc(tx);\n      }\n    }\n  }, []);\n\n  const pingFunc = tx => {\n    let retryNum = 0; // create interval as a named function\n\n    const interval = async () => {\n      let intervalCall = await Network.getNotificationsFromTxId(tx.txid, network);\n\n      if (intervalCall) {\n        const _items = items.filter(item => item.txid !== tx.txid);\n\n        setItems(_items);\n        LocalStorage.updatePendingTransaction(tx.txid);\n        return false;\n      }\n\n      retryNum++;\n\n      if (retryNum >= 10) {\n        return;\n      }\n\n      setTimeout(interval, 10000);\n    }; // call interval\n\n\n    interval();\n  };\n\n  useEffect(() => {\n    console.log(\"pending\");\n    handleTransactionsChange(() => {});\n    window.addEventListener(\"transactions\", handleTransactionsChange);\n    return () => {\n      window.removeEventListener(\"transactions\", handleTransactionsChange);\n    };\n  }, []);\n  if (items.length === 0) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navbar-item pr-0\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        pointerEvents: \"none\"\n      },\n      className: \"is-center button is-outlined is-rounded is-small\",\n      children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n        loading: true,\n        size: 15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: `${items.length} Pending`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PendingTransaction, \"i9DRpFL2jIBXzYOlU3aqaV2Bq8E=\", false, function () {\n  return [useWallet];\n});\n\n_c = PendingTransaction;\nexport default PendingTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"PendingTransaction\");","map":{"version":3,"sources":["/Users/ed/Projects/n3-ftw/client/src/packages/ui/PendingTransaction/index.tsx"],"names":["React","useCallback","useEffect","useState","ClipLoader","useWallet","LocalStorage","Network","PendingTransaction","props","network","items","setItems","handleTransactionsChange","event","transactions","getTransactions","filter","i","status","length","tx","pingFunc","retryNum","interval","intervalCall","getNotificationsFromTxId","txid","_items","item","updatePendingTransaction","setTimeout","console","log","window","addEventListener","removeEventListener","pointerEvents"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { useWallet } from \"../../provider\";\nimport { LocalStorage } from \"../../neo/local-storage\";\nimport { Network } from \"../../neo/network\";\nimport { ITransaction } from \"../../neo/wallet/interfaces\";\n\nconst PendingTransaction = (props) => {\n  const { network } = useWallet();\n  const [items, setItems] = useState<ITransaction[]>([]);\n  const handleTransactionsChange = useCallback((event) => {\n    let transactions = LocalStorage.getTransactions();\n    transactions = transactions.filter((i) => i.status === \"PENDING\");\n    if (transactions.length > 0) {\n      setItems(transactions);\n      for (const tx of transactions) {\n        pingFunc(tx);\n      }\n    }\n  }, []);\n\n  const pingFunc = (tx) => {\n    let retryNum = 0;\n\n    // create interval as a named function\n    const interval = async () => {\n      let intervalCall = await Network.getNotificationsFromTxId(\n        tx.txid,\n        network\n      );\n      if (intervalCall) {\n        const _items = items.filter((item) => item.txid !== tx.txid);\n        setItems(_items);\n        LocalStorage.updatePendingTransaction(tx.txid);\n        return false;\n      }\n\n      retryNum++;\n\n      if (retryNum >= 10) {\n        return;\n      }\n\n      setTimeout(interval, 10000);\n    };\n    // call interval\n    interval();\n  };\n\n  useEffect(() => {\n    console.log(\"pending\");\n    handleTransactionsChange(() => {});\n    window.addEventListener(\"transactions\", handleTransactionsChange);\n    return () => {\n      window.removeEventListener(\"transactions\", handleTransactionsChange);\n    };\n  }, []);\n  if (items.length === 0) return <></>;\n  return (\n    <div className=\"navbar-item pr-0\">\n      <div\n        style={{ pointerEvents: \"none\" }}\n        className=\"is-center button is-outlined is-rounded is-small\"\n      >\n        <ClipLoader loading={true} size={15} />\n        <span className=\"ml-2\">{`${items.length} Pending`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default PendingTransaction;\n"]},"metadata":{},"sourceType":"module"}