[{"/Users/ed/Projects/FTW/client/src/index.tsx":"1","/Users/ed/Projects/FTW/client/src/reportWebVitals.ts":"2","/Users/ed/Projects/FTW/client/src/common/hooks/use-app.tsx":"3","/Users/ed/Projects/FTW/client/src/ui/index.tsx":"4","/Users/ed/Projects/FTW/client/src/ui/components/Header.tsx":"5","/Users/ed/Projects/FTW/client/src/ui/components/MobileMenuSlider.tsx":"6","/Users/ed/Projects/FTW/client/src/ui/components/WalletSidebar.tsx":"7","/Users/ed/Projects/FTW/client/src/ui/pages/Home.tsx":"8","/Users/ed/Projects/FTW/client/src/consts/index.ts":"9","/Users/ed/Projects/FTW/client/src/packages/provider/index.ts":"10","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/index.tsx":"11","/Users/ed/Projects/FTW/client/src/ui/pages/MyCollection/index.tsx":"12","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/index.tsx":"13","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/index.tsx":"14","/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/index.tsx":"15","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/helpers.ts":"16","/Users/ed/Projects/FTW/client/src/ui/components/Logo.tsx":"17","/Users/ed/Projects/FTW/client/src/ui/components/WalletDropdown.tsx":"18","/Users/ed/Projects/FTW/client/src/ui/components/NetworkSwitch.tsx":"19","/Users/ed/Projects/FTW/client/src/ui/components/SidebarNav.tsx":"20","/Users/ed/Projects/FTW/client/src/ui/components/PageLayout.tsx":"21","/Users/ed/Projects/FTW/client/src/consts/pageRoutes.ts":"22","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/pageRoutes.ts":"23","/Users/ed/Projects/FTW/client/src/packages/neo/index.ts":"24","/Users/ed/Projects/FTW/client/src/packages/provider/wallet-provider.tsx":"25","/Users/ed/Projects/FTW/client/src/ui/components/NotifyError.tsx":"26","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotList.tsx":"27","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/ActionModal.tsx":"28","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/About.tsx":"29","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/Pool.tsx":"30","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/ClaimModal.tsx":"31","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/PositionModal.tsx":"32","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/CancelModal.tsx":"33","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/Claims.tsx":"34","/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/PropertiesModal.tsx":"35","/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/Banner.tsx":"36","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/index.tsx":"37","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/consts.ts":"38","/Users/ed/Projects/FTW/client/src/packages/ui/PendingTransaction/index.tsx":"39","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/index.ts":"40","/Users/ed/Projects/FTW/client/src/packages/neo/consts/index.ts":"41","/Users/ed/Projects/FTW/client/src/packages/neo/api/index.ts":"42","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/index.ts":"43","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Home/index.tsx":"44","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/index.tsx":"45","/Users/ed/Projects/FTW/client/src/ui/components/Modal.tsx":"46","/Users/ed/Projects/FTW/client/src/ui/components/TransactionSubmitted.tsx":"47","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotCard.tsx":"48","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotCountdown.tsx":"49","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/WalletList.tsx":"50","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/MyPosition.tsx":"51","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/Runes.tsx":"52","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/WalletDropdown.tsx":"53","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/AssetCard.tsx":"54","/Users/ed/Projects/FTW/client/src/packages/neo/network/index.ts":"55","/Users/ed/Projects/FTW/client/src/packages/neo/api/rest.ts":"56","/Users/ed/Projects/FTW/client/src/packages/neo/wallet/index.ts":"57","/Users/ed/Projects/FTW/client/src/packages/neo/utils/index.ts":"58","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/helpers.ts":"59","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/consts.ts":"60","/Users/ed/Projects/FTW/client/src/packages/neo/local-storage/index.ts":"61","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Banner.tsx":"62","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/index.ts":"63","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/index.ts":"64","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nep17/index.ts":"65","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/bank/index.ts":"66","/Users/ed/Projects/FTW/client/src/packages/neo/api/consts.ts":"67","/Users/ed/Projects/FTW/client/src/packages/neo/wallet/dev-wallet.ts":"68","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/consts.ts":"69","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/helpers.ts":"70","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/helpers.ts":"71","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/index.tsx":"72","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/index.tsx":"73","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/Replay.tsx":"74","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/PlayerModal.tsx":"75","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/NFTListModal.tsx":"76","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/index.ts":"77","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/TournamentTree.tsx":"78","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/consts.ts":"79","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/helpers.ts":"80","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/helpers.ts":"81","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/ArenaRegisterButton.tsx":"82","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/PlayButton.tsx":"83","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/NFTDetailModal.tsx":"84","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/HistoryTable.tsx":"85","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/DisplayRuneWithProperties.tsx":"86","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/ClaimButton.tsx":"87","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/Banner.tsx":"88","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP17/index.tsx":"89","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP17/ContractCard.tsx":"90","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP17FormModal.tsx":"91","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP11FormModal.tsx":"92","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/index.tsx":"93","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/ContractCard.tsx":"94","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP11MintFormModal.tsx":"95","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/Tokens.tsx":"96","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/DisplayNFT.tsx":"97","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/LeaveButton.tsx":"98","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/BetButton.tsx":"99","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/helpers.ts":"100","/Users/ed/Projects/FTW/client/src/packages/ui/AfterTransactionSubmitted/index.tsx":"101","/Users/ed/Projects/FTW/client/src/packages/ui/AfterTransactionSubmitted/RuneLoading.tsx":"102","/Users/ed/Projects/FTW/client/src/ui/components/RandomRune.tsx":"103","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/CheckMark.tsx":"104","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/index.tsx":"105","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/NavSwitch/index.tsx":"106","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/Input/index.tsx":"107","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Swap/index.tsx":"108","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Liquidity/index.tsx":"109","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/index.ts":"110","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/consts.ts":"111","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/AssetListModal/index.tsx":"112","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/helpers.ts":"113","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/index.tsx":"114","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/Detail/index.tsx":"115","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/index.tsx":"116","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/FusionBox.tsx":"117","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/RuneListModal.tsx":"118","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/CryptonatuListModal.tsx":"119","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/index.ts":"120","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/helpers.ts":"121","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/consts.ts":"122","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/fuse/index.ts":"123","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/FusedList.tsx":"124","/Users/ed/Projects/FTW/client/src/ui/pages/Migration/index.tsx":"125","/Users/ed/Projects/FTW/client/src/ui/components/ReactGa.tsx":"126","/Users/ed/Projects/FTW/client/src/ui/components/BgContainer.tsx":"127","/Users/ed/Projects/FTW/client/src/ui/components/NetworkSwitch2.tsx":"128","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/History/index.tsx":"129","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/List/index.tsx":"130","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/index.tsx":"131","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/NavSwitch/index.tsx":"132","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Swap/index.tsx":"133","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/Input/index.tsx":"134","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/AssetListModal/index.tsx":"135","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Register/index.tsx":"136","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Register/Form.tsx":"137","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/index.ts":"138","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/consts.ts":"139","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/helpers.ts":"140","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Pools/index.tsx":"141","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/PairSelect/index.tsx":"142","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/CreatePool/index.tsx":"143","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/PoolCard/index.tsx":"144"},{"size":624,"mtime":1633734969020,"results":"145","hashOfConfig":"146"},{"size":425,"mtime":1633497407848,"results":"147","hashOfConfig":"146"},{"size":1309,"mtime":1639724016473,"results":"148","hashOfConfig":"146"},{"size":2050,"mtime":1645595765901,"results":"149","hashOfConfig":"146"},{"size":6444,"mtime":1646674571204,"results":"150","hashOfConfig":"146"},{"size":489,"mtime":1639037096055,"results":"151","hashOfConfig":"146"},{"size":672,"mtime":1637900932333,"results":"152","hashOfConfig":"146"},{"size":4470,"mtime":1646210142877,"results":"153","hashOfConfig":"146"},{"size":31,"mtime":1641402851228,"results":"154","hashOfConfig":"146"},{"size":35,"mtime":1640877217380,"results":"155","hashOfConfig":"146"},{"size":4655,"mtime":1639300594240,"results":"156","hashOfConfig":"146"},{"size":2862,"mtime":1640586517923,"results":"157","hashOfConfig":"146"},{"size":3631,"mtime":1647248289505,"results":"158","hashOfConfig":"146"},{"size":741,"mtime":1645593719515,"results":"159","hashOfConfig":"146"},{"size":3798,"mtime":1646720765895,"results":"160","hashOfConfig":"146"},{"size":406,"mtime":1644083513220,"results":"161","hashOfConfig":"146"},{"size":295,"mtime":1644083513207,"results":"162","hashOfConfig":"146"},{"size":3971,"mtime":1639030825785,"results":"163","hashOfConfig":"146"},{"size":1702,"mtime":1641572979485,"results":"164","hashOfConfig":"146"},{"size":2844,"mtime":1646208319002,"results":"165","hashOfConfig":"146"},{"size":212,"mtime":1641119287691,"results":"166","hashOfConfig":"146"},{"size":1718,"mtime":1648936835387,"results":"167","hashOfConfig":"146"},{"size":109,"mtime":1640766614677,"results":"168","hashOfConfig":"146"},{"size":239,"mtime":1637559785941,"results":"169","hashOfConfig":"146"},{"size":3298,"mtime":1645002063435,"results":"170","hashOfConfig":"146"},{"size":268,"mtime":1637559785958,"results":"171","hashOfConfig":"146"},{"size":1693,"mtime":1639300331838,"results":"172","hashOfConfig":"146"},{"size":3082,"mtime":1637891429918,"results":"173","hashOfConfig":"146"},{"size":869,"mtime":1639300841404,"results":"174","hashOfConfig":"146"},{"size":1465,"mtime":1639300292984,"results":"175","hashOfConfig":"146"},{"size":1220,"mtime":1637894305513,"results":"176","hashOfConfig":"146"},{"size":2300,"mtime":1639302927524,"results":"177","hashOfConfig":"146"},{"size":1287,"mtime":1638165273098,"results":"178","hashOfConfig":"146"},{"size":1944,"mtime":1639300331832,"results":"179","hashOfConfig":"146"},{"size":1592,"mtime":1640583336741,"results":"180","hashOfConfig":"146"},{"size":2280,"mtime":1645834715326,"results":"181","hashOfConfig":"146"},{"size":1479,"mtime":1645073333778,"results":"182","hashOfConfig":"146"},{"size":543,"mtime":1640878993094,"results":"183","hashOfConfig":"146"},{"size":1197,"mtime":1641683722710,"results":"184","hashOfConfig":"146"},{"size":140,"mtime":1642742541849,"results":"185","hashOfConfig":"146"},{"size":1750,"mtime":1645175755859,"results":"186","hashOfConfig":"146"},{"size":24,"mtime":1642540313198,"results":"187","hashOfConfig":"146"},{"size":6112,"mtime":1645595016759,"results":"188","hashOfConfig":"146"},{"size":1461,"mtime":1644706984800,"results":"189","hashOfConfig":"146"},{"size":2185,"mtime":1647248972260,"results":"190","hashOfConfig":"146"},{"size":878,"mtime":1640830374635,"results":"191","hashOfConfig":"146"},{"size":558,"mtime":1637894305518,"results":"192","hashOfConfig":"146"},{"size":598,"mtime":1637892170390,"results":"193","hashOfConfig":"146"},{"size":845,"mtime":1639300797095,"results":"194","hashOfConfig":"146"},{"size":1068,"mtime":1644827511084,"results":"195","hashOfConfig":"146"},{"size":1582,"mtime":1639300578733,"results":"196","hashOfConfig":"146"},{"size":1561,"mtime":1641200205831,"results":"197","hashOfConfig":"146"},{"size":1857,"mtime":1637900644235,"results":"198","hashOfConfig":"146"},{"size":413,"mtime":1637567392298,"results":"199","hashOfConfig":"146"},{"size":3698,"mtime":1648995877924,"results":"200","hashOfConfig":"146"},{"size":799,"mtime":1642541576341,"results":"201","hashOfConfig":"146"},{"size":6085,"mtime":1645287032376,"results":"202","hashOfConfig":"146"},{"size":2310,"mtime":1644084879807,"results":"203","hashOfConfig":"146"},{"size":2440,"mtime":1641200570613,"results":"204","hashOfConfig":"146"},{"size":381,"mtime":1641679824640,"results":"205","hashOfConfig":"146"},{"size":3210,"mtime":1645433770695,"results":"206","hashOfConfig":"146"},{"size":2854,"mtime":1647248921666,"results":"207","hashOfConfig":"146"},{"size":3828,"mtime":1645175755866,"results":"208","hashOfConfig":"146"},{"size":6569,"mtime":1645403944020,"results":"209","hashOfConfig":"146"},{"size":761,"mtime":1646039461537,"results":"210","hashOfConfig":"146"},{"size":230,"mtime":1638174485672,"results":"211","hashOfConfig":"146"},{"size":283,"mtime":1640574613690,"results":"212","hashOfConfig":"146"},{"size":7547,"mtime":1642436663486,"results":"213","hashOfConfig":"146"},{"size":239,"mtime":1638155927534,"results":"214","hashOfConfig":"146"},{"size":646,"mtime":1637867144835,"results":"215","hashOfConfig":"146"},{"size":1704,"mtime":1638929139740,"results":"216","hashOfConfig":"146"},{"size":3268,"mtime":1647249179401,"results":"217","hashOfConfig":"146"},{"size":3949,"mtime":1647249034772,"results":"218","hashOfConfig":"146"},{"size":1286,"mtime":1644659442499,"results":"219","hashOfConfig":"146"},{"size":4003,"mtime":1642436663495,"results":"220","hashOfConfig":"146"},{"size":3228,"mtime":1641889737598,"results":"221","hashOfConfig":"146"},{"size":8827,"mtime":1645175937880,"results":"222","hashOfConfig":"146"},{"size":3314,"mtime":1642558056817,"results":"223","hashOfConfig":"146"},{"size":635,"mtime":1642557674863,"results":"224","hashOfConfig":"146"},{"size":1933,"mtime":1642550800991,"results":"225","hashOfConfig":"146"},{"size":3683,"mtime":1644659442494,"results":"226","hashOfConfig":"146"},{"size":1016,"mtime":1647249179397,"results":"227","hashOfConfig":"146"},{"size":1696,"mtime":1642573616518,"results":"228","hashOfConfig":"146"},{"size":850,"mtime":1640919542276,"results":"229","hashOfConfig":"146"},{"size":2847,"mtime":1642550669406,"results":"230","hashOfConfig":"146"},{"size":1533,"mtime":1641858165709,"results":"231","hashOfConfig":"146"},{"size":2558,"mtime":1642556514381,"results":"232","hashOfConfig":"146"},{"size":2476,"mtime":1645594359871,"results":"233","hashOfConfig":"146"},{"size":1409,"mtime":1641573243966,"results":"234","hashOfConfig":"146"},{"size":2349,"mtime":1646197943109,"results":"235","hashOfConfig":"146"},{"size":6748,"mtime":1641916519868,"results":"236","hashOfConfig":"146"},{"size":5420,"mtime":1641916598763,"results":"237","hashOfConfig":"146"},{"size":1405,"mtime":1641573147945,"results":"238","hashOfConfig":"146"},{"size":2141,"mtime":1641683854224,"results":"239","hashOfConfig":"146"},{"size":6238,"mtime":1641683854230,"results":"240","hashOfConfig":"146"},{"size":2801,"mtime":1641755742190,"results":"241","hashOfConfig":"146"},{"size":886,"mtime":1641574290432,"results":"242","hashOfConfig":"146"},{"size":1019,"mtime":1641633101357,"results":"243","hashOfConfig":"146"},{"size":1418,"mtime":1642438293530,"results":"244","hashOfConfig":"146"},{"size":365,"mtime":1641402851224,"results":"245","hashOfConfig":"146"},{"size":2887,"mtime":1641972810626,"results":"246","hashOfConfig":"146"},{"size":2194,"mtime":1641550159221,"results":"247","hashOfConfig":"146"},{"size":1581,"mtime":1639034767064,"results":"248","hashOfConfig":"146"},{"size":769,"mtime":1641611791293,"results":"249","hashOfConfig":"146"},{"size":1342,"mtime":1646243136976,"results":"250","hashOfConfig":"146"},{"size":1135,"mtime":1646183928079,"results":"251","hashOfConfig":"146"},{"size":3730,"mtime":1646720965853,"results":"252","hashOfConfig":"146"},{"size":9297,"mtime":1646729329014,"results":"253","hashOfConfig":"146"},{"size":7471,"mtime":1646205144799,"results":"254","hashOfConfig":"146"},{"size":10721,"mtime":1646202517172,"results":"255","hashOfConfig":"146"},{"size":2800,"mtime":1646203859273,"results":"256","hashOfConfig":"146"},{"size":3765,"mtime":1646204672571,"results":"257","hashOfConfig":"146"},{"size":2226,"mtime":1645429757986,"results":"258","hashOfConfig":"146"},{"size":552,"mtime":1646183819246,"results":"259","hashOfConfig":"146"},{"size":4967,"mtime":1645333518695,"results":"260","hashOfConfig":"146"},{"size":4225,"mtime":1644738500449,"results":"261","hashOfConfig":"146"},{"size":517,"mtime":1644343179054,"results":"262","hashOfConfig":"146"},{"size":2173,"mtime":1644307398683,"results":"263","hashOfConfig":"146"},{"size":2491,"mtime":1644309500352,"results":"264","hashOfConfig":"146"},{"size":1634,"mtime":1644726733716,"results":"265","hashOfConfig":"146"},{"size":720,"mtime":1648995889766,"results":"266","hashOfConfig":"146"},{"size":269,"mtime":1644304188959,"results":"267","hashOfConfig":"146"},{"size":3909,"mtime":1649010643544,"results":"268","hashOfConfig":"146"},{"size":6070,"mtime":1644727301841,"results":"269","hashOfConfig":"146"},{"size":4247,"mtime":1644794870847,"results":"270","hashOfConfig":"146"},{"size":310,"mtime":1644739931489,"results":"271","hashOfConfig":"146"},{"size":486,"mtime":1644769630775,"results":"272","hashOfConfig":"146"},{"size":1110,"mtime":1645134574645,"results":"273","hashOfConfig":"146"},{"size":3245,"mtime":1646242829807,"results":"274","hashOfConfig":"146"},{"size":2407,"mtime":1646185906078,"results":"275","hashOfConfig":"146"},{"size":1873,"mtime":1645607183695,"results":"276","hashOfConfig":"146"},{"size":1390,"mtime":1645402034339,"results":"277","hashOfConfig":"146"},{"size":8506,"mtime":1645433770699,"results":"278","hashOfConfig":"146"},{"size":3469,"mtime":1645289252271,"results":"279","hashOfConfig":"146"},{"size":1827,"mtime":1644978398160,"results":"280","hashOfConfig":"146"},{"size":166,"mtime":1645602559965,"results":"281","hashOfConfig":"146"},{"size":4600,"mtime":1645604355619,"results":"282","hashOfConfig":"146"},{"size":9153,"mtime":1645630623563,"results":"283","hashOfConfig":"146"},{"size":235,"mtime":1645604406043,"results":"284","hashOfConfig":"146"},{"size":3106,"mtime":1645631579664,"results":"285","hashOfConfig":"146"},{"size":2011,"mtime":1645637569059,"results":"286","hashOfConfig":"146"},{"size":599,"mtime":1645638601048,"results":"287","hashOfConfig":"146"},{"size":3245,"mtime":1645947579293,"results":"288","hashOfConfig":"146"},{"size":2332,"mtime":1646197881332,"results":"289","hashOfConfig":"146"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},"a2drxm",{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"301","usedDeprecatedRules":"292"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"292"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"292"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"292"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"292"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"292"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"292"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"292"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"339","usedDeprecatedRules":"292"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"292"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"292"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"292"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"292"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"383"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"292"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"395"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"292"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"292"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"292"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"292"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"292"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"292"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"292"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"292"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"292"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"292"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"292"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"292"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"292"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"292"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"292"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"292"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"292"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"507","usedDeprecatedRules":"292"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"292"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"292"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"518","usedDeprecatedRules":"292"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"523","usedDeprecatedRules":"292"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"292"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"535","usedDeprecatedRules":"292"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"292"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"542"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"292"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"292"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"292"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"292"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"292"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"292"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"395"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"292"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"292"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"292"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"292"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"292"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"598","usedDeprecatedRules":"292"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"292"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"292"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"292"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"619"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"619"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"619"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"292"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"292"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"292"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"292"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"292"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"292"},"/Users/ed/Projects/FTW/client/src/index.tsx",[],["650","651"],"/Users/ed/Projects/FTW/client/src/reportWebVitals.ts",[],"/Users/ed/Projects/FTW/client/src/common/hooks/use-app.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/Header.tsx",["652","653","654","655","656","657"],"import React, { useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaBars, FaGithub, FaWallet } from \"react-icons/fa\";\nimport Logo from \"./Logo\";\nimport { useApp } from \"../../common/hooks/use-app\";\nimport { useWallet } from \"../../packages/provider\";\nimport { utils } from \"../../packages/neo\";\nimport { MENU } from \"../../consts\";\nimport WalletDropdown from \"./WalletDropdown\";\nimport { getWalletIcon } from \"../../packages/ui/Wallet/helpers\";\nimport NetworkSwitch from \"./NetworkSwitch\";\nimport NetworkSwitch2 from \"./NetworkSwitch2\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaMedium, FaTwitter } from \"react-icons/all\";\nimport { MAINNET, TESTNET } from \"../../packages/neo/consts\";\nimport toast from \"react-hot-toast\";\n\nconst Header = () => {\n  const { toggleSidebar, toggleWalletSidebar } = useApp();\n  const { connectedWallet, network, disConnectWallet, switchNetwork } =\n    useWallet();\n  const [isActive, setActive] = useState(false);\n  const handleDisconnectWallet = () => {\n    setActive(false);\n    disConnectWallet();\n  };\n\n  const handleSwitchNetwork = () => {\n    const targetNetwork = network === TESTNET ? MAINNET : TESTNET;\n    switchNetwork(targetNetwork);\n    setActive(false);\n    toast.success(`Network switched. You are on ${targetNetwork}`);\n  };\n\n  return (\n    <nav\n      className=\"navbar has-shadow is-white is-fixed-top\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n      style={{ height: \"52px\" }}\n    >\n      <div className=\"container\">\n        <div\n          className=\"navbar-brand\"\n          style={{ justifyContent: \"space-between\" }}\n        >\n          <div\n            role=\"button\"\n            className=\"navbar-burger is-center is-hidden-tablet\"\n            style={{ marginLeft: 0 }}\n            onClick={toggleSidebar}\n          >\n            <FaBars />\n          </div>\n          <Link className=\"has-text-white navbar-item is-center\" to=\"/\">\n            <Logo />\n          </Link>\n          <div\n            role=\"button\"\n            className={`navbar-burger is-center is-hidden-desktop`}\n            onClick={() => {\n              if (connectedWallet) {\n                setActive(!isActive);\n              } else {\n                toggleWalletSidebar();\n              }\n            }}\n            style={{ marginLeft: 0 }}\n          >\n            <FaWallet />\n          </div>\n        </div>\n        {connectedWallet && (\n          <div\n            className={`navbar-menu  is-hidden-tablet ${\n              isActive && \"is-active\"\n            }`}\n          >\n            <div className=\"navbar-start\">\n              <div className=\"navbar-item\">\n                <div className=\"media\" style={{ alignItems: \"center\" }}>\n                  <div className=\"media-left\">\n                    <img\n                      width=\"32px\"\n                      src={getWalletIcon(connectedWallet.key)}\n                    />\n                  </div>\n                  <div className=\"media-content\">\n                    {utils.truncateAddress(connectedWallet.account.address)}\n                  </div>\n                </div>\n              </div>\n              <hr className=\"dropdown-divider\" />\n              <div className=\"navbar-item\">\n                <NetworkSwitch2 />\n              </div>\n              <hr className=\"dropdown-divider\" />\n              <a onClick={handleDisconnectWallet} className=\"navbar-item\">\n                Disconnect wallet\n              </a>\n            </div>\n          </div>\n        )}\n\n        <div className=\"navbar-menu ml-3\">\n          <div className=\"navbar-start\">\n            {MENU.map((route, i) => {\n              if (!route.network.includes(network)) return false;\n              if (route.category) {\n                return (\n                  <div className=\"navbar-item has-dropdown is-hoverable\">\n                    <div className=\"navbar-link\">{route.label}</div>\n                    <div className=\"navbar-dropdown is-boxed\">\n                      {route.category.map((item, index) => {\n                        return (\n                          <NavLink\n                            key={`category-${item.label}-${item.label}${index}`}\n                            activeClassName=\"is-active\"\n                            to={item.path}\n                            className=\"navbar-item\"\n                          >\n                            {item.label}\n                          </NavLink>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              } else {\n                return (\n                  <NavLink\n                    key={`header-${route.label}${i}`}\n                    activeClassName=\"is-active\"\n                    to={route.path}\n                    className=\"navbar-item\"\n                  >\n\t                  {route.label}\n                  </NavLink>\n                );\n              }\n            })}\n          </div>\n        </div>\n        <div className=\"navbar-end is-hidden-touch\">\n          <div className=\"navbar-item\">\n            <a\n              target=\"_blank\"\n              href=\"https://twitter.com/N3_FTW_NETWORK\"\n              className=\"button is-white is-small \"\n            >\n              <FaTwitter />\n            </a>\n            <a\n              target=\"_blank\"\n              href=\"https://github.com/ForTheWinn\"\n              className=\"button is-white is-small\"\n            >\n              <FaGithub />\n            </a>\n            <a\n              target=\"_blank\"\n              href=\"https://medium.com/@Forthewin_network\"\n              className=\"button is-white is-small\"\n            >\n              <FaMedium />\n            </a>\n          </div>\n          <div className=\"navbar-item\">\n            <NetworkSwitch />\n          </div>\n          {/*<PendingTransaction />*/}\n          <div className=\"navbar-item\">\n            <div className=\"buttons\">\n              {connectedWallet ? (\n                <WalletDropdown connectedWallet={connectedWallet} />\n              ) : (\n                <button\n                  onClick={toggleWalletSidebar}\n                  className=\"button is-small is-black is-rounded\"\n                >\n                  Connect wallet\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","/Users/ed/Projects/FTW/client/src/ui/components/MobileMenuSlider.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/WalletSidebar.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Home.tsx",["658"],"import React from \"react\";\nimport PageLayout from \"../components/PageLayout\";\nimport BgContainer from \"../components/BgContainer\";\nimport {GALLERY_PATH, SMITH_PATH, SWAP_PATH, TOURNAMENT_PATH} from \"../../consts\";\nimport { ARENA_PATH } from \"./Tournament/pageRoutes\";\nimport { Link } from \"react-router-dom\";\nimport { useWallet } from \"../../packages/provider\";\nimport { TESTNET } from \"../../packages/neo/consts\";\nimport toast from \"react-hot-toast\";\n\nconst CARDS = [\n  {\n    title: \"FTW Rune\",\n    type: \"NFT\",\n    desc: \"FTW Rune is an algorithmically generated NFT created and stored onchain.\",\n    img: \"assets/runes.png\",\n    link: GALLERY_PATH,\n  },\n  {\n    title: \"FTW Arena\",\n    type: \"GameFi\",\n    desc: \" FTW Runes against each other with the victor earning a GAS prize.\",\n    img: \"assets/arena-bg.jpeg\",\n    link: TOURNAMENT_PATH,\n  },\n  {\n    title: \"FTW Smith\",\n    type: \"Utility\",\n    desc: \"FTW Smith helps users to create and deploy fungible/Non-fungible token smart contracts without any codes.\",\n    img: \"assets/smith.png\",\n    link: SMITH_PATH,\n  },\n  {\n    title: \"FTW Swap\",\n    type: \"DeFi\",\n    desc: \"Coming soon. Try on our Testnet.\",\n    img: \"assets/swap.png\",\n    link: SWAP_PATH,\n  },\n  // {\n  //   title: \"FTW Lab\",\n  //   type: \"Testnet\",\n  //   desc: \"Preview FTW future apps.\",\n  //   img: \"assets/testnet.png\",\n  //   link: SMITH_PATH,\n  // },\n];\n\nconst Home = () => {\n  const { network, switchNetwork } = useWallet();\n  const onSwitchNetwork = () => {\n    if (network !== TESTNET) {\n      // eslint-disable-next-line no-restricted-globals\n      if (confirm(\"Are you sure to switch network?\")) {\n        switchNetwork(TESTNET);\n        toast.success(\"Network switched\");\n      }\n    }\n  };\n  return (\n    <div>\n      <section className=\"hero is-black\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Forthewin Network</h1>\n            <p className=\"subtitle\">\n              Building some cool decentralized stuff on NEO blockchain.{\" \"}\n            </p>\n          </div>\n        </div>\n      </section>\n      <PageLayout>\n        <div className=\"columns is-multiline\">\n          {CARDS.map((card) => {\n            return (\n              <div key={card.title} className=\"column is-4\">\n                <div className=\"card\">\n                  <div className=\"card-image is-clickable\">\n                    <Link to={card.link}>\n                      <figure className=\"image\">\n                        <BgContainer src={card.img} height=\"300px\" />\n                      </figure>\n                    </Link>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"media\">\n                      <div className=\"media-content\">\n                        <p className=\"title is-4\">\n                          <Link className={\"has-text-dark\"} to={card.link}>\n                            {card.title}\n                          </Link>\n                        </p>\n                        <span className=\"tag is-primary\">{card.type}</span>\n                      </div>\n                    </div>\n                    <div className=\"content\" style={{ minHeight: \"100px\" }}>\n                      {card.desc}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          <div className=\"column is-4\">\n            <div className=\"card\">\n              <div\n                className=\"card-image is-clickable\"\n                onClick={onSwitchNetwork}\n              >\n                <figure className=\"image\">\n                  <BgContainer src={\"assets/lab.png\"} height=\"300px\" />\n                </figure>\n              </div>\n              <div className=\"card-content\">\n                <div className=\"media\">\n                  <div className=\"media-content\">\n                    <p\n                      onClick={onSwitchNetwork}\n                      className=\"title is-4 is-clickable\"\n                    >\n                      FTW Lab\n                    </p>\n                    <span className=\"tag is-primary\">Testnet</span>\n                  </div>\n                </div>\n                <div className=\"content\" style={{ minHeight: \"100px\" }}>\n                  Preview FTW future apps.\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/ed/Projects/FTW/client/src/consts/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/provider/index.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/index.tsx",["659","660","661","662","663"],"import React, { useEffect, useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport ActionModal from \"./ActionModal\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { FarmContract } from \"../../../packages/neo/contracts\";\nimport { IFarmContractStatus } from \"../../../packages/neo/contracts/ftw/farm/interfaces\";\nimport toast from \"react-hot-toast\";\nimport SnapshotList from \"./SnapshotList\";\nimport NotifyError from \"../../components/NotifyError\";\nimport Pool from \"./Pool\";\nimport CancelModal from \"./CancelModal\";\nimport ClaimModal from \"./ClaimModal\";\nimport Claims from \"./Claims\";\nimport PositionModal from \"./PositionModal\";\nimport About from \"./About\";\nimport { TESTNET } from \"../../../packages/neo/consts\";\n\nconst Farm = () => {\n  // let location = useLocation();\n  const production = [TESTNET];\n  const [route, setRoute] = useState(\"POOL\");\n  const [modalActive, setModalActive] = useState(false);\n  const [cancelModalActive, setCancelModalActive] = useState(false);\n  const [claimModalActive, setClaimModalActive] = useState(false);\n  const [positionModalActive, setPositionModalActive] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [contractStatus, setContractStatus] = useState<IFarmContractStatus>();\n  const onActive = () => {\n    if (connectedWallet) {\n      setModalActive(true);\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n  const onCancelModalActive = () => setCancelModalActive(true);\n  const onClaimModalActive = () => setClaimModalActive(true);\n  const onPositionChange = () => setPositionModalActive(true);\n  const { connectedWallet, network } = useWallet();\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      try {\n        const res = await new FarmContract(network).getStatus(connectedWallet);\n        setContractStatus(res);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet, route]);\n  if (!production.includes(network))\n    return (\n      <PageLayout>This smart contract is not support in {network}.</PageLayout>\n    );\n  return (\n    <PageLayout>\n      <div className=\"columns is-centered\">\n        <div className=\"column is-half\">\n          <div className=\"box \">\n            <div className=\"tabs is-toggle\">\n              <ul>\n                <li className={route === \"POOL\" ? \"is-active\" : \"\"}>\n                  <a onClick={() => setRoute(\"POOL\")}>Pool</a>\n                </li>\n                {connectedWallet && contractStatus && contractStatus.deposit && (\n                  <li className={route === \"CLAIMS\" ? \"is-active\" : \"\"}>\n                    <a onClick={() => setRoute(\"CLAIMS\")}>Claims</a>\n                  </li>\n                )}\n                <li className={route === \"SNAPSHOTS\" ? \"is-active\" : \"\"}>\n                  <a onClick={() => setRoute(\"SNAPSHOTS\")}>Snapshots</a>\n                </li>\n                <li className={route === \"ABOUT\" ? \"is-active\" : \"\"}>\n                  <a onClick={() => setRoute(\"ABOUT\")}>About</a>\n                </li>\n              </ul>\n            </div>\n            <NotifyError msg={error} onClose={() => setError(\"\")} />\n            {route === \"POOL\" && (\n              <Pool\n                contractStatus={contractStatus}\n                onPositionChange={onPositionChange}\n                onDeposit={onActive}\n                onCancel={onCancelModalActive}\n                onClaim={onClaimModalActive}\n              />\n            )}\n            {route === \"SNAPSHOTS\" && (\n              <SnapshotList contractStatus={contractStatus} />\n            )}\n            {route === \"CLAIMS\" && (\n              <Claims\n                onClaim={onClaimModalActive}\n                contractStatus={contractStatus}\n              />\n            )}\n            {route === \"ABOUT\" && <About contractStatus={contractStatus} />}\n          </div>\n        </div>\n      </div>\n      {contractStatus && modalActive && (\n        <ActionModal\n          range={contractStatus.range}\n          onClose={() => setModalActive(false)}\n        />\n      )}\n      {contractStatus && contractStatus.deposit && positionModalActive && (\n        <PositionModal\n          currentPosition={contractStatus.deposit.position}\n          range={contractStatus.range}\n          onClose={() => setPositionModalActive(false)}\n        />\n      )}\n      {cancelModalActive && (\n        <CancelModal onClose={() => setCancelModalActive(false)} />\n      )}\n      {claimModalActive && (\n        <ClaimModal onClose={() => setClaimModalActive(false)} />\n      )}\n    </PageLayout>\n  );\n};\n\nexport default Farm;\n","/Users/ed/Projects/FTW/client/src/ui/pages/MyCollection/index.tsx",["664"],"import React, { useEffect, useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { NFTContract } from \"../../../packages/neo/contracts\";\nimport PropertiesModal from \"../Gallery/PropertiesModal\";\nimport { GALLERY_PATH } from \"../../../consts\";\nimport { Link } from \"react-router-dom\";\n\nconst MyCollection = () => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [propertiesModalActive, setPropertiesModalActive] = useState<string>();\n  const { connectedWallet, network } = useWallet();\n  const onPropertiesModalActive = (tokenId: string) => {\n    setPropertiesModalActive(tokenId);\n  };\n\n  useEffect(() => {\n    async function fetchContractStatus(address: string) {\n      setError(\"\");\n      try {\n        const res = await new NFTContract(network).getTokensOf(address);\n        setTokens(res);\n        setLoading(false);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    if (connectedWallet) {\n      fetchContractStatus(connectedWallet.account.address);\n    }\n  }, [connectedWallet, network]);\n  return (\n    <>\n      <section className=\"hero is-white\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">My collection</h1>\n          </div>\n        </div>\n      </section>\n      <PageLayout>\n        {isLoading ? (\n          <div>Loading..</div>\n        ) : error ? (\n          <div>{error}</div>\n        ) : (\n          <div className=\"columns is-multiline\">\n            {tokens.length > 0 ? (\n              tokens.map((token) => (\n                <div className=\"column is-3\">\n                  <figure\n                    className=\"image\"\n                    onClick={() => onPropertiesModalActive(token.tokenId)}\n                  >\n                    <img src={token.image} />\n                  </figure>\n                </div>\n              ))\n            ) : (\n              <div className=\"column is-3\">\n                <div className=\"box\">\n                  <div className=\"block\">\n                    <p>You don't have any runes yet</p>\n                  </div>\n\n                  <Link className=\"button is-primary\" to={GALLERY_PATH}>\n                    Go Get Them\n                  </Link>\n                </div>\n                {/*<DisplayRandomRune width=\"100%\" height=\"100%\" />*/}\n              </div>\n            )}\n          </div>\n        )}\n      </PageLayout>\n      {/*<button onClick={onMint} className=\"button is-black\">Mint</button>*/}\n      {propertiesModalActive && (\n        <PropertiesModal\n          tokenId={propertiesModalActive}\n          onClose={() => setPropertiesModalActive(undefined)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default MyCollection;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/index.tsx",["665"],"import React, { useEffect } from \"react\";\nimport { ARENA_PATH } from \"./pageRoutes\";\nimport { Link, NavLink, Route, useLocation } from \"react-router-dom\";\nimport Arena from \"./scenes/Arena\";\nimport { TOURNAMENT_PATH } from \"../../../consts\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { MAINNET } from \"../../../packages/neo/consts\";\nimport PageLayout from \"../../components/PageLayout\";\n\nconst Tournament = () => {\n  const location = useLocation();\n  useEffect(() => {\n    document.title = \"Forthewin Arena: NFT tournament on NEO\";\n  }, []);\n  const { network } = useWallet();\n  let ARENA_LIST = [\"4\", \"8\", \"16\", \"32\", \"64\", \"128\", \"256\"];\n  if (network === MAINNET) {\n    ARENA_LIST = [\"8\", \"16\", \"32\", \"64\", \"128\"];\n  }\n  return (\n    <section>\n      <section className=\"hero is-white\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <div>\n              <h1 className=\"title\">Arenas</h1>\n              <div className=\"content is-small\">\n                <p>\n                  <strong>Smart contract</strong>\n                  <br />\n                  <a\n                    className=\"has-text-dark is-size-7\"\n                    href=\"https://explorer.onegate.space/contractinfo/0x0eb288c413b5d5ec4aa0df5aea34d9538b28dd29\"\n                  >\n                    0x0eb288c413b5d5ec4aa0df5aea34d9538b28dd29\n                  </a>\n                </p>\n                <p>\n                  <strong>Press</strong>\n                  <br />\n                  <a\n                    // className=\"has-text-dark is-size-7\"\n                    href=\"https://neonewstoday.com/nft/ftw-arena-tickets-now-on-sale/\"\n                  >\n                    Article 1, &nbsp;\n                  </a>\n                  <a\n                    // className=\"has-text-dark is-size-7\"\n                    href=\"https://neonewstoday.com/gaming/forthewin-opens-the-arena-allowing-runes-to-battle-for-gas-prizes/\"\n                  >\n                    2\n                  </a>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"hero-foot\">\n          <nav className=\"tabs is-boxed\">\n            <div className=\"container\">\n              <ul>\n                {ARENA_LIST.map((arena) => {\n                  return (\n                    <li\n                      key={arena}\n                      className={\n                        location.pathname === TOURNAMENT_PATH + \"/\" + arena ||\n                        (location.pathname === TOURNAMENT_PATH &&\n                          arena === ARENA_LIST[0])\n                          ? \"is-active\"\n                          : \"\"\n                      }\n                    >\n                      <NavLink\n                        activeClassName=\"is-active\"\n                        to={TOURNAMENT_PATH + \"/\" + arena}\n                      >\n                        ARENA {arena}\n                      </NavLink>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </section>\n      <PageLayout>\n        <div className=\"box\">\n          <Route\n            exact={true}\n            path={TOURNAMENT_PATH}\n            component={(route) => (\n              <Arena defaultArena={ARENA_LIST[0]} {...route} />\n            )}\n          />\n          <Route\n            path={ARENA_PATH}\n            component={(route) => (\n              <Arena defaultArena={ARENA_LIST[0]} {...route} />\n            )}\n          />\n        </div>\n      </PageLayout>\n    </section>\n  );\n};\n\nexport default Tournament;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/index.tsx",["666"],"import React, { useEffect, useState } from \"react\";\nimport PageLayout from \"../../components/PageLayout\";\nimport PropertiesModal from \"./PropertiesModal\";\nimport toast from \"react-hot-toast\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { NFTContract } from \"../../../packages/neo/contracts\";\nimport Banner from \"./Banner\";\nimport { RestAPI } from \"../../../packages/neo/api\";\nimport { RUNE_PHASE_FILTER } from \"../../../packages/neo/contracts/ftw/nft/consts\";\nimport AfterTransactionSubmitted from \"../../../packages/ui/AfterTransactionSubmitted\";\nimport Modal from \"../../components/Modal\";\n\nconst Gallery = () => {\n  const [txid, setTxid] = useState(\"\");\n  const [filter, setFilter] = useState<string>(RUNE_PHASE_FILTER[0]);\n  const [tokens, setTokens] = useState<any>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [propertiesModalActive, setPropertiesModalActive] = useState<string>();\n  const { connectedWallet, network, addPendingTransaction } = useWallet();\n  const onPropertiesModalActive = (tokenId: string) => {\n    setPropertiesModalActive(tokenId);\n  };\n  const onFilterChange = (val: string) => setFilter(val);\n  const onMint = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new NFTContract(network).mint(connectedWallet);\n        addPendingTransaction(res);\n        setTxid(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n\n  useEffect(() => {\n    document.title =\n      \"Forthewin Rune: Algorithms-generated lucky runes NFT on NEO\";\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const items = await new RestAPI(network).getRunes(filter);\n        // LEAVE TO SWITCH IN CASE DB ERROR\n        // const res = await new NFTContract(network).getTokens();\n        setTokens(items);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchContractStatus();\n  }, [network, filter]);\n  return (\n    <section id=\"Rune\">\n      <Banner\n        network={network}\n        filter={filter}\n        onFilterChange={onFilterChange}\n        onMint={onMint}\n      />\n      {isLoading ? (\n        <PageLayout>\n          <div>Loading..</div>\n        </PageLayout>\n      ) : error ? (\n        <PageLayout>\n          <div>{error}</div>\n        </PageLayout>\n      ) : (\n        <div\n          className=\"container\"\n          style={{\n            display: \"flex\",\n            flexFlow: \"wrap\",\n          }}\n        >\n          {tokens.map((token) => (\n            <figure\n              style={{ width: \"5%\" }}\n              key={token.tokenId}\n              className=\"image rune\"\n              onClick={() => onPropertiesModalActive(token.tokenId.toString())}\n            >\n              <img src={token.image} />\n              {/*<small*/}\n              {/*  className=\"has-text-white\"*/}\n              {/*  style={{ position: \"absolute\", top: 0 }}*/}\n              {/*>*/}\n              {/*  #{token.tokenId}*/}\n              {/*</small>*/}\n              {/*<span className=\"has-text-white\">{token.phase}</span>*/}\n            </figure>\n          ))}\n        </div>\n      )}\n      {propertiesModalActive && (\n        <PropertiesModal\n          tokenId={propertiesModalActive}\n          onClose={() => setPropertiesModalActive(undefined)}\n        />\n      )}\n      {txid && (\n        <Modal onClose={() => setTxid(\"\")}>\n          <AfterTransactionSubmitted\n            txid={txid}\n            network={network}\n            onSuccess={() => setTxid(\"\")}\n            onError={() => setTxid(\"\")}\n          />\n        </Modal>\n      )}\n    </section>\n  );\n};\n\nexport default Gallery;\n","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/helpers.ts",[],"/Users/ed/Projects/FTW/client/src/ui/components/Logo.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/WalletDropdown.tsx",["667","668","669"],"import React, { useEffect, useState } from \"react\";\nimport { utils } from \"../../packages/neo\";\nimport { IConnectedWallet } from \"../../packages/neo/wallet/interfaces\";\nimport { useWallet } from \"../../packages/provider\";\nimport { useApp } from \"../../common/hooks/use-app\";\nimport { getWalletIcon } from \"../../packages/ui/Wallet/helpers\";\nimport { COLLECTION_PATH } from \"../../consts\";\nimport { NavLink } from \"react-router-dom\";\nimport { NEO_LINE, O3 } from \"../../packages/neo/consts\";\nimport neo3Dapi from \"neo3-dapi\";\ninterface IWalletDropdownProps {\n  connectedWallet: IConnectedWallet;\n}\nconst WalletDropdown = ({ connectedWallet }: IWalletDropdownProps) => {\n  const [isActive, setActive] = useState(false);\n  const { disConnectWallet, connectWallet } = useWallet();\n  const { toggleWalletSidebar } = useApp();\n  const handleDisconnectWallet = () => {\n    setActive(false);\n    toggleWalletSidebar();\n    disConnectWallet();\n  };\n\n  const onActive = () => setActive(!isActive);\n\n  useEffect(() => {\n    const refresh = () => {\n      connectWallet(connectedWallet.key);\n    };\n    const disconnected = () => {\n      disConnectWallet();\n    };\n\n    if (connectedWallet.key === NEO_LINE) {\n      window.addEventListener(\"NEOLine.NEO.EVENT.ACCOUNT_CHANGED\", refresh);\n      window.addEventListener(\"NEOLine.NEO.EVENT.NETWORK_CHANGED\", refresh);\n      window.addEventListener(\"NEOLine.NEO.EVENT.DISCONNECTED\", disconnected);\n      return () => {\n        window.removeEventListener(\n          \"NEOLine.NEO.EVENT.ACCOUNT_CHANGED\",\n          refresh\n        );\n        window.removeEventListener(\n          \"NEOLine.NEO.EVENT.NETWORK_CHANGED\",\n          refresh\n        );\n        window.removeEventListener(\n          \"NEOLine.NEO.EVENT.DISCONNECTED\",\n          disconnected\n        );\n      };\n    }\n    if (connectedWallet.key === O3) {\n      neo3Dapi.addEventListener(\n        neo3Dapi.Constants.EventName.ACCOUNT_CHANGED,\n        refresh\n      );\n\n      neo3Dapi.addEventListener(\n        neo3Dapi.Constants.EventName.NETWORK_CHANGED,\n        refresh\n      );\n\n      neo3Dapi.addEventListener(\n        neo3Dapi.Constants.EventName.DISCONNECTED,\n        disconnected\n      );\n\n      return () => {\n        neo3Dapi.removeEventListener(\n          neo3Dapi.Constants.EventName.ACCOUNT_CHANGED,\n          refresh\n        );\n        neo3Dapi.removeEventListener(\n          neo3Dapi.Constants.EventName.NETWORK_CHANGED,\n          refresh\n        );\n        neo3Dapi.removeEventListener(\n          neo3Dapi.Constants.EventName.DISCONNECTED,\n          disconnected\n        );\n      };\n    }\n  }, []);\n  return (\n    <div className={`dropdown is-right ${isActive ? \"is-active\" : \"\"}`}>\n      <div className=\"dropdown-trigger\">\n        <button\n          onClick={onActive}\n          className=\"button is-small is-black is-rounded\"\n          aria-controls=\"dropdown-wallet\"\n        >\n          <span>{utils.truncateAddress(connectedWallet.account.address)}</span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-wallet\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          <div className=\"dropdown-item\">\n            <div className=\"media\">\n              <div className=\"media-left\">\n                <img src={getWalletIcon(connectedWallet.key)} />\n              </div>\n              <div className=\"media-content\">\n                {utils.truncateAddress(connectedWallet.account.address)}\n              </div>\n            </div>\n          </div>\n          <hr className=\"dropdown-divider\" />\n          <NavLink\n            className=\"dropdown-item has-text-dark\"\n            onClick={() => setActive(false)}\n            to={COLLECTION_PATH}\n          >\n            My NFT\n          </NavLink>\n          <hr className=\"dropdown-divider\" />\n          <a onClick={handleDisconnectWallet} className=\"dropdown-item\">\n            Disconnect\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WalletDropdown;\n","/Users/ed/Projects/FTW/client/src/ui/components/NetworkSwitch.tsx",["670"],"import React, { useState } from \"react\";\nimport { useWallet } from \"../../packages/provider\";\nimport { MAINNET, PRIVATENET, TESTNET } from \"../../packages/neo/consts\";\nimport { INetworkType } from \"../../packages/neo/network\";\n\nconst NetworkSwitch = () => {\n  const [isActive, setActive] = useState(false);\n  const { network, switchNetwork } = useWallet();\n  const onActive = () => setActive(!isActive);\n  const handleNetworkChange = (val: string) => {\n    // eslint-disable-next-line no-restricted-globals\n    if (confirm(\"Are you sure to switch network?\")) {\n      switchNetwork(val as INetworkType);\n      setActive(false);\n    }\n  };\n  const networkList = [PRIVATENET, TESTNET, MAINNET];\n\n  return (\n    <div className={`dropdown is-right ${isActive ? \"is-active\" : \"\"}`}>\n      <div className=\"dropdown-trigger\">\n        <button\n          onClick={onActive}\n          className={`button is-small ${\n            network === MAINNET ? \"is-white\" : \"is-danger\"\n          }`}\n          aria-controls=\"dropdown-wallet\"\n        >\n          {network}\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-wallet\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {networkList.map((v) => {\n            if (\n              (process.env.NODE_ENV !== \"development\" && v === PRIVATENET) ||\n              network === v\n            ) {\n              return false;\n            }\n            return (\n              <div key={`network${v}`} className=\"dropdown-item\">\n                <a onClick={() => handleNetworkChange(v)}>Switch to {v}</a>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkSwitch;\n","/Users/ed/Projects/FTW/client/src/ui/components/SidebarNav.tsx",["671","672","673"],"import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useApp } from \"../../common/hooks/use-app\";\nimport { MENU } from \"../../consts\";\nimport { useWallet } from \"../../packages/provider\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaMedium, FaTwitter } from \"react-icons/all\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaGithub } from \"react-icons/fa\";\n\nconst SidebarNav = (props) => {\n  const { network } = useWallet();\n  const { toggleSidebar } = useApp();\n  return (\n    <>\n      <aside className=\"menu p-5\">\n        <p className=\"menu-label\">Menu</p>\n        <ul className=\"menu-list\">\n          {MENU.map((route, i) => {\n            if (!route.network.includes(network)) return false;\n            return (\n              <li key={`${route.label}${i}`}>\n                {route.category ? (\n                  <>\n                    <div\n                      onClick={toggleSidebar}\n                      // activeClassName={\"is-active\"}\n                      // to={route.path}\n                    >\n                      {route.label}\n                    </div>\n                    <ul>\n                      {route.category.map((item) => {\n                        return (\n                          <li>\n                            <NavLink\n                              key={`category-${item.label}`}\n                              activeClassName={\"is-active\"}\n                              to={item.path}\n                            >\n                              {item.label}\n                            </NavLink>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </>\n                ) : (\n                  <NavLink\n                    onClick={toggleSidebar}\n                    activeClassName={\"is-active\"}\n                    to={route.path}\n                  >\n                    {route.label}\n                  </NavLink>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </aside>\n      <div className=\"p-5\" style={{ position: \"absolute\", bottom: \"40px\" }}>\n        <div className=\"buttons\">\n          <a\n            target=\"_blank\"\n            href=\"https://twitter.com/N3_FTW_NETWORK\"\n            className=\"button is-white is-small \"\n          >\n            <FaTwitter />\n          </a>\n          <a\n            target=\"_blank\"\n            href=\"https://github.com/ForTheWinn\"\n            className=\"button is-white is-small\"\n          >\n            <FaGithub />\n          </a>\n          <a\n            target=\"_blank\"\n            href=\"https://medium.com/@Forthewin_network\"\n            className=\"button is-white is-small\"\n          >\n            <FaMedium />\n          </a>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SidebarNav;\n","/Users/ed/Projects/FTW/client/src/ui/components/PageLayout.tsx",[],"/Users/ed/Projects/FTW/client/src/consts/pageRoutes.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/pageRoutes.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/provider/wallet-provider.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/NotifyError.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotList.tsx",["674"],"import React, { useState } from \"react\";\nimport { IFarmContractStatus } from \"../../../packages/neo/contracts/ftw/farm/interfaces\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { FarmContract } from \"../../../packages/neo/contracts\";\nimport { toast } from \"react-hot-toast\";\nimport SnapshotCountdown from \"./SnapshotCountdown\";\nimport SnapshotCard from \"./SnapshotCard\";\n\ninterface ISnapshotListProps {\n  contractStatus?: IFarmContractStatus;\n}\nconst SnapshotList = ({ contractStatus }: ISnapshotListProps) => {\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [txid, setTxid] = useState<string>();\n  const onCreateSnapshot = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new FarmContract(network).createSnapshot(\n          connectedWallet\n        );\n        setTxid(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      openWalletModal();\n    }\n  };\n  if (!contractStatus) return <div></div>;\n  return (\n    <div className=\"\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <h1 className=\"title is-4 is-marginless\">Snapshots</h1>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            <SnapshotCountdown\n              timeLeft={parseFloat(contractStatus.timeLeft)}\n              onCreateSnapshot={onCreateSnapshot}\n            />\n          </div>\n        </div>\n      </div>\n\n      {contractStatus.snapshots.items.map((item) => (\n        <SnapshotCard key={item.no} item={item} />\n      ))}\n    </div>\n  );\n};\n\nexport default SnapshotList;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/ActionModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/About.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/Pool.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/ClaimModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/PositionModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/CancelModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/Claims.tsx",["675"],"import React from \"react\";\nimport { IFarmContractStatus } from \"../../../packages/neo/contracts/ftw/farm/interfaces\";\nimport SnapshotCountdown from \"./SnapshotCountdown\";\n\ninterface IClaimsProps {\n  contractStatus?: IFarmContractStatus;\n  onClaim: () => void;\n}\nconst Claims = ({ contractStatus, onClaim }: IClaimsProps) => {\n  if (!contractStatus) return <div></div>;\n  if (!contractStatus.claims) return <div></div>;\n  if (!contractStatus.deposit) return <div></div>;\n  const lastClaimNo = contractStatus.deposit.lastClaimNo\n    ? parseFloat(contractStatus.deposit.lastClaimNo)\n    : 0;\n  const isClaimable =\n    parseFloat(contractStatus.snapshots.totalItems) > lastClaimNo;\n  return (\n    <div className=\"\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <h1 className=\"title is-4 is-marginless\">My Claims</h1>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            {isClaimable && (\n              <button\n                onClick={onClaim}\n                className=\"button is-primary is-fullwidth\"\n              >\n                Claim Reward\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      {contractStatus.claims.items.length > 0 ? (\n        contractStatus.claims.items.map((item) => {\n          return (\n            <div key={item.createdAt} className=\"media\">\n              <div className=\"media-left\">#{item.no}</div>\n              <div className=\"media-content\">\n                Snapshots: {`${item.from} ~ ${item.end}`}\n                <br />\n                GAS: {item.GAS}\n                <br />\n                FTW: {item.FTW}\n                <br />\n                {item.createdAt}\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <div>No claims to display</div>\n      )}\n    </div>\n  );\n};\n\nexport default Claims;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/PropertiesModal.tsx",["676","677"],"import React, { useEffect, useState } from \"react\";\nimport Modal from \"../../components/Modal\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { NFTContract } from \"../../../packages/neo/contracts\";\n\ninterface IPropertiesModal {\n  tokenId: string;\n  onClose: () => void;\n}\nconst PropertiesModal = ({ tokenId, onClose }: IPropertiesModal) => {\n  const [item, setItem] = useState<any>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { network } = useWallet();\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new NFTContract(network).getProperties(\n          tokenId.toString()\n        );\n        setItem(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchContractStatus();\n  }, [network]);\n  return (\n    <Modal onClose={onClose}>\n      {isLoading ? (\n        <div>Loading the rune data from the chain..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <>\n          <h1 className=\"title is-4\">{item.name}</h1>\n\n          <p className=\"subtitle is-7\">\n            <strong>Phase:</strong> {item.phase}, <strong>Luck:</strong>{\" \"}\n            {item.luck}\n          </p>\n          <figure className=\"image is-square\">\n            <img src={item.image} />\n          </figure>\n          <p className=\"subtitle is-7 has-text-right mt-3\">{item.owner}</p>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default PropertiesModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Gallery/Banner.tsx",["678","679"],"import React from \"react\";\nimport { RUNE_PRICE } from \"../../../packages/neo/contracts/ftw/nft/consts\";\nimport { INetworkType } from \"../../../packages/neo/network\";\nimport DisplayRandomRune from \"../../components/RandomRune\";\ninterface IBannerProps {\n  network: INetworkType;\n  filter: string;\n  onMint: () => void;\n  onFilterChange: (val: string) => void;\n}\nconst Banner = ({ onMint, network }: IBannerProps) => {\n  return (\n    <section className=\"hero is-white\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <div>\n            <h1 className=\"title\">FTW Runes</h1>\n            <p className=\"subtitle\">Algorithms-generated, stored onchain NFT</p>\n            <div className=\"content is-small\">\n              <p>\n                <strong>Smart contract</strong>\n                <br />\n                <a\n                  className=\"has-text-dark is-size-7\"\n                  href=\"https://explorer.onegate.space/contractinfo/0xbebd4eb7c09ca5b59004aa8b58c9bfc81270e5d6\"\n                >\n                  0xbebd4eb7c09ca5b59004aa8b58c9bfc81270e5d6\n                </a>\n              </p>\n              <p>\n                <strong>Max supply</strong>\n                <br />\n                500 runes (Sold out)\n              </p>\n              <p>\n                <strong>Attribute #1</strong>\n                <br />\n                Dark, Light, Fire, Water, Wood, Earth, Metal\n              </p>\n              <p>\n                <strong>Attribute #2</strong>\n                <br /> Luck (1 ~ 10)\n              </p>\n              <p>\n                <strong>Press</strong>\n                <br />\n                <a\n                  // className=\"has-text-dark is-size-7\"\n                  href=\"https://neonewstoday.com/general/forthewin-network-launches-token-generator-and-ftw-rune-with-image-stored-onchain\"\n                >\n                  Article 1, &nbsp;\n                </a>\n                <a\n                  // className=\"has-text-dark is-size-7\"\n                  href=\"https://neonewstoday.com/nft/ftw-arena-tickets-now-on-sale/\"\n                >\n                  Article 2\n                </a>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Banner;\n","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/index.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/ui/PendingTransaction/index.tsx",["680","681"],"import React, { useEffect } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\nimport { useWallet } from \"../../provider\";\nimport { Network } from \"../../neo/network\";\n\nconst PendingTransaction = () => {\n  const {\n    network,\n    pendingTransactions,\n    removePendingTransaction,\n    // increaseTotalTxSubmit,\n  } = useWallet();\n  useEffect(() => {\n    async function checkTxid() {\n      try {\n        for (const txid of pendingTransactions) {\n          const res = await Network.getRawTx(txid, network);\n          removePendingTransaction(txid);\n          // increaseTotalTxSubmit();\n        }\n      } catch (e: any) {\n        console.error(e);\n      }\n    }\n\n    if (pendingTransactions.length > 0) {\n      checkTxid();\n    }\n  }, [pendingTransactions]);\n  if (pendingTransactions.length === 0) return <></>;\n  return (\n    <div className=\"navbar-item pr-0\">\n      <div\n        style={{ pointerEvents: \"none\" }}\n        className=\"is-center button is-outlined is-rounded is-small\"\n      >\n        <ClipLoader loading={true} size={15} />\n        <span className=\"ml-2\">{`${pendingTransactions.length} Pending`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default PendingTransaction;\n",["682","683"],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/consts/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/api/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/index.ts",["684","685","686"],"import { INetworkType, Network } from \"../../../network\";\nimport { IConnectedWallet } from \"../../../wallet/interfaces\";\nimport { wallet } from \"../../../index\";\nimport { DEFAULT_WITNESS_SCOPE, GAS_SCRIPT_HASH } from \"../../../consts\";\nimport { DEPLOY_FEE, SMITH_SCRIPT_HASH } from \"./consts\";\nimport { ISmithContractStatus, ISmithNEP11RecordPaginate } from \"./interfaces\";\nimport {\n  parseNEP11RecordPaginate,\n  parsePaginate,\n  parseSmithProperties,\n} from \"./helpers\";\nimport { tx, u, wallet as NeonWallet } from \"@cityofzion/neon-core\";\nimport { IRuneMeta } from \"../nft/interfaces\";\nimport { RUNE_SCRIPT_HASH } from \"../nft\";\nimport { TTM_SCRIPT_HASH } from \"../../ttm/nft\";\n\nexport class SmithContract {\n  network: INetworkType;\n  contractHash: string;\n\n  constructor(networkType: INetworkType) {\n    this.network = networkType;\n    this.contractHash = SMITH_SCRIPT_HASH[networkType];\n  }\n\n  createNEP17 = async (\n    connectedWallet: IConnectedWallet,\n    contractName: string,\n    symbol: string,\n    decimals: string,\n    totalSupply: string,\n    author: string,\n    description: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"createNEP17\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"String\",\n          value: contractName,\n        },\n        {\n          type: \"String\",\n          value: author,\n        },\n        {\n          type: \"String\",\n          value: description,\n        },\n        {\n          type: \"String\",\n          value: symbol,\n        },\n        {\n          type: \"Integer\",\n          value: totalSupply,\n        },\n        {\n          type: \"Integer\",\n          value: decimals,\n        },\n      ],\n      signers: [\n        {\n          account: senderHash,\n          scopes: tx.WitnessScope.CustomContracts,\n          allowedContracts: [this.contractHash, GAS_SCRIPT_HASH],\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript\n    );\n  };\n\n  createNEP11 = async (\n    connectedWallet: IConnectedWallet,\n    contractName: string,\n    symbol: string,\n    author: string,\n    description: string,\n    email: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"createNEP11\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"String\",\n          value: symbol,\n        },\n        {\n          type: \"String\",\n          value: contractName,\n        },\n        {\n          type: \"String\",\n          value: description,\n        },\n        {\n          type: \"String\",\n          value: author,\n        },\n        {\n          type: \"String\",\n          value: email,\n        },\n      ],\n      signers: [\n        {\n          account: senderHash,\n          scopes: tx.WitnessScope.CustomContracts,\n          allowedContracts: [this.contractHash, GAS_SCRIPT_HASH],\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript\n    );\n  };\n\n  mintNFT = async (\n    connectedWallet: IConnectedWallet,\n    contractHash: string,\n    name: string,\n    description: string,\n    image: string,\n    json\n  ) => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"mintNFT\",\n      scriptHash: contractHash,\n      args: [\n        {\n          type: \"String\",\n          value: name,\n        },\n        {\n          type: \"String\",\n          value: description,\n        },\n        {\n          type: \"String\",\n          value: image,\n        },\n        {\n          type: \"String\",\n          value: json,\n        },\n      ],\n      signers: [DEFAULT_WITNESS_SCOPE(senderHash)],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript\n    );\n  };\n\n  getStatus = async (): Promise<ISmithContractStatus> => {\n    const records = {\n      operation: \"getRecords\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Integer\",\n          value: 1,\n        },\n      ],\n    };\n\n    const scripts = [records];\n\n    const res = await Network.read(this.network, scripts);\n    return {\n      records: parsePaginate(res.stack[0].value),\n    };\n  };\n\n  getNEP11Records = async (): Promise<ISmithNEP11RecordPaginate> => {\n    const records = {\n      operation: \"getNep11Records\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Integer\",\n          value: 1,\n        },\n      ],\n    };\n    const scripts = [records];\n    const res = await Network.read(this.network, scripts);\n    return parseNEP11RecordPaginate(res.stack[0].value);\n  };\n\n  getTokens = async (contract): Promise<string[]> => {\n    const script = {\n      scriptHash: contract,\n      operation: \"tokens\",\n      args: [],\n    };\n    const res = await Network.read(this.network, [script]);\n    // @ts-ignore\n    return res.stack[0].iterator.map((item) => {\n      return u.HexString.fromBase64(item.value as string).toAscii();\n    });\n  };\n\n  totalSupply = async (contract): Promise<number> => {\n    const script = {\n      scriptHash: contract,\n      operation: \"totalSupply\",\n      args: [],\n    };\n    const res = await Network.read(this.network, [script]);\n    // @ts-ignore\n    return parseFloat(res.stack[0].value);\n  };\n\n  getProperties = async (\n    contractHash: string,\n    tokenId: string\n  ): Promise<IRuneMeta> => {\n    const script = {\n      scriptHash: contractHash,\n      operation: \"properties\",\n      args: [\n        {\n          type: \"String\",\n          value: tokenId,\n        },\n      ],\n    };\n    const res = await Network.read(this.network, [script]);\n    // @ts-ignore\n    return parseSmithProperties(res.stack);\n  };\n}\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Home/index.tsx",[],["687","688"],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/index.tsx",["689","690","691","692"],"import React, { useEffect, useState } from \"react\";\nimport Banner from \"./Banner\";\nimport PageLayout from \"../../../../components/PageLayout\";\nimport { ARENA_PATH } from \"../../pageRoutes\";\nimport { Route, useLocation } from \"react-router-dom\";\nimport Players from \"./Players\";\nimport History from \"./History\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { TournamentContract } from \"../../../../../packages/neo/contracts/ftw/tournament\";\n\nconst Arena = (props) => {\n  const location = useLocation();\n  let { arenaNo } = props.match.params;\n  arenaNo = arenaNo ? arenaNo : props.defaultArena;\n  const [status, setStatus] = useState<{\n    prize: number;\n    gameNo: number;\n    previousChampWallet?: string;\n    timeElapsedFromPreviousGame?: string;\n  }>();\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { network } = useWallet();\n  useEffect(() => {\n    async function fetchBetAmount() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new TournamentContract(network).getCurrentPrize(\n          arenaNo\n        );\n        setStatus(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchBetAmount();\n  }, [network, location.pathname]);\n  return (\n    <div>\n      <Banner pathname={location.pathname} status={status} arenaNo={arenaNo} />\n      {React.useMemo(() => {\n        return (\n          <>\n            {isLoading ? (\n              <div>Loading..</div>\n            ) : (\n              <>\n                <Route\n                  exact\n                  path={ARENA_PATH}\n                  component={() => (\n                    <Players\n                      arenaNo={arenaNo}\n                      gameNo={status ? status.gameNo : undefined}\n                    />\n                  )}\n                />\n                <Route\n                  path={ARENA_PATH + \"/history\"}\n                  component={() => <History arenaNo={arenaNo} />}\n                />\n              </>\n            )}\n          </>\n        );\n      }, [status, isLoading])}\n    </div>\n  );\n};\n\nexport default Arena;\n","/Users/ed/Projects/FTW/client/src/ui/components/Modal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/TransactionSubmitted.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotCard.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Farm/SnapshotCountdown.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/WalletList.tsx",["693","694"],"import React from \"react\";\nimport { useWallet } from \"../../provider\";\nimport { DEV } from \"../../neo/consts\";\nimport { getWalletIcon } from \"./helpers\";\n\nconst WalletList = () => {\n  const { connectWallet, list, useDevWallet } = useWallet();\n  return (\n    <>\n      <p className=\"subtitle is-6\">\n        Connect with one of our available wallet info providers or create a new\n        one.\n      </p>\n      <nav className=\"panel\">\n        {list.map((_wallet) => {\n          if (!useDevWallet && _wallet.key === DEV) return false;\n          return (\n            <a\n              key={_wallet.key}\n              className=\"panel-block\"\n              onClick={() => connectWallet(_wallet.key)}\n            >\n              <span className=\"panel-icon\">\n                <img src={getWalletIcon(_wallet.key)} />\n                {/*<_wallet.img />*/}\n                {/*<i className=\"fas fa-book\" aria-hidden=\"true\"></i>*/}\n              </span>\n              {_wallet.label}\n            </a>\n          );\n        })}\n      </nav>\n    </>\n  );\n};\n\nexport default WalletList;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Farm/MyPosition.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/Runes.tsx",["695","696","697"],"import React, { useEffect, useState } from \"react\";\nimport { NFTContract } from \"../../neo/contracts\";\nimport { IRuneMeta } from \"../../neo/contracts/ftw/nft/interfaces\";\nimport { useWallet } from \"../../provider\";\nimport { IConnectedWallet } from \"../../neo/wallet/interfaces\";\n\ninterface IRunesProps {\n  connectedWallet: IConnectedWallet;\n}\nconst Runes = ({ connectedWallet }: IRunesProps) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [error, setError] = useState(\"\");\n  useState<IRuneMeta>();\n  const { network } = useWallet();\n  // const onPropertiesModalActive = (obj: IRuneMeta) => {\n  //   if (connectedWallet) {\n  //     setPropertiesModalActive(obj);\n  //   } else {\n  //     toast.error(\"Please connect wallet.\");\n  //   }\n  // };\n  useEffect(() => {\n    async function fetchContractStatus() {\n      try {\n        const res = await new NFTContract(network).getTokens();\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet]);\n  return (\n    <div>\n      <div\n        style={{\n          flexFlow: \"wrap\",\n          // width: \"640px\",\n          // margin: \"0 auto\"\n        }}\n        className=\"is-flex\"\n      >\n        {/*{tokens.map((tokenId) => (*/}\n        {/*  <DisplayRune*/}\n        {/*    tokenId={tokenId}*/}\n        {/*    network={network}*/}\n        {/*    onClick={() => false}*/}\n        {/*  />*/}\n        {/*))}*/}\n        {/*<DisplayRandomRune width=\"64px\" height=\"64px\" />*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Runes;\n",["698","699"],"/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/WalletDropdown.tsx",["700","701"],"import React, { useState } from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaAngleDown } from \"react-icons/all\";\nimport { useApp } from \"../../../common/hooks/use-app\";\nimport { useWallet } from \"../../provider\";\nimport { getWalletIcon } from \"./helpers\";\n\nconst WalletDropdown = () => {\n  const [isActive, setActive] = useState(false);\n  const { disConnectWallet, connectedWallet } = useWallet();\n  const { toggleWalletSidebar } = useApp();\n  const handleDisconnectWallet = () => {\n    setActive(false);\n    toggleWalletSidebar();\n    disConnectWallet();\n  };\n  if (!connectedWallet) {\n    return (\n      <button className=\"button is-white \" onClick={() => setActive(!isActive)}>\n        <strong>Wallet</strong>\n      </button>\n    );\n  }\n  return (\n    <div className={`dropdown ${isActive && \"is-active\"}`}>\n      <div className=\"dropdown-trigger\">\n        <button\n          className=\"button is-white\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu3\"\n          onClick={() => setActive(!isActive)}\n        >\n          <span className=\"icon is-small\">\n            <img src={getWalletIcon(connectedWallet.key)} />\n          </span>\n          <span>\n            <strong>Wallet</strong>\n          </span>\n          <span className=\"icon is-small\">\n            <FaAngleDown />\n            {/*<i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>*/}\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu3\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          <a\n            onClick={handleDisconnectWallet}\n            href=\"#\"\n            className=\"dropdown-item\"\n          >\n            Disconnect\n          </a>\n          {/*<hr className=\"dropdown-divider\"/>*/}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WalletDropdown;\n","/Users/ed/Projects/FTW/client/src/packages/ui/Wallet/AssetCard.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/neo/network/index.ts",["702","703"],"/Users/ed/Projects/FTW/client/src/packages/neo/api/rest.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/wallet/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/utils/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/helpers.ts",["704"],"import {\n  base64ToAddress,\n  base64ToDate,\n  base64ToHash160,\n  base64ToString,\n} from \"../../../utils\";\nimport { u } from \"@cityofzion/neon-core\";\n\nexport const parsePaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseRecord(stackItem[3].value),\n  };\n};\n\nconst parseRecord = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      no: item.value[0].value,\n      contractOwner: base64ToAddress(item.value[1].value),\n      contractHash: base64ToHash160(item.value[2].value), // NEO amount\n      name: base64ToString(item.value[3].value), // NEO amount\n      symbol: base64ToString(item.value[4].value), // NEO amount\n      decimals: item.value[5].value, // NEO amount\n      totalSupply: item.value[6].value, // NEO amount\n      author: base64ToString(item.value[7].value), // NEO amount\n      description: base64ToString(item.value[8].value), // NEO amount\n      createdAt: base64ToDate(item.value[9].value),\n    };\n  });\n};\n\nexport const parseNEP11RecordPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseNEP11Record(stackItem[3].value),\n  };\n};\n\nconst parseNEP11Record = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      no: item.value[0].value,\n      contractHash: base64ToHash160(item.value[1].value), // NEO amount\n      contractOwner: base64ToAddress(item.value[2].value),\n      name: base64ToString(item.value[3].value), // NEO amount\n      symbol: base64ToString(item.value[4].value), // NEO amount\n      description: base64ToString(item.value[5].value), // NEO amount\n      author: base64ToString(item.value[6].value), // NEO amount\n      email: base64ToString(item.value[7].value), // NEO amount\n      createdAt: base64ToDate(item.value[8].value),\n    };\n  });\n};\n\nexport const parseSmithProperties = (stackItem) => {\n  const obj = {};\n  // return JSON.stringify(res, null, 2);\n  stackItem[0].value.map((item) => {\n    const key = u.base642utf8(item.key.value);\n    let value = \"\";\n\n    if (key === \"owner\") {\n      value = base64ToAddress(item.value.value);\n    } else {\n      if (item.value.type === \"Integer\") {\n        value = item.value.value;\n      } else {\n        value = base64ToString(item.value.value);\n      }\n    }\n    obj[key] = value;\n  });\n  return obj;\n};\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/smith/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/local-storage/index.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Banner.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nep17/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/bank/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/api/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/wallet/dev-wallet.ts",["705"],"import {\n  DEV_WALLET_PRIVATE_KEY,\n  GAS_SCRIPT_HASH,\n  NEO_SCRIPT_HASH,\n} from \"../consts\";\nimport { CONST, rpc, sc, tx, u, wallet } from \"@cityofzion/neon-core\";\n// tslint:disable-next-line:no-submodule-imports\nimport { BigInteger } from \"@cityofzion/neon-core/lib/u\";\nimport { INetworkType, Network } from \"../network\";\nimport { IBalance } from \"./interfaces\";\nimport { convertContractCallParam } from \"../utils\";\n\nexport class DevWallet {\n  static account = new wallet.Account(DEV_WALLET_PRIVATE_KEY);\n  static async getAccount() {\n    return {\n      address: DevWallet.account.address,\n      label: \"DEV\",\n    };\n  }\n\n  static async getProvider() {\n    return {\n      name: \"Dev wallet\",\n      version: \"0.0\",\n      website: \"https://\",\n      // @ts-ignore\n      compatibility: [],\n      extra: { currency: \"USD\", theme: \"\" },\n    };\n  }\n\n  static async getNetworks(network: INetworkType) {\n    return {\n      chainId: 4,\n      defaultNetwork: network,\n      networks: [\"MainNet\", \"TestNet\", \"N3MainNet\", \"N3TestNet\"],\n    };\n  }\n\n  /* Convert balance as neoline does */\n  static async getBalance(network: INetworkType) {\n    const rpcClient = Network.getRPCClient(network);\n    const res = await rpcClient.getNep17Balances(DevWallet.account.address);\n    const balances: IBalance[] = [];\n    res.balance.forEach((item) => {\n      let symbol;\n      let amount;\n      if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n        symbol = \"GAS\";\n        amount = u.BigInteger.fromNumber(item.amount).toDecimal(8).toString();\n      }\n      if (item.assethash.includes(NEO_SCRIPT_HASH)) {\n        symbol = \"NEO\";\n        amount = item.amount;\n      }\n      balances.push({\n        contract: item.assethash,\n        amount,\n        symbol,\n      });\n    });\n    return balances;\n  }\n\n  static async invoke(\n    invokeScript: sc.ContractCallJson & {\n      extraSystemFee?: string;\n      signers: any[];\n    },\n    network: INetworkType\n  ) {\n    const rpcClient = Network.getRPCClient(network);\n    const version: any = await rpcClient.getVersion();\n    const txObj = await DevWallet.build(rpcClient, invokeScript);\n    txObj.sign(DevWallet.account, version.protocol.network);\n    const txid = await rpcClient.sendRawTransaction(txObj);\n    // // tslint:disable-next-line:no-console\n    //   JSON.stringify(\n    //     {\n    //       RPC: rpc,\n    //       Transaction: txObj,\n    //       Network: version,\n    //       \"Network Fee\": txObj.networkFee.toDecimal(8).toString(),\n    //       \"System Fee\": txObj.systemFee.toDecimal(8).toString(),\n    //     },\n    //     null,\n    //     4\n    //   )\n    // );\n    return {\n      txid,\n      nodeUrl: rpcClient.url,\n    };\n  }\n\n  static createScript = (invokeScript: sc.ContractCallJson) => {\n    return sc.createScript({\n      scriptHash: invokeScript.scriptHash,\n      operation: invokeScript.operation,\n      args: invokeScript.args\n        ? invokeScript.args.map((param: any) => convertContractCallParam(param))\n        : [],\n    });\n  };\n\n  static build = async (\n    rpcClient: rpc.RPCClient,\n    invokeScript: sc.ContractCallJson & {\n      extraSystemFee?: string;\n      signers: any[];\n    }\n    // cosignerAddress?: string\n  ): Promise<tx.Transaction> => {\n    const currentHeight = await rpcClient.getBlockCount();\n\n    const script = this.createScript(invokeScript);\n\n    // if (cosignerAddress) {\n    //   signers.push({\n    //     account: wallet.getScriptHashFromAddress(cosignerAddress),\n    //     scopes: tx.WitnessScope.Global,\n    //   });\n    // }\n\n    const transaction = new tx.Transaction({\n      validUntilBlock: currentHeight + 1,\n      script,\n      signers: invokeScript.signers,\n    });\n\n    transaction.networkFee = await DevWallet.calculateNetworkFee(\n      rpcClient,\n      transaction\n    );\n    const systemFee = await DevWallet.calculateSystemFee(\n      rpcClient,\n      transaction\n    );\n    transaction.systemFee = systemFee;\n    if (invokeScript.extraSystemFee) {\n      const fee = u.BigInteger.fromDecimal(\n        invokeScript.extraSystemFee,\n        8\n      ).toString();\n      transaction.systemFee = systemFee.add(parseFloat(fee));\n    }\n    //\n    // if (cosigner) {\n    //   transaction.sign(cosigner, version.network);\n    // }\n    /* Temporary hard coding to solve NeonJS ordering bug */\n    // if (\n    //   transaction.witnesses[0].scriptHash !== sender.scriptHash &&\n    //   signers.length > 1\n    // ) {\n    //   let sig1 = transaction.witnesses[0];\n    //   let sig2 = transaction.witnesses[1];\n    //   transaction.witnesses[1] = sig1;\n    //   transaction.witnesses[0] = sig2;\n    // }\n    return transaction;\n  };\n\n  static calculateNetworkFee = async (\n    rpcClient: rpc.RPCClient,\n    transaction: tx.Transaction\n  ): Promise<BigInteger> => {\n    const invokeFunctionResponse = await rpcClient.invokeFunction(\n      CONST.NATIVE_CONTRACT_HASH.PolicyContract,\n      \"getFeePerByte\"\n    );\n\n    if (invokeFunctionResponse.state !== \"HALT\") {\n      throw new Error(\n        invokeFunctionResponse.exception\n          ? invokeFunctionResponse.exception\n          : \"Failed\"\n      );\n    }\n\n    const feePerByte = u.BigInteger.fromNumber(\n      // @ts-ignore\n      invokeFunctionResponse.stack[0].value\n    );\n    // Account for witness size\n    const transactionByteSize = transaction.serialize().length / 2 + 109;\n    // Hardcoded. Running a witness is always the same cost for the basic account.\n    const witnessProcessingFee = u.BigInteger.fromNumber(\n      // In case of cosigner, check signer length check and mul the fee.\n      1000390 * (transaction.signers.length === 1 ? 1 : 3)\n    );\n\n    return feePerByte.mul(transactionByteSize).add(witnessProcessingFee);\n  };\n\n  static calculateSystemFee = async (\n    rpcClient: rpc.RPCClient,\n    transaction: tx.Transaction\n  ) => {\n    const invokeFunctionResponse = await rpcClient.invokeScript(\n      transaction.script,\n      transaction.signers\n    );\n    if (invokeFunctionResponse.state !== \"HALT\") {\n      throw new Error(\n        invokeFunctionResponse.exception\n          ? invokeFunctionResponse.exception\n          : \"Failed\"\n      );\n    }\n\n    return u.BigInteger.fromNumber(invokeFunctionResponse.gasconsumed);\n  };\n\n  static balanceCheck = async (\n    rpcClient: rpc.RPCClient,\n    sender: string,\n    systemFee: number,\n    networkFee: number,\n    transferScript?: sc.ContractCallJson\n  ): Promise<boolean> => {\n    const res = await rpcClient.getNep17Balances(sender);\n    let gasBalance = 0;\n    const requiredGas = systemFee + networkFee;\n    let transferTokenBalance = 0;\n\n    res.balance.map((item) => {\n      if (item.assethash.includes(GAS_SCRIPT_HASH)) {\n        gasBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n      }\n      if (\n        transferScript &&\n        transferScript.operation === \"transfer\" &&\n        item.assethash.includes(transferScript.scriptHash)\n      ) {\n        transferTokenBalance = u.Fixed8.fromRawNumber(item.amount).toNumber();\n      }\n    });\n\n    if (gasBalance < requiredGas) {\n      return false;\n    }\n\n    gasBalance = gasBalance - requiredGas;\n\n    if (transferScript && transferScript.operation === \"transfer\") {\n      const transferAmount = u.Fixed8.fromRawNumber(\n        // @ts-ignore\n        transferScript.args[2].value\n      ).toNumber();\n\n      if (transferScript.scriptHash === GAS_SCRIPT_HASH) {\n        if (gasBalance < transferAmount) {\n          return false;\n        }\n      } else {\n        if (transferTokenBalance < transferAmount) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n}\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/nft/helpers.ts",["706"],"import { u } from \"@cityofzion/neon-core\";\nimport { base64ToAddress, base64ToString } from \"../../../utils\";\n\n/* Parse properties from rpc. */\nexport const parseProperties = (stackItem) => {\n  const obj = {};\n  // return JSON.stringify(res, null, 2);\n  stackItem[0].value.map((item) => {\n    const key = u.base642utf8(item.key.value);\n    let value = \"\";\n\n    if (key === \"owner\") {\n      value = base64ToAddress(item.value.value);\n    } else {\n      if (item.value.type === \"Integer\") {\n        value = item.value.value;\n      } else {\n        value = base64ToString(item.value.value);\n      }\n    }\n    obj[key] = value;\n  });\n  return obj;\n};\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/farm/helpers.ts",["707"],"import { IFarmDepositRecord } from \"./interfaces\";\nimport { base64ToDate, base64ToFixed8, base64ToString } from \"../../../utils\";\n\nexport const parseDeposit = (\n  stackItem: any\n): IFarmDepositRecord | undefined => {\n  // TODO check if there no deposit\n  // if (!stackItem.value) return undefined;\n  return {\n    position: stackItem[0].value,\n    amount: stackItem[1].value,\n    lastClaimNo: stackItem[2].value,\n    createdAt: stackItem[3].value,\n  };\n};\n\nexport const parseClaimPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseClaim(stackItem[3].value),\n  };\n};\n\nexport const parseClaim = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      no: item.value[0].value,\n      from: item.value[1].value,\n      end: item.value[2].value,\n      GAS: base64ToFixed8(item.value[3].value),\n      FTW: base64ToFixed8(item.value[4].value),\n      createdAt: base64ToDate(item.value[5].value),\n    };\n  });\n};\n\nexport const parseSnapshotPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseSnapshotItem(stackItem[3].value),\n  };\n};\n\nconst parseSnapshotItem = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      no: item.value[0].value,\n      totalPositionPool: item.value[1].value, // NEO amount\n      totalNeo: item.value[2].value, // NEO amount\n      totalGas: base64ToFixed8(item.value[3].value),\n      range: base64ToFixed8(item.value[4].value),\n      winPosition: item.value[5].value,\n      createdAt: base64ToDate(item.value[6].value),\n    };\n  });\n};\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/index.tsx",["708"],"import React, { useEffect, useState } from \"react\";\nimport Pagination from \"bulma-pagination-react\";\nimport { useWallet } from \"../../../../../../packages/provider\";\nimport { TournamentContract } from \"../../../../../../packages/neo/contracts/ftw/tournament\";\nimport NFTDetailModal from \"./NFTDetailModal\";\nimport HistoryTable from \"./HistoryTable\";\nimport Replay from \"./Replay\";\nimport AfterTransactionSubmitted from \"../../../../../../packages/ui/AfterTransactionSubmitted\";\nimport Modal from \"../../../../../components/Modal\";\n\ninterface IHistoryProps {\n  arenaNo: string;\n}\nconst History = ({ arenaNo }: IHistoryProps) => {\n  const [claimTxid, setClaimTxid] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [nftModalActive, setNftModalActive] = useState();\n  const [replayModalActive, setReplayModalActive] = useState();\n  const [history, setHistory] = useState<any>();\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n  const onNFTModalActive = (obj) => setNftModalActive(obj);\n  const onReplayModalActive = (obj) => setReplayModalActive(obj);\n\n  useEffect(() => {\n    async function fetchHistory() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new TournamentContract(network).history(\n          arenaNo,\n          page\n        );\n        setHistory(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchHistory();\n  }, [connectedWallet, network, page]);\n\n  let totalPages = 0;\n  if (history) {\n    const itemsPerPage = parseFloat(arenaNo) >= 64 ? 2 : 5;\n    totalPages = Math.ceil(history.totalItems / itemsPerPage);\n  }\n\n  return (\n    <div>\n      {isLoading ? (\n        <div>Loading..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <>\n          <div className=\"\">\n            {history.items && history.items.length > 0 ? (\n              history.items.map((game) => {\n                return (\n                  <HistoryTable\n                    key={game.gameNo}\n                    width={\"64px\"}\n                    height={\"64px\"}\n                    history={game}\n                    arenaNo={arenaNo}\n                    network={network}\n                    onClick={(obj) => {\n                      onNFTModalActive(obj);\n                    }}\n                    onReplay={() => onReplayModalActive(game)}\n                    onClaimed={setClaimTxid}\n                  />\n                );\n              })\n            ) : (\n              <div>Game hasn't been played</div>\n            )}\n            {totalPages > 1 && (\n              <div className=\"media\">\n                <div className=\"media-content\">\n                  <Pagination\n                    pages={totalPages}\n                    currentPage={page}\n                    onChange={(_page) => {\n                      if (page !== _page) {\n                        setPage(_page);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n\n      {nftModalActive && (\n        <NFTDetailModal\n          rune={nftModalActive}\n          onClose={() => setNftModalActive(undefined)}\n        />\n      )}\n\n      {replayModalActive && (\n        <Replay\n          arenaNo={arenaNo}\n          gameHistory={replayModalActive}\n          onClick={(obj) => {\n            onNFTModalActive(obj);\n          }}\n          onClose={() => setReplayModalActive(undefined)}\n        />\n      )}\n\n      {claimTxid && (\n        <Modal onClose={() => setClaimTxid(\"\")}>\n          <AfterTransactionSubmitted\n            txid={claimTxid}\n            network={network}\n            onSuccess={() => setClaimTxid(\"\")}\n            onError={() => setClaimTxid(\"\")}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default History;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/Replay.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/PlayerModal.tsx",["709","710","711","712"],"import React, { useEffect, useState } from \"react\";\nimport { IRuneMeta } from \"../../../../../../../packages/neo/contracts/ftw/nft/interfaces\";\nimport Modal from \"../../../../../../components/Modal\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport BetButton from \"../../../../components/BetButton\";\nimport LeaveButton from \"../../../../components/LeaveButton\";\nimport AfterTransactionSubmitted from \"../../../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { TournamentContract } from \"../../../../../../../packages/neo/contracts/ftw/tournament\";\nimport { toDecimal } from \"../../../../../../../packages/neo/utils\";\n\ninterface IPlayerModalProps {\n  arenaNo: string;\n  gameNo?: number;\n  player: IRuneMeta & { tokenId: string; gameOwner: string };\n  onClose: () => void;\n}\n\nconst PlayerModal = ({\n  arenaNo,\n  gameNo,\n  player,\n  onClose,\n}: IPlayerModalProps) => {\n  const [txid, setTxid] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n  const [status, setStatus] = useState({\n    totalBets: \"\",\n    userBets: \"\",\n  });\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    async function fetchContractStatus(_gameNo) {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new TournamentContract(network).getBetOnPlayer(\n          arenaNo,\n          _gameNo,\n          player.tokenId,\n          connectedWallet ? connectedWallet.account.address : undefined\n        );\n        setStatus(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (gameNo) {\n      fetchContractStatus(gameNo);\n    }\n  }, [gameNo, network]);\n  return (\n    <Modal onClose={onClose}>\n      <div>\n        {txid ? (\n          <AfterTransactionSubmitted\n            onSuccess={onClose}\n            onError={() => setTxid(\"\")}\n            txid={txid}\n            network={network}\n          />\n        ) : (\n          <div>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <img src={player.image} />\n              </div>\n              <div className=\"column\">\n                <div className=\"content\">\n                  <strong>Name</strong>\n                  <br />\n                  <p>{player.name}</p>\n                  <strong>Phase</strong>\n                  <p>{player.phase}</p>\n                  <strong>Luck</strong>\n                  <p>{player.luck}</p>\n                  <strong>Owner</strong>\n                  <p>{player.gameOwner}</p>\n                  <strong>Current support amount</strong>\n                  <p>{toDecimal(status.totalBets)}</p>\n                  {connectedWallet && (\n                    <>\n                      <strong>My support amount</strong>\n                      <p>{toDecimal(status.userBets)}</p>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"columns\">\n              <div className=\"column\">\n                <BetButton\n                  setTxid={setTxid}\n                  arenaNo={arenaNo}\n                  tokenId={player.tokenId}\n                />\n              </div>\n              <div className=\"column\">\n                <button\n                  onClick={onClose}\n                  className=\"button is-light is-fullwidth\"\n                >\n                  Close\n                </button>\n              </div>\n              {connectedWallet &&\n              connectedWallet.account.address === player.gameOwner ? (\n                <div className=\"column\">\n                  <LeaveButton\n                    setTxid={setTxid}\n                    arenaNo={arenaNo}\n                    tokenId={player.tokenId}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default PlayerModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/NFTListModal.tsx",["713"],"import React, { useEffect, useState } from \"react\";\nimport Modal from \"../../../../../../components/Modal\";\nimport { NFTContract } from \"../../../../../../../packages/neo/contracts\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport AfterTransactionSubmitted from \"../../../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { TournamentContract } from \"../../../../../../../packages/neo/contracts/ftw/tournament\";\nimport { toast } from \"react-hot-toast\";\n\ninterface INFTListModalModal {\n  arenaNo: string;\n  onClose: () => void;\n}\nconst NFTListModal = ({ arenaNo, onClose }: INFTListModalModal) => {\n  const [txid, setTxid] = useState(\"\");\n  const [tokens, setTokens] = useState<any>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network, addPendingTransaction } = useWallet();\n\n  const onRegister = async (tokenId: string) => {\n    if (connectedWallet) {\n      try {\n        const res = await new TournamentContract(network).register(\n          connectedWallet,\n          tokenId,\n          arenaNo\n        );\n        addPendingTransaction(res);\n        setTxid(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new NFTContract(network).getTokensOf(\n          connectedWallet?.account.address\n        );\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (connectedWallet) {\n      fetchContractStatus();\n    }\n  }, [connectedWallet, network]);\n  return (\n    <Modal onClose={onClose}>\n      <>\n        {txid ? (\n          <AfterTransactionSubmitted\n            txid={txid}\n            network={network}\n            onSuccess={onClose}\n            onError={() => setTxid(\"\")}\n          />\n        ) : (\n          <div>\n            <div className=\"block\">\n              <h5 className=\"title is-5\">Select a NFT to send to the ARENA</h5>\n            </div>\n            <div>\n              {isLoading ? (\n                <div>Loading..</div>\n              ) : error ? (\n                <div>{error}</div>\n              ) : tokens.length > 0 ? (\n                <div\n                  style={{\n                    flexFlow: \"wrap\",\n                  }}\n                  className=\"is-flex\"\n                >\n                  {tokens.map((token) => {\n                    return (\n                      <figure\n                        key={token.tokenId}\n                        // style={{ width, height }}\n                        className=\"image is-64x64\"\n                        onClick={() => onRegister(token.tokenId)}\n                      >\n                        <img src={token.image} />\n                      </figure>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div>You don't have runes</div>\n              )}\n            </div>\n          </div>\n        )}\n      </>\n    </Modal>\n  );\n};\n\nexport default NFTListModal;\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/index.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/TournamentTree.tsx",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/tournament/helpers.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/helpers.ts",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/ArenaRegisterButton.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/PlayButton.tsx",["714"],"import React from \"react\";\nimport { TournamentContract } from \"../../../../packages/neo/contracts/ftw/tournament\";\nimport toast from \"react-hot-toast\";\nimport { useWallet } from \"../../../../packages/provider\";\nimport { TOURNAMENT_TIME_PADDING } from \"../../../../packages/neo/contracts/ftw/tournament/consts\";\n\ninterface IPlayButtonProps {\n  arenaNo: string;\n  onSubmitted: (txid: string) => void;\n  status?: {\n    prize: number;\n    gameNo: number;\n    previousChampWallet?: string;\n    timeElapsedFromPreviousGame?: string;\n  };\n}\nconst PlayButton = ({ arenaNo, onSubmitted, status }: IPlayButtonProps) => {\n  const { connectedWallet, network, addPendingTransaction } = useWallet();\n  const onPlay = async () => {\n    if (connectedWallet && status) {\n      // try {\n      //   const res = await new TournamentContract(network).play(\n      //     connectedWallet,\n      //     arenaNo\n      //   );\n      //   addPendingTransaction(res);\n      //   onSubmitted(res);\n      // } catch (e: any) {\n      //   toast.error(e.message);\n      // }\n      // const timeLeft =\n      //   TOURNAMENT_TIME_PADDING -\n      //   parseFloat(status.timeElapsedFromPreviousGame);\n      // if (timeLeft <= 0) {\n      try {\n        const res = await new TournamentContract(network).play(\n          connectedWallet,\n          arenaNo\n        );\n        addPendingTransaction(res);\n        onSubmitted(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n      // } else {\n      // }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n  return (\n    <button className=\"button is-primary press-font\" onClick={onPlay}>\n      Start\n    </button>\n  );\n};\n\nexport default PlayButton;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/NFTDetailModal.tsx",["715"],"import React from \"react\";\nimport { IRuneMeta } from \"../../../../../../packages/neo/contracts/ftw/nft/interfaces\";\nimport Modal from \"../../../../../components/Modal\";\n\ninterface IPlayerModalProps {\n  rune: IRuneMeta;\n  onClose: () => void;\n}\nconst NFTDetailModal = ({ rune, onClose }: IPlayerModalProps) => {\n  return (\n    <Modal onClose={onClose}>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <img src={rune.image} />\n        </div>\n        <div className=\"column\">\n          <div className=\"content\">\n            <strong>Name</strong>\n            <br />\n            <p>{rune.name}</p>\n            <strong>Phase</strong>\n            <p>{rune.phase}</p>\n            <strong>Luck</strong>\n            <p>{rune.luck}</p>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default NFTDetailModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/History/HistoryTable.tsx",["716","717"],"import React, { useEffect, useState } from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaPlay } from \"react-icons/fa\";\nimport { NFTContract } from \"../../../../../../packages/neo/contracts\";\nimport { IRuneMeta } from \"../../../../../../packages/neo/contracts/ftw/nft/interfaces\";\nimport { INetworkType } from \"../../../../../../packages/neo/network\";\nimport { IHistoryGame } from \"../../../../../../packages/neo/contracts/ftw/tournament/interfaces\";\nimport ClaimButton from \"../../../components/ClaimButton\";\nimport { toDecimal } from \"../../../../../../packages/neo/utils\";\n\ninterface IDisplayRuneProps {\n  history: IHistoryGame;\n  arenaNo: string;\n  width: string;\n  height: string;\n  network: INetworkType;\n  onClick: (obj) => void;\n  onReplay: () => void;\n  onClaimed: (txid: string) => void;\n}\n\nconst HistoryTable = ({\n  history,\n  arenaNo,\n  width,\n  height,\n  network,\n  onClick,\n  onReplay,\n  onClaimed,\n}: IDisplayRuneProps) => {\n  const [token, setToken] = useState<IRuneMeta>();\n  useEffect(() => {\n    async function fetchContractStatus() {\n      try {\n        const res = await new NFTContract(network).getProperties(\n          history.champion\n        );\n        setToken(res);\n      } catch (e: any) {\n        // setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [history]);\n  if (!token) return <></>;\n  return (\n    <div className=\"media\">\n      <div className=\"media-left\">\n        {\" \"}\n        <figure\n          style={{ width, height }}\n          className=\"image rune\"\n          onClick={() => onClick(token)}\n        >\n          <img src={token.image} />\n        </figure>\n      </div>\n      <div className=\"media-content\">\n        <div className=\"content\">\n          Game #{history.gameNo}\n          <br />\n          Champ: {token.name} ({token.phase} / {token.luck})\n          <br />\n          {history.champOwner && (\n            <>\n              Champ address: {history.champOwner} <br />\n            </>\n          )}\n          Total supports: {toDecimal(history.totalBets)}GAS\n          <br />\n          Rollover: {toDecimal(history.rollover)}GAS\n          <br />\n          Total supports on champ: {toDecimal(history.betsOnChampion)}GAS\n          <br />\n          Champ reward: {toDecimal(history.championPrize)}GAS\n          <br />\n          Operation reward: {toDecimal(history.fee)}GAS\n        </div>\n        <button onClick={() => onReplay()} className=\"button is-black is-small\">\n          <span className=\"icon\">\n            <FaPlay />\n          </span>\n          <span>Replay</span>\n        </button>\n      </div>\n      <div className=\"media-right\">\n        <div>\n          <ClaimButton\n            onClaimed={onClaimed}\n            arenaNo={arenaNo}\n            history={history}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryTable;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/DisplayRuneWithProperties.tsx",["718","719"],"import React, { useEffect, useState } from \"react\";\nimport { INetworkType } from \"../../../../packages/neo/network\";\nimport { IRuneMeta } from \"../../../../packages/neo/contracts/ftw/nft/interfaces\";\nimport { RestAPI } from \"../../../../packages/neo/api\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaStar } from \"react-icons/fa\";\n\ninterface IDisplayRuneProps {\n  width: string;\n  height: string;\n  tokenId: string;\n  network: INetworkType;\n  isOwner?: boolean;\n  onClick: (obj) => void;\n}\n\nconst DisplayRuneWithProperties = ({\n  width,\n  height,\n  tokenId,\n  network,\n  isOwner,\n  onClick,\n}: IDisplayRuneProps) => {\n  const [token, setToken] = useState<IRuneMeta>();\n  useEffect(() => {\n    async function fetchRune() {\n      try {\n        const res = await new RestAPI(network).getRune(tokenId);\n        setToken(res);\n        // LEAVE TO SWITCH IN CASE DB ERROR\n        // const res = await new NFTContract(network).getProperties(tokenId);\n        // setToken(res);\n      } catch (e: any) {\n        // setError(e.message);\n      }\n    }\n    fetchRune();\n  }, [tokenId]);\n  if (!token) return <></>;\n  return (\n    <figure\n      style={{ width, height }}\n      className=\"image rune is-relative\"\n      onClick={() => onClick({ ...token, tokenId })}\n    >\n      <img src={token.image} />\n      {isOwner && (\n        <FaStar\n          style={{ position: \"absolute\", top: \"2px\", left: \"3px\" }}\n          className=\"has-text-warning\"\n        />\n      )}\n    </figure>\n  );\n};\n\nexport default DisplayRuneWithProperties;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/ClaimButton.tsx",["720"],"import React, { useEffect, useState } from \"react\";\nimport { useWallet } from \"../../../../packages/provider\";\nimport { TournamentContract } from \"../../../../packages/neo/contracts/ftw/tournament\";\nimport toast from \"react-hot-toast\";\nimport { IHistoryGame } from \"../../../../packages/neo/contracts/ftw/tournament/interfaces\";\nimport { calculateClaimableAmount } from \"../../../../packages/neo/contracts/ftw/tournament/helpers\";\n\ninterface IClaimButtonProps {\n  arenaNo: string;\n  history: IHistoryGame;\n  onClaimed: (txid: string) => void;\n}\nconst ClaimButton = ({ arenaNo, history, onClaimed }: IClaimButtonProps) => {\n  const [status, setStatus] = useState<any>({\n    betAmount: 0,\n    isClaimed: false,\n  });\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network, addPendingTransaction } = useWallet();\n  const onClaim = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new TournamentContract(network).claim(\n          connectedWallet,\n          arenaNo,\n          history.gameNo\n        );\n        addPendingTransaction(res);\n        onClaimed(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n  useEffect(() => {\n    async function fetchBetAmount(address: string) {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new TournamentContract(network).getBetAmount(\n          arenaNo,\n          history.gameNo,\n          history.champion,\n          address\n        );\n        setStatus(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (connectedWallet) {\n      fetchBetAmount(connectedWallet.account.address);\n    }\n  }, [connectedWallet, network, history]);\n  if (!connectedWallet) return <></>;\n\tif (history.betsOnChampion === \"0\") return <></>;\n  if (!status.betAmount) return <></>;\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <>\n          {status.isClaimed ? (\n            <button disabled={true} className=\"button is-info is-fullwidth\">\n              Claimed\n            </button>\n          ) : (\n            <button className=\"button is-info is-fullwidth\" onClick={onClaim}>\n              Claim {calculateClaimableAmount(history, status.betAmount)} GAS\n            </button>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ClaimButton;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/Banner.tsx",["721"],"import React, { useState } from \"react\";\nimport { SMITH_PATH, SMITH_PATH_NEP11, TOURNAMENT_PATH } from \"../../../consts\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport NEP17FormModal from \"./NEP17FormModal\";\nimport NEP11FormModal from \"./NEP11FormModal\";\n\nconst Banner = () => {\n  const location = useLocation();\n  const [isNep11FormModalActive, setNep11FormModalActive] = useState(false);\n  const [isNep17FormModalActive, setNep17FormModalActive] = useState(false);\n  return (\n    <section className=\"hero is-white\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">Forthewin Smith</h1>\n          <p className=\"subtitle\">\n            Create your own NEP11 and NEP17 smart contracts without any codes\n          </p>\n          <br />\n          <div className=\"content\">\n            <h5>What is NEP17?</h5>\n            <p>Neo blockchain's token standard. Like ERC20 Shiba Inu.</p>\n            <button\n              onClick={() => setNep17FormModalActive(true)}\n              className=\"button is-primary\"\n            >\n              Create Token Contract\n            </button>\n          </div>\n\n          <div className=\"content\">\n            <h5>What is NEP11?</h5>\n            <p>Neo blockchain's NFT standard. Like ERC721 Cryptopunk NFT.</p>\n          </div>\n\n          <button\n            onClick={() => setNep11FormModalActive(true)}\n            className=\"button  is-primary is-outlined\"\n          >\n            Create NFT Contract\n          </button>\n        </div>\n      </div>\n      <div className=\"hero-foot\">\n        <nav className=\"tabs is-boxed is-fullwidth\">\n          <div className=\"container\">\n            <ul>\n              <li\n                className={location.pathname === SMITH_PATH ? \"is-active\" : \"\"}\n              >\n                <Link to={SMITH_PATH}>NEP17 Showcase</Link>\n              </li>\n              <li\n                className={\n                  location.pathname === SMITH_PATH_NEP11 ? \"is-active\" : \"\"\n                }\n              >\n                <Link to={SMITH_PATH_NEP11}>NEP11 Showcase</Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n      {isNep11FormModalActive && (\n        <NEP11FormModal onClose={() => setNep11FormModalActive(false)} />\n      )}\n      {isNep17FormModalActive && (\n        <NEP17FormModal onClose={() => setNep17FormModalActive(false)} />\n      )}\n    </section>\n  );\n};\n\nexport default Banner;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP17/index.tsx",["722"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { SmithContract } from \"../../../../../packages/neo/contracts/ftw/smith\";\nimport ContractCard from \"./ContractCard\";\n\nconst NEP17Smith = (props) => {\n  const [isLoading, setLoading] = useState(true);\n  const [status, setStatus] = useState<any>([]);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      try {\n        const res = await new SmithContract(network).getStatus();\n        setStatus(res);\n        setLoading(false);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet, network]);\n\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <div className=\"box\">\n          {status && status.records.items.length > 0 ? (\n            status.records.items.map((item, i) => (\n              <ContractCard key={\"contact17\" + i} data={item} />\n            ))\n          ) : (\n            <div></div>\n          )}\n        </div>\n      )}\n      {/*{isActionModalActive && (*/}\n      {/*  <ActionModal onClose={() => setActionModalActive(false)} />*/}\n      {/*)}*/}\n    </>\n  );\n};\n\nexport default NEP17Smith;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP17/ContractCard.tsx",["723"],"import React from \"react\";\nimport { ISmithRecord } from \"../../../../../packages/neo/contracts/ftw/smith/interfaces\";\nimport { MAINNET } from \"../../../../../packages/neo/consts\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { FaExternalLinkAlt } from \"react-icons/all\";\n\ninterface IContractCardProps {\n  data: ISmithRecord;\n}\nconst ContractCard = ({ data }: IContractCardProps) => {\n  const { network } = useWallet();\n  return (\n    <div className=\"media\">\n      <div className=\"media-content\">\n        <h5 className=\"title is-5\">\n          #{data.no} {data.name}\n        </h5>\n        <div className=\"content\">\n          <strong>Contract Hash</strong>\n          <br />\n          0x{data.contractHash}{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://${\n              network === MAINNET\n                ? \"explorer.onegate.space\"\n                : \"testnet.explorer.onegate.space\"\n            }/contractinfo/0x${data.contractHash}`}\n          >\n            <FaExternalLinkAlt />\n          </a>\n          <br />\n          <strong>Contract Owner</strong>\n          <br />\n          {data.contractOwner}\n        </div>\n        <div className=\"field is-grouped is-grouped-multiline\">\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag is-dark\">Symbol</span>\n              <span className=\"tag is-info\">{data.symbol}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag is-dark\">Decimals</span>\n              <span className=\"tag is-info\">{data.decimals}</span>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag is-dark\">Total supply</span>\n              <span className=\"tag is-info\">\n                {parseFloat(data.totalSupply).toLocaleString()}\n              </span>\n            </div>\n          </div>\n          <div className=\"control\">\n            <div className=\"tags has-addons\">\n              <span className=\"tag is-dark\">Author</span>\n              <span className=\"tag is-info\">{data.author}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContractCard;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP17FormModal.tsx",["724"],"import React, { useState } from \"react\";\nimport Modal from \"../../components/Modal\";\nimport { useWallet } from \"../../../packages/provider\";\nimport { toast } from \"react-hot-toast\";\nimport NumberFormat from \"react-number-format\";\nimport { SmithContract } from \"../../../packages/neo/contracts/ftw/smith\";\nimport { DEPLOY_FEE } from \"../../../packages/neo/contracts/ftw/smith/consts\";\nimport { detectEmojiInString } from \"./helpers\";\nimport AfterTransactionSubmitted from \"../../../packages/ui/AfterTransactionSubmitted\";\nimport { balanceCheck } from \"../../../packages/neo/utils\";\n\ninterface IActionModal {\n  onClose: () => void;\n}\n\nconst NEP17FormModal = ({ onClose }: IActionModal) => {\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [txid, setTxid] = useState<string>();\n  const [values, setValues] = useState({\n    name: \"\",\n    symbol: \"\",\n    decimals: \"8\",\n    totalSupply: \"\",\n    author: \"\",\n    description: \"\",\n  });\n  const handleValueChange = (key: string, val: string) => {\n    setValues({\n      ...values,\n      [key]: val,\n    });\n  };\n  const hasEmoji = detectEmojiInString(values) !== 0;\n  const onMint = async () => {\n    if (hasEmoji) {\n      toast.error(\n        \"Emoji is not supported yet. Please remove emojis and try again.\"\n      );\n    } else {\n      if (connectedWallet) {\n        if (balanceCheck(connectedWallet.balances, 20)) {\n          try {\n            const res = await new SmithContract(network).createNEP17(\n              connectedWallet,\n              values.name,\n              values.symbol,\n              values.decimals,\n              values.totalSupply,\n              values.author,\n              values.description\n            );\n            setTxid(res);\n          } catch (e: any) {\n            toast.error(e.message);\n          }\n        } else {\n          toast.error(\"You must have more than 20 GAS.\");\n        }\n      } else {\n        toast.error(\"Please connect wallet.\");\n      }\n    }\n  };\n  return (\n    <Modal onClose={onClose}>\n      {txid ? (\n        <AfterTransactionSubmitted\n          network={network}\n          txid={txid}\n          onSuccess={onClose}\n          onError={() => setTxid(\"\")}\n        />\n      ) : (\n        <>\n          <h1 className=\"title\">Create NEP17 Contract</h1>\n\n          <div className=\"field is-grouped is-grouped-multiline\">\n            <div className=\"control\">\n              <div className=\"tags has-addons\">\n                <span className=\"tag is-dark\">Deploy fee</span>\n                <span className=\"tag is-primary\">10 GAS</span>\n              </div>\n            </div>\n\n            <div className=\"control\">\n              <div className=\"tags has-addons\">\n                <span className=\"tag is-dark\">System fee</span>\n                <span className=\"tag is-primary\">\n                  {DEPLOY_FEE[network]} GAS\n                </span>\n              </div>\n            </div>\n          </div>\n          <small>NOTE: Please do not use EMOJI or Unicode.</small>\n          <hr />\n          <div className=\"field\">\n            <label className=\"label\">Token Name</label>\n            <div className=\"control\">\n              <input\n                value={values.name}\n                onChange={(e) => handleValueChange(\"name\", e.target.value)}\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <div className=\"field\">\n                <label className=\"label\">Token Symbol</label>\n                <div className=\"control\">\n                  <input\n                    value={values.symbol}\n                    onChange={(e) =>\n                      handleValueChange(\"symbol\", e.target.value)\n                    }\n                    className=\"input\"\n                    type=\"text\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"column\">\n              <div className=\"field\">\n                <label className=\"label\">Token Decimals</label>\n                <div className=\"control\">\n                  <NumberFormat\n                    decimalScale={0}\n                    inputMode=\"decimal\"\n                    className=\"input\"\n                    value={values.decimals}\n                    onValueChange={(value) => {\n                      handleValueChange(\"decimals\", value.value);\n                    }}\n                    max={18}\n                    allowNegative={false}\n                    allowLeadingZeros={false}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Total supply</label>\n            <div className=\"control\">\n              <NumberFormat\n                allowNegative={false}\n                decimalScale={0}\n                inputMode=\"decimal\"\n                className=\"input\"\n                value={values.totalSupply}\n                onValueChange={(value) => {\n                  handleValueChange(\"totalSupply\", value.value);\n                }}\n                allowLeadingZeros={false}\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Author</label>\n            <div className=\"control\">\n              <input\n                value={values.author}\n                onChange={(e) => handleValueChange(\"author\", e.target.value)}\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Description</label>\n            <div className=\"control\">\n              <input\n                value={values.description}\n                onChange={(e) =>\n                  handleValueChange(\"description\", e.target.value)\n                }\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <hr />\n          {hasEmoji && (\n            <div className=\"notification is-danger\">\n              Emoji is not supported yet.\n            </div>\n          )}\n          <button\n            onClick={onMint}\n            disabled={\n              !values.name ||\n              !values.symbol ||\n              !values.decimals ||\n              parseFloat(values.decimals) > 18 ||\n              parseFloat(values.totalSupply) < 1 ||\n              !values.author ||\n              !values.description ||\n              hasEmoji\n            }\n            className=\"button is-primary\"\n          >\n            Create\n          </button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default NEP17FormModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP11FormModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/index.tsx",["725"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { SmithContract } from \"../../../../../packages/neo/contracts/ftw/smith\";\nimport ContractCard from \"./ContractCard\";\nimport { ISmithNEP11RecordPaginate } from \"../../../../../packages/neo/contracts/ftw/smith/interfaces\";\n\nconst NEP11Smith = (props) => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState<ISmithNEP11RecordPaginate>();\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      try {\n        const res = await new SmithContract(network).getNEP11Records();\n        setData(res);\n        setLoading(false);\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [connectedWallet, network]);\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <div className=\"box\">\n          {data && data.items.length > 0 ? (\n            data.items.map((item, i) => (\n              <ContractCard key={\"contract\" + i} data={item} />\n            ))\n          ) : (\n            <div>No contracts to display</div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default NEP11Smith;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/ContractCard.tsx",["726"],"import React, { useState } from \"react\";\nimport { ISmithNEP11Record } from \"../../../../../packages/neo/contracts/ftw/smith/interfaces\";\nimport { MAINNET } from \"../../../../../packages/neo/consts\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport NEP11MintFormModal from \"../../NEP11MintFormModal\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaExternalLinkAlt } from \"react-icons/all\";\nimport Tokens from \"./Tokens\";\n\ninterface IContractCardProps {\n  data: ISmithNEP11Record;\n}\nconst ContractCard = ({ data }: IContractCardProps) => {\n  const { network, connectedWallet } = useWallet();\n  const [isMintModalActive, setMintModalActive] = useState(\"\");\n  return (\n    <div className=\"media\">\n      <div className=\"media-content\">\n        <h5 className=\"title is-5\">\n          #{data.no} {data.name}\n        </h5>\n        <div className=\"content\">\n          <strong>Contract Hash</strong>\n          <br />\n          0x{data.contractHash}{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://${\n              network === MAINNET\n                ? \"explorer.onegate.space\"\n                : \"testnet.explorer.onegate.space\"\n            }/NFTtokeninfo/0x${data.contractHash}`}\n          >\n            <FaExternalLinkAlt />\n          </a>\n          <br />\n          <strong>Contract Owner</strong>\n          <br />\n          {data.contractOwner}\n          <br />\n          <Tokens contractHash={data.contractHash} />\n        </div>\n      </div>\n      {connectedWallet &&\n        connectedWallet.account.address === data.contractOwner && (\n          <div className=\"media-right\">\n            <div className=\"block\">\n              <button\n                onClick={() => setMintModalActive(data.contractHash)}\n                className=\"button is-primary press-font\"\n              >\n                Mint\n              </button>\n            </div>\n          </div>\n        )}\n\n      {isMintModalActive && (\n        <NEP11MintFormModal\n          contractHash={isMintModalActive}\n          onClose={() => setMintModalActive(\"\")}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ContractCard;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/NEP11MintFormModal.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/Tokens.tsx",["727","728"],"import React, { useEffect, useState } from \"react\";\nimport { SmithContract } from \"../../../../../packages/neo/contracts/ftw/smith\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport DisplayNFT from \"./DisplayNFT\";\nimport _ from \"underscore\";\nimport { MAINNET } from \"../../../../../packages/neo/consts\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaExternalLinkAlt } from \"react-icons/all\";\nimport { wallet } from \"@cityofzion/neon-core\";\ninterface ITokensProps {\n  contractHash: string;\n}\nconst Tokens = ({ contractHash }: ITokensProps) => {\n  const [tokens, setTokens] = useState<number>(0);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { network } = useWallet();\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new SmithContract(network).totalSupply(contractHash);\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchContractStatus();\n  }, [contractHash, network]);\n  return (\n    <>\n      <strong>Supply</strong>\n      <br />\n      {isLoading ? (\n        <div>Loading..</div>\n      ) : error ? (\n        <div>{error}</div>\n      ) : (\n        <>\n          {tokens}\n          {tokens > 0 ? (\n            <>\n              <br />\n              <strong>Showcase</strong>\n              <div className=\"columns is-multiline is-mobile\">\n                {_.range(tokens > 12 ? 12 : tokens).map((i) => {\n                  const tokenId = i + 1;\n                  return (\n                    <div\n                      key={`token${i}`}\n                      className=\"column is-1-desktop is-3-mobile\"\n                    >\n                      <DisplayNFT\n                        network={network}\n                        contractHash={contractHash}\n                        tokenId={tokenId.toString()}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n              {tokens > 12 && (\n                <a\n                  className=\"button is-black\"\n                  target=\"_blank\"\n                  href={`https://${\n                    network === MAINNET\n                      ? \"explorer.onegate.space\"\n                      : \"testnet.explorer.onegate.space\"\n                  }/NFTtokeninfo/0x${contractHash}`}\n                >\n                  <span className=\"icon\">\n                    <FaExternalLinkAlt />\n                  </span>\n                  <span>Browse more</span>\n                </a>\n              )}\n            </>\n          ) : (\n            <div></div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Tokens;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Smith/scenes/NEP11/DisplayNFT.tsx",["729","730"],"import React, { useEffect, useState } from \"react\";\nimport { SmithContract } from \"../../../../../packages/neo/contracts/ftw/smith\";\nimport { INetworkType } from \"../../../../../packages/neo/network\";\n\ninterface IDisplayRuneProps {\n  contractHash: string;\n  tokenId: string;\n  network: INetworkType;\n}\n\nconst DisplayRune = ({ contractHash, tokenId, network }: IDisplayRuneProps) => {\n  const [token, setToken] = useState<any>();\n  useEffect(() => {\n    async function fetchContractStatus() {\n      try {\n        const res = await new SmithContract(network).getProperties(\n          contractHash,\n          tokenId\n        );\n        setToken(res);\n      } catch (e: any) {\n        // setError(e.message);\n      }\n    }\n    fetchContractStatus();\n  }, [tokenId]);\n  if (!token) return <></>;\n  return <img width=\"100%\" height=\"100%\" src={token.image} />;\n};\n\nexport default DisplayRune;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/LeaveButton.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/components/BetButton.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Smith/helpers.ts",[],"/Users/ed/Projects/FTW/client/src/packages/ui/AfterTransactionSubmitted/index.tsx",["731","732"],"import React, { useEffect, useState } from \"react\";\nimport { INetworkType, Network } from \"../../neo/network\";\nimport RuneLoading from \"./RuneLoading\";\nimport CheckMark from \"../../../ui/pages/Tournament/scenes/Arena/Players/components/CheckMark\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaExclamationCircle } from \"react-icons/all\";\nimport { TESTNET } from \"../../neo/consts\";\n\ninterface IAfterTransactionSubmittedProps {\n  txid: string;\n  network: INetworkType;\n  onSuccess: () => void;\n  onError: () => void;\n}\nconst AfterTransactionSubmitted = ({\n  txid,\n  network,\n  onSuccess,\n  onError,\n}: IAfterTransactionSubmittedProps) => {\n  const [isDone, setDone] = useState(false);\n  const [hasError, setError] = useState(\"\");\n\n  useEffect(() => {\n    async function checkTxid() {\n      try {\n        const res = await Network.getRawTx(txid, network);\n        if (res) {\n          setDone(true);\n        }\n      } catch (e: any) {\n        setError(e.message);\n      }\n    }\n    checkTxid();\n  }, [txid]);\n\n  return (\n    <div>\n      <div\n        style={{\n          width: \"200px\",\n          height: \"200px\",\n          margin: \"auto\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n        className=\"\"\n      >\n        {hasError ? (\n          <FaExclamationCircle size={90} className=\"has-text-danger\" />\n        ) : isDone ? (\n          <CheckMark />\n        ) : (\n          <RuneLoading />\n        )}\n      </div>\n      <div className=\"has-background  has-text-centered mt-5\">\n        {hasError ? (\n          <div style={{ marginTop: \"-40px\" }}>\n            <h1 className=\"title is-5\">Error occurred</h1>\n            <p className=\"subtitle is-7\">{hasError}</p>\n            <button onClick={onError} className=\"button is-black\">\n              Close\n            </button>\n          </div>\n        ) : isDone ? (\n          <div style={{ marginTop: \"-40px\" }}>\n            <h1 className=\"title is-5\">Submitted</h1>\n            <p className=\"subtitle is-7\">Your transaction accepted</p>\n            <div className=\"block\">\n              <a\n                target=\"_blank\"\n                href={`https://${\n                  network === TESTNET ? \"testnet.\" : \"\"\n                }explorer.onegate.space/transactionInfo/${txid}`}\n              >\n                View txid on explorer\n              </a>\n            </div>\n            <div className=\"block\">\n              <button onClick={onSuccess} className=\"button is-black\">\n                Close\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <h1 className=\"title is-5\">Submitting..</h1>\n            <p className=\"subtitle is-7\">\n              Please wait until your transaction accepted\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AfterTransactionSubmitted;\n","/Users/ed/Projects/FTW/client/src/packages/ui/AfterTransactionSubmitted/RuneLoading.tsx",["733","734","735"],"import React, { useEffect, useState } from \"react\";\nimport _ from \"underscore\";\nconst getColors = () => _.range(18).map((i) => Math.floor(Math.random() * 256));\nconst RuneLoading = () => {\n\tconst [colors, setColors] = useState(getColors());\n  const [bg, setBg] = useState(\"black\");\n  const [dot1, setDot1] = useState(\"black\");\n  const [dot2, setDot2] = useState(\"black\");\n  const [dot3, setDot3] = useState(\"black\");\n  const [dot4, setDot4] = useState(\"black\");\n  const [body, setBody] = useState(\"black\");\n  const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\"><path fill=\"${bg}\" d=\"M0 0h512v512H0z\"/><path fill=\"${dot4}\" d=\"M293 378h81v-81h-81Zm0 0\"/><path fill=\"${body}\" d=\"M374 142H138v314h85V226h151Zm0 0\"/><path fill=\"${dot3}\" d=\"M436 56h-86v86h86Zm0 0\"/><path fill=\"${dot2}\" d=\"M300 142V56h-87v86Zm0 0\"/><path fill=\"${dot1}\" d=\"M162 142V56H76v86Zm0 0\"/></svg>`;\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      setBody(\"white\");\n    }, 1000);\n    timer = setTimeout(() => {\n      setDot1(\"white\");\n    }, 2000);\n    timer = setTimeout(() => {\n      setDot2(\"white\");\n    }, 3000);\n    timer = setTimeout(() => {\n      setDot3(\"white\");\n    }, 4000);\n    timer = setTimeout(() => {\n      setDot4(\"white\");\n    }, 5000);\n    timer = setTimeout(() => {\n      setBg(\"rgb(\" + colors[0] + \",\" + colors[1] + \",\" + colors[2] + \")\");\n    }, 6000);\n    timer = setTimeout(() => {\n      setBody(\"rgb(\" + colors[3] + \",\" + colors[4] + \",\" + colors[5] + \")\");\n    }, 7000);\n    timer = setTimeout(() => {\n      setDot1(\"rgb(\" + colors[6] + \",\" + colors[7] + \",\" + colors[8] + \")\");\n    }, 8000);\n    timer = setTimeout(() => {\n      setDot2(\"rgb(\" + colors[9] + \",\" + colors[10] + \",\" + colors[11] + \")\");\n    }, 9000);\n    timer = setTimeout(() => {\n      setDot3(\"rgb(\" + colors[12] + \",\" + colors[13] + \",\" + colors[14] + \")\");\n    }, 10000);\n    timer = setTimeout(() => {\n      setDot4(\"rgb(\" + colors[15] + \",\" + colors[16] + \",\" + colors[17] + \")\");\n    }, 11000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <img width=\"100%\" height=\"100%\" src={`data:image/svg+xml;utf8,${svg}`} />\n  );\n};\n\nexport default RuneLoading;\n","/Users/ed/Projects/FTW/client/src/ui/components/RandomRune.tsx",["736","737"],"import React, { useEffect, useState } from \"react\";\nimport _ from \"underscore\";\nconst getColors = () => _.range(18).map((i) => Math.floor(Math.random() * 256));\n\ninterface IDisplayRandomRuneProps {\n  width: string;\n  height: string;\n  isActive?: boolean;\n}\nconst DisplayRandomRune = ({\n  width,\n  height,\n  isActive,\n}: IDisplayRandomRuneProps) => {\n  const [colors, setColors] = useState(getColors());\n  const bg = \"rgb(\" + colors[0] + \",\" + colors[6] + \",\" + colors[12] + \")\";\n  const dot1 = \"rgb(\" + colors[1] + \",\" + colors[7] + \",\" + colors[13] + \")\";\n  const dot2 = \"rgb(\" + colors[2] + \",\" + colors[8] + \",\" + colors[14] + \")\";\n  const dot3 = \"rgb(\" + colors[3] + \",\" + colors[9] + \",\" + colors[15] + \")\";\n  const dot4 = \"rgb(\" + colors[4] + \",\" + colors[10] + \",\" + colors[16] + \")\";\n  const body = \"rgb(\" + colors[5] + \",\" + colors[11] + \",\" + colors[17] + \")\";\n  const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\"><path fill=\"${bg}\" d=\"M0 0h512v512H0z\"/><path fill=\"${dot4}\" d=\"M293 378h81v-81h-81Zm0 0\"/><path fill=\"${body}\" d=\"M374 142H138v314h85V226h151Zm0 0\"/><path fill=\"${dot3}\" d=\"M436 56h-86v86h86Zm0 0\"/><path fill=\"${dot2}\" d=\"M300 142V56h-87v86Zm0 0\"/><path fill=\"${dot1}\" d=\"M162 142V56H76v86Zm0 0\"/></svg>`;\n  useEffect(() => {\n    if (isActive) {\n      const interval = setInterval(() => {\n        setColors(getColors());\n      }, 2000);\n      return () => clearInterval(interval);\n    }\n  }, []);\n\n  return (\n    <img style={{ width, height }} src={`data:image/svg+xml;utf8,${svg}`} />\n  );\n};\n\nexport default DisplayRandomRune;\n",["738","739"],"/Users/ed/Projects/FTW/client/src/ui/pages/Tournament/scenes/Arena/Players/components/CheckMark.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/NavSwitch/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/Input/index.tsx",["740","741","742","743"],"import React, { useEffect, useState } from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaAngleDown, FaQuestionCircle } from \"react-icons/all\";\nimport NumberFormat from \"react-number-format\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { ASSET_LIST } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport { SwapContract } from \"../../../../../packages/neo/contracts\";\n\ninterface IInputProps {\n  contractHash: string;\n  symbol: string;\n  val: string;\n  heading?: string;\n  isLoading?: boolean;\n  setValue: (val: string, e: any) => void;\n  onClickAsset: () => void;\n  isReadOnly?: boolean;\n  userBalance?: number;\n}\nconst Input = ({\n  contractHash,\n  symbol,\n  val,\n  heading,\n  setValue,\n  onClickAsset,\n  isLoading,\n  isReadOnly,\n  userBalance,\n}: IInputProps) => {\n  const { network } = useWallet();\n  const logo = ASSET_LIST[network][contractHash]\n    ? ASSET_LIST[network][contractHash].logo\n    : undefined;\n  return (\n    <div className=\"\">\n      <div className=\"columns\">\n        <div className=\"column is-narrow\">\n          <div style={{ width: \"150px\" }}>\n            <div\n              className=\"media\"\n              style={{ alignItems: \"center\", display: \"flex\" }}\n            >\n              <div className=\"media-left\">\n                <div\n                  onClick={onClickAsset}\n                  style={{\n                    width: \"50px\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                  className=\"image is-clickable is-flex\"\n                >\n                  {logo ? <img src={logo} /> : <FaQuestionCircle size={35} />}\n                </div>\n              </div>\n              <div\n                onClick={onClickAsset}\n                className=\"media-content is-clickable\"\n              >\n                {heading && <p className=\"heading\">{heading}</p>}\n                <div style={{ alignItems: \"center\", display: \"flex\" }}>\n                  <span className=\"has-text-weight-bold\">\n                    {symbol ? symbol : \"Select\"}\n                  </span>\n                  <span className=\"icon\">\n                    <FaAngleDown />\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column\">\n          <div className={`control ${isLoading ? \"is-loading\" : \"\"}`}>\n            <NumberFormat\n              readOnly={isReadOnly}\n              // ref={this.props, inputRef}\n              // decimalScale={0}\n              inputMode=\"decimal\"\n              className=\"input\"\n              value={val}\n              onValueChange={(value, e) => {\n                if (e.source === \"event\") {\n                  setValue(value.value, e.event);\n                }\n              }}\n              thousandSeparator={true}\n              suffix={\" \" + symbol}\n              allowLeadingZeros={false}\n              // format={(val) => {} }\n            />\n            {userBalance ? (\n              <div className=\"level is-mobile mt-1\">\n                <div className=\"level-left\">\n                  <small className=\"is-size-7\">\n                    <div className=\"level-item\">Your balance</div>\n                  </small>\n                </div>\n\n                <div className=\"level-right\">\n                  <div className=\"level-item\">\n                    <small className=\"is-size-7\">\n                      {userBalance} {symbol}\n                    </small>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div></div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Swap/index.tsx",["744","745","746"],"import React, { useEffect, useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport {\n  FTW_SCRIPT_HASH,\n  SwapContract,\n} from \"../../../../../packages/neo/contracts\";\nimport { toast } from \"react-hot-toast\";\nimport Input from \"../../components/Input\";\nimport AssetListModal from \"../../components/AssetListModal\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaAngleLeft, FaExchangeAlt } from \"react-icons/all\";\nimport { ASSET_LIST } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport Modal from \"../../../../components/Modal\";\nimport AfterTransactionSubmitted from \"../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { SWAP_PATH, SWAP_PATH_LIQUIDITY } from \"../../../../../consts\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport queryString from \"query-string\";\nimport { LocalStorage } from \"../../../../../packages/neo/local-storage\";\nimport PairSelect from \"../../components/PairSelect\";\nimport { IPairInfo } from \"../../../../../packages/neo/contracts/ftw/swap/interfaces\";\n\nconst Swap = () => {\n  const location = useLocation();\n  const params = queryString.parse(location.search);\n\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [isAssetChangeModalActive, setAssetChangeModalActive] = useState<\n    \"A\" | \"B\" | \"\"\n  >(\"\");\n  // Temporary disabled\n  // const cachedTokenA = LocalStorage.getSwapTokenA();\n  // const cachedTokenB = LocalStorage.getSwapTokenB();\n\n  const [tokenA, setTokenA] = useState<any>(\n    params.tokenA ? params.tokenA : undefined\n  );\n  const [tokenB, setTokenB] = useState<any>(\n    params.tokenB ? params.tokenB : undefined\n  );\n  const [symbolA, setSymbolA] = useState<any>(\n    params.symbolA ? params.symbolA : undefined\n  );\n  const [symbolB, setSymbolB] = useState<any>(\n    params.symbolB ? params.symbolB : undefined\n  );\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const [data, setData] = useState<IPairInfo | undefined>();\n  const [isPairLoading, setPairLoading] = useState(false);\n  const [txid, setTxid] = useState(\"\");\n  const onAssetChange = (type: \"A\" | \"B\" | \"\") => {\n    // Temporary disable\n    // setAssetChangeModalActive(type);\n  };\n\n  const onAssetClick = (assetHash) => {\n    if (isAssetChangeModalActive === \"A\") {\n      LocalStorage.setSwapTokenA(assetHash);\n      setTokenA(assetHash);\n      if (tokenB) {\n        loadPair(assetHash, tokenB);\n      }\n    } else {\n      LocalStorage.setSwapTokenB(assetHash);\n      setTokenB(assetHash);\n      if (tokenA) {\n        loadPair(tokenA, assetHash);\n      }\n    }\n    setAssetChangeModalActive(\"\");\n  };\n\n  const onTokenAAmountChange = async (val: string) => {\n    setAmountA(val);\n    if (tokenB) {\n      const res = await new SwapContract(network).getEstimate(\n        tokenA,\n        tokenB,\n        tokenA,\n        val\n      );\n      setAmountB(res as any);\n    }\n  };\n\n  const onSuccess = () => {\n    setAmountA(\"0\");\n    setAmountB(\"0\");\n    setTxid(\"\");\n  };\n\n  const onPairSelect = (pair: { tokenA: string; tokenB: string }) => {\n    loadPair(pair.tokenA, pair.tokenB);\n    setTokenA(pair.tokenA);\n    setTokenB(pair.tokenB);\n  };\n\n  const onSwap = async () => {\n    if (connectedWallet) {\n      if (tokenA && tokenB && amountA && amountB) {\n        try {\n          const res = await new SwapContract(network).swap(\n            connectedWallet,\n            tokenA,\n            amountA,\n            tokenB,\n            amountB\n          );\n          setTxid(res);\n        } catch (e: any) {\n          toast.error(e.description ? e.description : e.message);\n        }\n      }\n    } else {\n      toast.error(\"Please connect wallet\");\n    }\n  };\n  const onSwitch = async () => {\n    setTokenB(tokenA);\n    setTokenA(tokenB ? tokenB : \"\");\n    setAmountB(amountA);\n    setAmountA(amountB);\n    setSymbolA(symbolB);\n    setSymbolB(symbolA);\n    if (tokenB && amountB && amountB !== \"0\" && tokenA) {\n      const estimated = await new SwapContract(network).getEstimate(\n        tokenB,\n        tokenA,\n        tokenB,\n        amountB\n      );\n      setTokenB(tokenA);\n      setTokenA(tokenB ? tokenB : \"\");\n      setAmountA(amountB);\n      setAmountB(estimated ? estimated.toString() : \"\");\n    } else {\n      setTokenB(tokenA);\n      setTokenA(tokenB ? tokenB : \"\");\n      setAmountB(amountA);\n      setAmountA(amountB);\n    }\n  };\n\n  const loadPair = async (A, B) => {\n    setPairLoading(true);\n    const res = await new SwapContract(network).getPair(A, B, connectedWallet);\n    setData(res);\n    setPairLoading(false);\n    if (amountA && res.pair[tokenA] !== 0) {\n      const estimated = await new SwapContract(network).getEstimate(\n        A,\n        B,\n        A,\n        amountA\n      );\n      // @ts-ignore\n      // const estimated = getEstimate(amountA, res[A], res[B]);\n      setAmountB(estimated ? estimated.toString() : \"\");\n    } else {\n      setAmountB(\"\");\n    }\n  };\n\n  useEffect(() => {\n    if (params.tokenA && params.tokenB) {\n      loadPair(params.tokenA, params.tokenB);\n    }\n  }, [location]);\n\n  const noLiquidity =\n    data && data.pair[tokenA] === 0 && data.pair[tokenB] === 0;\n\n  const priceImpact =\n    data && amountB ? (parseFloat(amountB) / data.pair[tokenB]) * 100 : 0;\n  console.log(priceImpact);\n  return (\n    <div>\n      <Link className=\"button is-white\" to={SWAP_PATH}>\n        <span className=\"icon\">\n          <FaAngleLeft />\n        </span>\n        <span>Pools</span>\n      </Link>\n      <hr />\n      <>\n        {noLiquidity && (\n          <div className=\"notification is-info\">\n            No liquidity with the pairs. Provide liquidity and earn fees.\n            <br />\n            <br />\n            <Link className=\"button is-small is-light\" to={SWAP_PATH_LIQUIDITY}>\n              Go to liquidity page\n            </Link>\n          </div>\n        )}\n\n        {tokenA && tokenB ? (\n          <>\n            <Input\n              contractHash={tokenA}\n              symbol={symbolA}\n              heading=\"Swap From\"\n              onClickAsset={() => onAssetChange(\"A\")}\n              val={amountA}\n              setValue={(val, e) => onTokenAAmountChange(val)}\n              userBalance={\n                connectedWallet && data ? data.balances[tokenA] : undefined\n              }\n            />\n            <div className=\"pt-3 pb-3\">\n              <button onClick={onSwitch} className=\"button is-white\">\n                <FaExchangeAlt />\n              </button>\n            </div>\n            <Input\n              contractHash={tokenB}\n              symbol={symbolB}\n              isReadOnly={true}\n              heading=\"Swap To\"\n              isLoading={isPairLoading}\n              onClickAsset={() => {\n                onAssetChange(\"B\");\n              }}\n              val={amountB}\n              // setValue={(val, e) => onTokenAAmountChange(\"B\", val, e)}\n              setValue={(val, e) => {\n                return false;\n              }}\n              userBalance={\n                connectedWallet && data ? data.balances[tokenB] : undefined\n              }\n            />\n            {connectedWallet ? (\n              tokenA && tokenB && amountA && amountB ? (\n                <>\n                  {/*<div className=\"box\">*/}\n                  {/*  {`${tokenBofA} ${ASSET_LIST[tokenB].symbol} per ${ASSET_LIST[tokenA].symbol}`}*/}\n                  {/*  /!*<br />*!/*/}\n                  {/*  /!*{`${tokenAofB} ${ASSET_LIST[tokenA].symbol} per ${ASSET_LIST[tokenB].symbol}`}*!/*/}\n                  {/*</div>*/}\n                  <hr />\n                  <button\n                    disabled={\n                      (data && data.balances[tokenA] < parseFloat(amountA)) ||\n                      (data && data.pair[tokenB] < parseFloat(amountB)) ||\n                      priceImpact > 10\n                    }\n                    onClick={onSwap}\n                    className={`button is-fullwidth is-primary ${\n                      priceImpact > 10 ? \"is-danger\" : \"\"\n                    }`}\n                  >\n                    {priceImpact > 10 ? \"Price impact is too high\" : \"Swap\"}\n                  </button>\n                </>\n              ) : (\n                <div />\n              )\n            ) : (\n              <>\n                <hr />\n                <button\n                  onClick={openWalletModal}\n                  className=\"button is-fullwidth is-primary\"\n                >\n                  Connect wallet\n                </button>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <label className=\"label\">Select a pair</label>\n            <PairSelect onSelect={onPairSelect} />\n          </>\n        )}\n      </>\n\n      {txid && (\n        <Modal onClose={() => setTxid(\"\")}>\n          <AfterTransactionSubmitted\n            txid={txid}\n            network={network}\n            onSuccess={onSuccess}\n            onError={() => setTxid(\"\")}\n          />\n        </Modal>\n      )}\n\n      {isAssetChangeModalActive && (\n        <AssetListModal\n          tokenA={tokenA}\n          tokenB={tokenB}\n          onAssetClick={onAssetClick}\n          onClose={() => setAssetChangeModalActive(\"\")}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Swap;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Liquidity/index.tsx",["747"],"import React, { useEffect, useState } from \"react\";\nimport Input from \"../../components/Input\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { SwapContract } from \"../../../../../packages/neo/contracts\";\nimport AssetListModal from \"../../components/AssetListModal\";\nimport { toast } from \"react-hot-toast\";\nimport { getEstimate } from \"../../../../../packages/neo/contracts/ftw/swap/helpers\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaExchangeAlt } from \"react-icons/all\";\nimport Modal from \"../../../../components/Modal\";\nimport AfterTransactionSubmitted from \"../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { useLocation } from \"react-router-dom\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport queryString from \"query-string\";\n\nconst Liquidity = (props) => {\n  const location = useLocation();\n  const params = queryString.parse(location.search);\n  const isNewPoolMode = !params.tokenA && !params.tokenBv;\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [isAssetChangeModalActive, setAssetChangeModalActive] = useState<\n    \"A\" | \"B\" | \"\"\n  >(\"\");\n\n  const [tokenA, setTokenA] = useState<any>(\"\");\n  const [tokenB, setTokenB] = useState<any>(\"\");\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const [symbolA, setSymbolA] = useState(\"\");\n  const [symbolB, setSymbolB] = useState(\"\");\n  const [reserve, setReserve] = useState<any>();\n  const [isPairLoading, setPairLoading] = useState(false);\n  const [txid, setTxid] = useState(\"\");\n\n  const onAssetChange = (type: \"A\" | \"B\" | \"\") => {\n    if (isNewPoolMode) {\n      setAssetChangeModalActive(type);\n    }\n  };\n\n  const onAssetClick = (assetHash, symbol) => {\n    if (isAssetChangeModalActive === \"A\") {\n      setTokenA(assetHash);\n      setSymbolA(symbol);\n    } else {\n      setTokenB(assetHash);\n      setSymbolB(symbol);\n    }\n    setAssetChangeModalActive(\"\");\n  };\n\n  const onSuccess = () => {\n    setAmountA(\"\");\n    setAmountB(\"\");\n    setTxid(\"\");\n  };\n\n  const onAddLiquidity = async () => {\n    if (connectedWallet) {\n      if (tokenA && tokenB && amountA && amountB) {\n        try {\n          const res = await new SwapContract(network).provide(\n            connectedWallet,\n            tokenA,\n            amountA,\n            tokenB,\n            amountB\n          );\n          setTxid(res);\n        } catch (e: any) {\n          toast.error(e.description ? e.description : e.message);\n        }\n      }\n    } else {\n      toast.error(\"Please connect wallet\");\n    }\n  };\n\n  const onTokenAAmountChange = (type: \"A\" | \"B\", val: string) => {\n    if (type === \"A\") {\n      if (\n        tokenB &&\n        reserve &&\n        reserve.pair[tokenA] !== 0 &&\n        reserve.pair[tokenB] !== 0\n      ) {\n        const estimated = getEstimate(\n          val,\n          reserve.pair[tokenA],\n          reserve.pair[tokenB]\n        );\n        setAmountB(estimated.toString());\n      }\n      setAmountA(val);\n    } else {\n      if (\n        tokenA &&\n        tokenB &&\n        reserve &&\n        reserve.pair[tokenA] !== 0 &&\n        reserve.pair[tokenB] !== 0\n      ) {\n        const estimated = getEstimate(\n          val,\n          reserve.pair[tokenB],\n          reserve.pair[tokenA]\n        );\n        setAmountA(estimated.toString());\n      }\n      setAmountB(val);\n    }\n  };\n\n  const onSwitch = () => {\n    setTokenB(tokenA);\n    setTokenA(tokenB ? tokenB : \"\");\n    setAmountB(amountA);\n    setAmountA(amountB);\n    setSymbolA(symbolB);\n    setSymbolB(symbolA);\n  };\n\n  useEffect(() => {\n    async function fetchPair(A, B) {\n      try {\n        setPairLoading(true);\n        const res = await new SwapContract(network).getPair(\n          A,\n          B,\n          connectedWallet\n        );\n        setPairLoading(false);\n        setReserve(res);\n        if (\n          tokenA &&\n          tokenB &&\n          amountA &&\n          !amountB &&\n          res[tokenA] !== 0 &&\n          res[tokenB] !== 0\n        ) {\n          const estimated = getEstimate(amountA, res[tokenA], res[tokenB]);\n          setAmountB(estimated.toString());\n        }\n        if (\n          tokenA &&\n          tokenB &&\n          amountB &&\n          !amountA &&\n          res[tokenA] !== 0 &&\n          res[tokenB] !== 0\n        ) {\n          // @ts-ignore\n          const estimated = getEstimate(amountB, res[tokenB], res[tokenA]);\n          setAmountA(estimated.toString());\n        }\n      } catch (e: any) {\n        // setError(e.message);\n      }\n    }\n    if (tokenA && tokenB) {\n      fetchPair(tokenA, tokenB);\n    }\n  }, [tokenA, tokenB]);\n\n  const noLiquidity =\n    reserve && reserve.pair[tokenA] === 0 && reserve.pair[tokenB] === 0;\n  return (\n    <>\n      <h1 className=\"title is-5\">\n        {noLiquidity ? \"Create a new pool\" : \"Add liquidity\"}\n      </h1>\n      <hr />\n      {noLiquidity && (\n        <div className=\"notification is-info\">\n          <strong>You are providing liquidity into the pool</strong>\n          <br />\n          FTW Swap is not the same as traditional DeFi swap protocols. You\n          cannot withdraw your liquidity back.\n        </div>\n      )}\n\n      <div className=\"is-relative\">\n        <Input\n          heading=\"Pair A\"\n          onClickAsset={() => {\n            onAssetChange(\"A\");\n          }}\n          contractHash={tokenA}\n          symbol={symbolA}\n          val={amountA}\n          setValue={(val, e) => onTokenAAmountChange(\"A\", val)}\n          userBalance={reserve ? reserve.balances[tokenA] : undefined}\n        />\n        <div className=\"pt-3 pb-3\">\n          <button onClick={onSwitch} className=\"button is-white\">\n            <FaExchangeAlt />\n          </button>\n        </div>\n        <Input\n          heading=\"Pair B\"\n          isLoading={isPairLoading}\n          onClickAsset={() => {\n            onAssetChange(\"B\");\n          }}\n          contractHash={tokenB}\n          symbol={symbolB}\n          val={amountB}\n          setValue={(val, e) => onTokenAAmountChange(\"B\", val)}\n          userBalance={reserve && tokenB ? reserve.balances[tokenB] : undefined}\n        />\n        {connectedWallet ? (\n          tokenA && tokenB && amountA && amountB ? (\n            <>\n              <hr />\n              <button\n                disabled={\n                  reserve.balances[tokenA] < parseFloat(amountA) ||\n                  reserve.balances[tokenB] < parseFloat(amountB)\n                }\n                onClick={onAddLiquidity}\n                className=\"button is-fullwidth is-primary\"\n              >\n                Add Liquidity\n              </button>\n            </>\n          ) : (\n            <div />\n          )\n        ) : (\n          <>\n            <hr />\n            <button\n              onClick={openWalletModal}\n              className=\"button is-fullwidth is-primary\"\n            >\n              Connect wallet\n            </button>\n          </>\n        )}\n      </div>\n\n      {txid && (\n        <Modal onClose={() => setTxid(\"\")}>\n          <AfterTransactionSubmitted\n            txid={txid}\n            network={network}\n            onSuccess={onSuccess}\n            onError={() => setTxid(\"\")}\n          />\n        </Modal>\n      )}\n\n      {isAssetChangeModalActive && (\n        <AssetListModal\n          tokenA={tokenA}\n          tokenB={tokenB}\n          onAssetClick={onAssetClick}\n          onClose={() => setAssetChangeModalActive(\"\")}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Liquidity;\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/consts.ts",["748","749"],"import { CONST } from \"../../../index\";\nimport {\n  DOGE_SCRIPT_HASH,\n  FTW_SCRIPT_HASH,\n  MOON_SCRIPT_HASH,\n  NUDES_SCRIPT_HASH,\n} from \"../nep17\";\nimport { GAS_SCRIPT_HASH, MAINNET, PRIVATENET, TESTNET } from \"../../../consts\";\nimport { INetworkType } from \"../../../network\";\n\nexport const SWAP_SCRIPT_HASH = {\n  [CONST.PRIVATENET]: \"aeac82f7830f4083b98089baa51060e621febb10\",\n  // [CONST.TESTNET]: \"428783fccfb6b194f7d33cd421e9f56f48efbde5\", // With WMOON\n  [CONST.TESTNET]: \"46d42416e99b4304f02259794737865af10ad74b\",\n  [CONST.MAINNET]: \"\",\n};\n\nexport const ASSET_LIST = {\n  [PRIVATENET]: {\n    [GAS_SCRIPT_HASH]: {\n      contractHash: GAS_SCRIPT_HASH,\n      symbol: \"GAS\",\n      logo: \"/symbols/neo.svg\",\n    },\n    [FTW_SCRIPT_HASH[PRIVATENET]]: {\n      contractHash: FTW_SCRIPT_HASH[PRIVATENET],\n      symbol: \"FTW\",\n      logo: \"/symbols/ftw.svg\",\n    },\n    [NUDES_SCRIPT_HASH[PRIVATENET]]: {\n      contractHash: NUDES_SCRIPT_HASH[PRIVATENET],\n      symbol: \"NUDES\",\n      logo: \"/symbols/nudes.png\",\n    },\n  },\n  [TESTNET]: {\n    [GAS_SCRIPT_HASH]: {\n      contractHash: GAS_SCRIPT_HASH,\n      symbol: \"GAS\",\n      logo: \"/symbols/neo.svg\",\n    },\n    [FTW_SCRIPT_HASH[TESTNET]]: {\n      contractHash: FTW_SCRIPT_HASH[TESTNET],\n      symbol: \"FTW\",\n      logo: \"/symbols/ftw.svg\",\n    },\n    // [NUDES_SCRIPT_HASH[TESTNET]]: {\n    //   contractHash: NUDES_SCRIPT_HASH[TESTNET],\n    //   symbol: \"NUDES\",\n    //   logo: \"/symbols/nudes.png\",\n    // },\n    // [DOGE_SCRIPT_HASH[TESTNET]]: {\n    //   contractHash: DOGE_SCRIPT_HASH[TESTNET],\n    //   symbol: \"DOGE\",\n    //   logo: \"/symbols/unknown.png\",\n    // },\n    // [MOON_SCRIPT_HASH[TESTNET]]: {\n    //   contractHash: MOON_SCRIPT_HASH[TESTNET],\n    //   symbol: \"WMOON\",\n    //   logo: \"/symbols/unknown.png\",\n    // },\n  },\n  [MAINNET]: {\n    [GAS_SCRIPT_HASH]: {\n      contractHash: GAS_SCRIPT_HASH,\n      symbol: \"GAS\",\n      logo: \"/symbols/neo.svg\",\n    },\n    [FTW_SCRIPT_HASH[MAINNET]]: {\n      contractHash: FTW_SCRIPT_HASH[MAINNET],\n      symbol: \"FTW\",\n      logo: \"/symbols/ftw.svg\",\n    },\n    [NUDES_SCRIPT_HASH[MAINNET]]: {\n      contractHash: NUDES_SCRIPT_HASH[MAINNET],\n      symbol: \"NUDES\",\n      logo: \"/symbols/nudes.png\",\n    },\n  },\n};\n\nexport const PAIR_LIST = {\n  [PRIVATENET]: [\n    {\n      label: \"FTW - NUDES\",\n      value: {\n        tokenA: FTW_SCRIPT_HASH[PRIVATENET],\n        tokenB: NUDES_SCRIPT_HASH[PRIVATENET],\n      },\n    },\n  ],\n  [TESTNET]: [\n    {\n      label: \"FTW - NUDES\",\n      value: {\n        tokenA: FTW_SCRIPT_HASH[TESTNET],\n        tokenB: NUDES_SCRIPT_HASH[TESTNET],\n      },\n    },\n  ],\n  [MAINNET]: [],\n};\n\nexport const ASSETS = (network: INetworkType) => {\n  const keys = Object.keys(ASSET_LIST[network]);\n  return keys.map((key) => {\n    return ASSET_LIST[network][key];\n  });\n};\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/AssetListModal/index.tsx",["750","751","752"],"import React, { useState } from \"react\";\nimport Modal from \"../../../../components/Modal\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { ASSETS } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaPlus } from \"react-icons/all\";\nimport { wallet } from \"@cityofzion/neon-core\";\nimport { toast } from \"react-hot-toast\";\nimport { SwapContract } from \"../../../../../packages/neo/contracts/ftw/swap\";\ninterface IAssetListModalProps {\n  tokenA?: string;\n  tokenB?: string;\n  onClose: () => void;\n  onAssetClick: (assetHash: string, symbol: string) => void;\n}\nconst AssetListModal = ({\n  tokenA,\n  tokenB,\n  onAssetClick,\n  onClose,\n}: IAssetListModalProps) => {\n  const { network } = useWallet();\n  const [isCustomInputMode, setCustomInputMode] = useState(false);\n  const [customContractHash, setContractHash] = useState(\"\");\n  const assets = ASSETS(network).filter((asset) => {\n    return asset.contractHash !== tokenA && asset.contractHash !== tokenB;\n  });\n  const onAddContractHash = async () => {\n    let hash = customContractHash;\n    const ox = customContractHash.substring(0, 2);\n    if (ox === \"0x\") {\n      hash = customContractHash.substring(2);\n    }\n    if (wallet.isScriptHash(hash)) {\n      try {\n        const res = await new SwapContract(network).getContractSymbol(hash);\n        if (res) {\n          onAssetClick(hash, res);\n        } else {\n          toast.error(\"We cannot find token info with the given hash.\");\n        }\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please enter a valid contract script hash.\");\n    }\n  };\n  return (\n    <Modal onClose={onClose}>\n      {isCustomInputMode ? (\n        <div>\n          <div className=\"field\">\n            <label className=\"label\">Enter a contract hash</label>\n            <input\n              className=\"input\"\n              value={customContractHash}\n              onChange={(e) => setContractHash(e.target.value)}\n            />\n          </div>\n          <button\n            onClick={onAddContractHash}\n            disabled={!customContractHash}\n            className=\"button is-primary\"\n          >\n            Submit\n          </button>\n        </div>\n      ) : (\n        <div>\n          <h5 className=\"title is-6\">Select a token</h5>\n          <nav className=\"panel\">\n            {/*<div className=\"panel-block\">*/}\n            {/*  <p className=\"control has-icons-left\">*/}\n            {/*    <input className=\"input\" type=\"text\" placeholder=\"Search\" />*/}\n            {/*    <span className=\"icon is-left\">*/}\n            {/*      <i className=\"fas fa-search\" aria-hidden=\"true\"></i>*/}\n            {/*    </span>*/}\n            {/*  </p>*/}\n            {/*</div>*/}\n\n            {assets.length > 0 ? (\n              assets.map(({ contractHash, logo, symbol }) => {\n                return (\n                  <a\n                    onClick={() => onAssetClick(contractHash, symbol)}\n                    className=\"panel-block\"\n                    key={contractHash}\n                  >\n                    <div className=\"panel-icon\">\n                      <img src={logo} />\n                    </div>\n                    {symbol}\n                  </a>\n                );\n              })\n            ) : (\n              <div></div>\n            )}\n            <a\n              onClick={() => setCustomInputMode(true)}\n              className=\"panel-block\"\n              // key={contractHash}\n            >\n              <div className=\"panel-icon\">\n                <FaPlus />\n              </div>\n              Custom contract hash\n            </a>\n          </nav>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default AssetListModal;\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/swap/helpers.ts",["753","754"],"import { u } from \"@cityofzion/neon-core\";\nimport {\n  base64ToDate,\n  base64ToFixed8,\n  base64ToHash160,\n  toDecimal,\n} from \"../../../utils\";\nimport { IPair } from \"./interfaces\";\n\nexport const getEstimate = (\n  amount: string,\n  reserveA: number,\n  reserveB: number\n): number => {\n  const fixed8TokenAmount = u.BigInteger.fromDecimal(amount, 8).toString();\n  // let keys = Object.keys(pairInfo);\n  // keys = keys.filter((k) => k !== token);\n  // const reservedA = pairInfo[token];\n  // const reservedB = pairInfo[keys[0]];\n  let estimated = (parseFloat(fixed8TokenAmount) * reserveB) / reserveA;\n  estimated = Math.floor(estimated);\n  return toDecimal(estimated.toString());\n};\n\nexport const getUserShare = (totalShares, userShare, poolA, poolB) => {\n  // totalShares = parseFloat(totalShares);\n  // userShare = parseFloat(userShare);\n  // poolA = parseFloat(poolA);\n  // poolB = parseFloat(poolB);\n  return {\n    amountA: (poolA * userShare) / totalShares,\n    amountB: (poolB * userShare) / totalShares,\n  };\n};\n\nexport const parseUserStake = (stackItem) => {\n  return {\n    tokenA: base64ToHash160(stackItem.value[0].value as string),\n    tokenB: base64ToHash160(stackItem.value[1].value as string),\n    amountA: toDecimal(stackItem.value[2].value),\n    amountB: toDecimal(stackItem.value[3].value),\n  };\n};\n\nexport const parsePair = (stackItem): IPair => {\n  return {\n    tokenA: base64ToHash160(stackItem.value[0].value as string),\n    tokenB: base64ToHash160(stackItem.value[1].value as string),\n    amountA: toDecimal(stackItem.value[2].value),\n    amountB: toDecimal(stackItem.value[3].value),\n    totalShare: toDecimal(stackItem.value[4].value),\n  };\n};\n\nexport const parseSwapPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseSwap(stackItem[3].value),\n  };\n};\n\nconst parseSwap = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      tokenIn: base64ToHash160(item.value[0].value),\n      tokenOut: base64ToHash160(item.value[1].value), // NEO amount\n      tokenInAmount: toDecimal(item.value[2].value), // NEO amount\n      tokenOutAmount: toDecimal(item.value[3].value),\n    };\n  });\n};\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/Detail/index.tsx",["755","756","757"],"import React, { useEffect, useState } from \"react\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport { SwapContract } from \"../../../../../../../packages/neo/contracts\";\nimport { IConnectedWallet } from \"../../../../../../../packages/neo/wallet/interfaces\";\nimport { toast } from \"react-hot-toast\";\nimport { getUserShare } from \"../../../../../../../packages/neo/contracts/ftw/swap/helpers\";\nimport { ASSET_LIST } from \"../../../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport AfterTransactionSubmitted from \"../../../../../../../packages/ui/AfterTransactionSubmitted\";\ninterface IFarmDetailProps {\n  tokenA: string;\n  tokenB: string;\n  amountA: string;\n  amountB: string;\n  connectedWallet: IConnectedWallet;\n}\nconst FarmDetail = ({ connectedWallet, tokenA, tokenB }: IFarmDetailProps) => {\n  const [data, setData] = useState<any>();\n  const [claimable, setClaimable] = useState<any>();\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const { network } = useWallet();\n  const [txid, setTxid] = useState(\"\");\n  const [reloadCnt, setReloadCnt] = useState(0);\n\n  const onRemoveLiquidity = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new SwapContract(network).remove(\n          connectedWallet,\n          tokenA,\n          tokenB\n        );\n        setTxid(res);\n      } catch (e: any) {\n        toast.error(e.description ? e.description : e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet\");\n    }\n  };\n\n  const onClaim = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new SwapContract(network).claim(\n          connectedWallet,\n          tokenA,\n          tokenB\n        );\n        setTxid(res);\n      } catch (e: any) {\n        toast.error(e.description ? e.description : e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet\");\n    }\n  };\n\n  const onActionSuccess = () => {\n    setReloadCnt(reloadCnt + 1);\n    setTxid(\"\");\n  };\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(true);\n      const res1 = await new SwapContract(network).getUserStake(\n        connectedWallet,\n        tokenA,\n        tokenB\n      );\n      const res2 = await new SwapContract(network).getClaimAble(\n        connectedWallet,\n        tokenA,\n        tokenB\n      );\n      setLoading(false);\n      setData(res1);\n      setClaimable(res2);\n    }\n    fetch();\n  }, [reloadCnt]);\n\n  if (isLoading) return <div>Loading..</div>;\n\n  const userShare = data\n    ? getUserShare(\n        data.pair.totalShare,\n        data.stake.amountA,\n        data.pair.amountA,\n        data.pair.amountB\n      )\n    : undefined;\n  console.log(\n    data\n      ? \"original staking: \" + data.stake.amountA + \"/\" + data.stake.amountB\n      : \"No staking info\"\n  );\n  return (\n    <div>\n      {txid ? (\n        <AfterTransactionSubmitted\n          txid={txid}\n          network={network}\n          onSuccess={onActionSuccess}\n          onError={() => setTxid(\"\")}\n        />\n      ) : (\n        <>\n          <h1 className=\"title is-5\">My liquidity</h1>\n          {data ? (\n            <div>\n              <div style={{ alignItems: \"center\" }} className=\"media\">\n                <div className=\"media-content is-vcentered\">\n                  {ASSET_LIST[network][tokenA].symbol} /{\" \"}\n                  {ASSET_LIST[network][tokenB].symbol}\n                  <br />\n                  <small>\n                    {/*{data.stake.amountA} / {data.stake.amountB}*/}\n                    {/*<br />*/}\n                    {userShare ? userShare.amountA : 0} /{\" \"}\n                    {userShare ? userShare.amountB : 0}\n                  </small>\n                </div>\n                <div className=\"media-right\">\n                  <button\n                    onClick={onRemoveLiquidity}\n                    className=\"button is-light\"\n                  >\n                    Remove\n                  </button>\n                </div>\n              </div>\n              <hr />\n              <div style={{ alignItems: \"center\" }} className=\"media\">\n                <div className=\"media-content is-vcentered\">\n                  Claimable\n                  <br />\n                  {ASSET_LIST[network][tokenA].symbol} /{\" \"}\n                  {ASSET_LIST[network][tokenB].symbol}\n                  <br />\n                  <small>\n                    {claimable ? claimable.amountA : 0} /{\" \"}\n                    {claimable ? claimable.amountB : 0}\n                  </small>\n                </div>\n                <div className=\"media-right\">\n                  <button onClick={onClaim} className=\"button is-primary\">\n                    Claim\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div>There is no liquidity with your connected wallet</div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default FarmDetail;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/FusionBox.tsx",["758"],"import React from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaQuestionCircle } from \"react-icons/all\";\ninterface IFusionBoxProps {\n  src: string;\n}\nconst FusionBox = ({ src }: IFusionBoxProps) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n\t      height: \"300px\"\n      }}\n      className=\"is-clickable\"\n    >\n      {src ? <img src={src} /> : <FaQuestionCircle />}\n    </div>\n  );\n};\n\nexport default FusionBox;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/RuneListModal.tsx",["759"],"import React, { useEffect, useState } from \"react\";\nimport Modal from \"../../../components/Modal\";\nimport { NFTContract } from \"../../../../packages/neo/contracts\";\nimport { useWallet } from \"../../../../packages/provider\";\n\ninterface INFTListModalModal {\n  onClick: (data: any) => void;\n  onClose: () => void;\n}\nconst RuneListModal = ({ onClick, onClose }: INFTListModalModal) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new NFTContract(network).getTokensOf(\n          connectedWallet?.account.address\n        );\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (connectedWallet) {\n      fetchContractStatus();\n    }\n  }, [connectedWallet, network]);\n  return (\n    <Modal onClose={onClose}>\n      <>\n        <div>\n          <div className=\"block\">\n            <h5 className=\"title is-5\">Select a Rune</h5>\n          </div>\n          <div>\n            {isLoading ? (\n              <div>Loading..</div>\n            ) : error ? (\n              <div>{error}</div>\n            ) : tokens.length > 0 ? (\n              <div\n                style={{\n                  flexFlow: \"wrap\",\n                }}\n                className=\"is-flex\"\n              >\n                {tokens.map((token) => {\n                  return (\n                    <figure\n                      key={token.tokenId}\n                      // style={{ width, height }}\n                      className=\"image is-64x64\"\n                      onClick={() => onClick(token)}\n                    >\n                      <img src={token.image} />\n                    </figure>\n                  );\n                })}\n              </div>\n            ) : (\n              <div>You don't have runes</div>\n            )}\n          </div>\n        </div>\n      </>\n    </Modal>\n  );\n};\n\nexport default RuneListModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/CryptonatuListModal.tsx",["760","761","762","763","764"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { TournamentContract } from \"../../../../packages/neo/contracts/ftw/tournament\";\nimport AfterTransactionSubmitted from \"../../../../packages/ui/AfterTransactionSubmitted\";\nimport Modal from \"../../../components/Modal\";\nimport { NFTContract } from \"../../../../packages/neo/contracts\";\nimport { useWallet } from \"../../../../packages/provider\";\nimport { TTMNFTContract } from \"../../../../packages/neo/contracts/ttm/nft\";\n\ninterface INFTListModalModal {\n  onClick: (data: any) => void;\n  onClose: () => void;\n}\nconst CryptonatuListModal = ({ onClick, onClose }: INFTListModalModal) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new TTMNFTContract(network).getTokensOf(\n          connectedWallet?.account.address\n        );\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (connectedWallet) {\n      fetchContractStatus();\n    }\n  }, [connectedWallet, network]);\n\n  return (\n    <Modal onClose={onClose}>\n      <>\n        <div>\n          <div className=\"block\">\n            <h5 className=\"title is-5\">Select a Cryptonaut</h5>\n          </div>\n          <div>\n            {isLoading ? (\n              <div>Loading..</div>\n            ) : error ? (\n              <div>{error}</div>\n            ) : tokens.length > 0 ? (\n              <div\n                style={{\n                  flexFlow: \"wrap\",\n                }}\n                className=\"is-flex\"\n              >\n                {tokens.map((token) => {\n                  return (\n                    <figure\n                      key={token.tokenId}\n                      // style={{ width, height }}\n                      className=\"image is-64x64\"\n                      onClick={() => onClick(token)}\n                    >\n                      <img src={token.image} />\n                    </figure>\n                  );\n                })}\n              </div>\n            ) : (\n              <div>You don't have runes</div>\n            )}\n          </div>\n        </div>\n      </>\n    </Modal>\n  );\n};\n\nexport default CryptonatuListModal;\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/index.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/helpers.ts",["765"],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ttm/nft/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/fuse/index.ts",["766"],"/Users/ed/Projects/FTW/client/src/ui/pages/Fusion/components/FusedList.tsx",["767","768"],"import React, { useEffect, useState } from \"react\";\nimport { useWallet } from \"../../../../packages/provider\";\nimport { FusionContract } from \"../../../../packages/neo/contracts/ftw/fuse\";\nimport { toast } from \"react-hot-toast\";\nimport ModalCard from \"../../../components/Modal\";\nimport AfterTransactionSubmitted from \"../../../../packages/ui/AfterTransactionSubmitted\";\ninterface IFusedListProps {\n  onSubmitted: (txid: string) => void;\n  onReset: () => void;\n}\nconst FusedList = ({ onSubmitted, onReset }: IFusedListProps) => {\n  const [tokens, setTokens] = useState<any>([]);\n  const [detail, setDetail] = useState<any>();\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { connectedWallet, network } = useWallet();\n  const [txid, setTxid] = useState(\"\");\n\n  const onRefund = async () => {\n    if (connectedWallet) {\n      try {\n        const res = await new FusionContract(network).refund(\n          connectedWallet,\n          detail.tokenId\n        );\n        setDetail(false);\n        onSubmitted(res);\n      } catch (e: any) {\n        toast.error(e.message);\n      }\n    } else {\n      toast.error(\"Please connect wallet.\");\n    }\n  };\n\n  useEffect(() => {\n    async function fetchContractStatus() {\n      setError(\"\");\n      setLoading(true);\n      try {\n        const res = await new FusionContract(network).getTokensOf(\n          connectedWallet ? connectedWallet.account.address : undefined\n        );\n        setTokens(res);\n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (connectedWallet) {\n      fetchContractStatus();\n    }\n  }, [connectedWallet, network]);\n\n  return (\n    <>\n      <div>\n        <div>\n          {isLoading ? (\n            <div></div>\n          ) : error ? (\n            <div>{error}</div>\n          ) : tokens.length > 0 ? (\n            <>\n              <div className=\"block\">\n                <h5 className=\"title is-5\">Fused Cryptonaut</h5>\n              </div>\n              <div\n                style={{\n                  flexFlow: \"wrap\",\n                }}\n                className=\"is-flex\"\n              >\n                {tokens.map((token) => {\n                  return (\n                    <figure\n                      key={token.tokenId}\n                      // style={{ width, height }}\n                      className=\"image is-64x64\"\n                      onClick={() => setDetail(token)}\n                    >\n                      <img src={token.image} />\n                    </figure>\n                  );\n                })}\n              </div>\n              {detail ? (\n                <ModalCard onClose={() => setDetail(undefined)}>\n                  <>\n                    {txid ? (\n                      <AfterTransactionSubmitted\n                        network={network}\n                        txid={txid}\n                        onSuccess={() => {\n                          setDetail(undefined);\n                          setTxid(\"\");\n                        }}\n                        onError={() => setTxid(\"\")}\n                      />\n                    ) : (\n                      <div className=\"card\">\n                        <div className=\"card-image\">\n                          <figure className=\"image is-4by3\">\n                            <img src={detail.image} />\n                          </figure>\n                        </div>\n                        <div className=\"card-content\">\n                          <div className=\"media\">\n                            <div className=\"media-content\">\n                              <h1 className=\"title is-5\">Fused Cryptonaut</h1>\n                              <p className=\"subtitle is-7\">\n                                TokenId: {detail.tokenId}\n                              </p>\n                              <div className=\"field is-grouped is-grouped-multiline\">\n                                <div className=\"control\">\n                                  <div className=\"tags has-addons\">\n                                    <span className=\"tag is-dark\">Element</span>\n                                    <span className=\"tag is-info\">\n                                      {detail.element}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"control\">\n                                  <div className=\"tags has-addons\">\n                                    <span className=\"tag is-dark\">Phase</span>\n                                    <span className=\"tag is-info\">\n                                      {detail.phase}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"control\">\n                                  <div className=\"tags has-addons\">\n                                    <span className=\"tag is-dark\">Luck</span>\n                                    <span className=\"tag is-info\">\n                                      {detail.luck}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"media-right\">\n                              <button\n                                onClick={onRefund}\n                                className=\"button is-danger\"\n                              >\n                                Un-Fuse\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                </ModalCard>\n              ) : (\n                <div></div>\n              )}\n            </>\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default FusedList;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Migration/index.tsx",["769","770","771","772"],"import React, { useEffect, useRef, useState } from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport DOTS from \"vanta/dist/vanta.halo.min\";\nimport PageLayout from \"../../components/PageLayout\";\n// import * as THREE from \"three\";\n\nconst Migration = (props) => {\n  const [vantaEffect, setVantaEffect] = useState(0);\n  const myRef = useRef(null);\n  useEffect(() => {\n    if (!vantaEffect) {\n      setVantaEffect(\n        DOTS({\n          el: myRef.current,\n          mouseControls: true,\n          touchControls: true,\n          gyroControls: false,\n          minHeight: 200.0,\n          minWidth: 200.0,\n          backgroundColor: 0x80822,\n          size: 2.8,\n        })\n      );\n    }\n    return () => {\n      if (vantaEffect) {\n        // @ts-ignore\n        vantaEffect.destroy();\n      }\n    };\n  }, [vantaEffect]);\n  return (\n    <div>\n      <section className=\"hero is-white\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <div className=\"columns\">\n              <div className=\"column is-flex\" style={{ alignItems: \"center\" }}>\n                <div>\n                  <h1 className=\"title\">Forthewin is back</h1>\n                  <p className=\"subtitle\">\n                    Migrate your Neo-legacy FTX to the new <span>N3 FTW</span>\n                  </p>\n                  <a\n                    target=\"_blank\"\n                    href=\"https://nepmigration.com/\"\n                    className=\"button is-primary\"\n                  >\n                    Go to Migrate\n                  </a>\n                </div>\n              </div>\n              <div className=\"column is-hidden-touch\">\n                <div\n                  className=\"block\"\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    minHeight: \"300px\",\n                  }}\n                >\n                  <video style={{ width: \"400px\" }} autoPlay loop>\n                    <source src={\"/assets/migration.mp4\"} type=\"video/mp4\" />\n                  </video>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <PageLayout>\n        <div className=\"columns halo\" ref={myRef}>\n          <div className=\"column\">\n            <div className=\"has-background-white\">\n              <div className=\"box content\">\n                <h3>Neo-legacy</h3>\n                <h6>Symbol</h6>\n                <p>FTX</p>\n                <h6>Contract hash</h6>\n                <p>0xaac66f9779ca67d819d05492805d251dab02fc7b</p>\n                <h6>Total supply</h6>\n                <p>500,000,000</p>\n                <h6>Browser</h6>\n                <p>\n                  <a\n                    className=\"has-text-dark\"\n                    target=\"_blank\"\n                    href=\"https://neotracker.io/asset/aac66f9779ca67d819d05492805d251dab02fc7b\"\n                  >\n                    Open\n                  </a>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"column\">\n            <div className=\"has-background-white\">\n              <div className=\"box content\">\n                <h3>N3</h3>\n                <h6>Symbol</h6>\n                <p>FTW</p>\n                <h6>Contract hash</h6>\n                <p>\n                  <a\n                    target=\"_blank\"\n                    className=\"has-text-dark\"\n                    href=\"https://explorer.onegate.space/contractinfo/0x9f8b20c31bb9e45003f2d9f316d2caf1dcd1bf20\"\n                  >\n                    0x9f8b20c31bb9e45003f2d9f316d2caf1dcd1bf20\n                  </a>\n                </p>\n                <h6>Total supply</h6>\n                <p>500,000,000</p>\n                <h6>Browser</h6>\n                <p>\n                  <a\n                    className=\"has-text-dark\"\n                    target=\"_blank\"\n                    href=\"https://explorer.onegate.space/NEP17tokeninfo/0x9f8b20c31bb9e45003f2d9f316d2caf1dcd1bf20\"\n                  >\n                    Open\n                  </a>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </PageLayout>\n    </div>\n  );\n};\n\nexport default Migration;\n","/Users/ed/Projects/FTW/client/src/ui/components/ReactGa.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/BgContainer.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/components/NetworkSwitch2.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/History/index.tsx",["773","774"],"import React, { useEffect, useState } from \"react\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport queryString from \"query-string\";\nimport Pagination from \"bulma-pagination-react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { SwapContract } from \"../../../../../../../packages/neo/contracts\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport { SWAP_PATH } from \"../../../../../../../consts\";\nimport { FaAngleLeft } from \"react-icons/all\";\n\nconst History = () => {\n  const location = useLocation();\n  const params = queryString.parse(location.search);\n  const { tokenA, tokenB, page, symbolA, symbolB } = params;\n  const { network } = useWallet();\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState<any>();\n  const [currentPage, setPage] = useState(page ? page : \"1\");\n\n  const assetObj = {\n    [tokenA]: symbolA,\n    [tokenB]: symbolB,\n  };\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(true);\n      try {\n        const res = await new SwapContract(network).getSwapHistory(\n          tokenA,\n          tokenB,\n          currentPage\n        );\n        setLoading(false);\n        setData(res);\n      } catch (e: any) {\n        setLoading(false);\n        setError(e.message);\n      }\n    }\n    fetch();\n  }, [location, currentPage]);\n  if (isLoading) return <div>History loading..</div>;\n  if (!data) return <div>Failed to load data from the chain</div>;\n  return (\n    <div>\n      <Link className=\"button is-white\" to={SWAP_PATH}>\n        <span className=\"icon\">\n          <FaAngleLeft />\n        </span>\n        <span>Pools</span>\n      </Link>\n      <hr />\n      <h1 className=\"title is-5\">Swap history</h1>\n      {data.totalItems === \"0\" ? (\n        <p className=\"subtitle is-6\">No data</p>\n      ) : (\n        <div className=\"table-container\">\n          <table className=\"table is-fullwidth\">\n            <thead>\n              <tr>\n                <th>In</th>\n                <th>Out</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.items.map((swap, i) => {\n                const symbolIn = assetObj[swap.tokenIn];\n                const symbolOut = assetObj[swap.tokenOut];\n                return (\n                  <tr key={`swap-${i}`}>\n                    <td>\n                      <strong>{symbolIn}</strong>&nbsp;{swap.tokenInAmount}\n                    </td>\n                    <td>\n                      <strong>{symbolOut}</strong>&nbsp;{swap.tokenOutAmount}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          {data && data.totalPages > 1 && (\n            <div className=\"media\">\n              <div className=\"media-content\">\n                <Pagination\n                  pages={data.totalPages}\n                  currentPage={currentPage}\n                  onChange={(_page) => {\n                    if (currentPage !== _page) {\n                      setPage(_page);\n                    }\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default History;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/List/index.tsx",["775","776","777","778","779"],"import React, { useEffect, useState } from \"react\";\nimport { ASSET_LIST } from \"../../../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport { Link } from \"react-router-dom\";\nimport {\n  SWAP_PATH_HISTORY,\n  SWAP_PATH_LIQUIDITY,\n  SWAP_PATH_TRADE,\n} from \"../../../../../../../consts\";\nimport Modal from \"../../../../../../components/Modal\";\nimport FarmDetail from \"../Detail\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport { SwapContract } from \"../../../../../../../packages/neo/contracts\";\nimport CreatePool from \"../CreatePool\";\nimport PoolCard from \"../../../../components/PoolCard\";\n\nconst PairList = (props) => {\n  const { network, connectedWallet } = useWallet();\n  const [list, setList] = useState<any[]>([]);\n  const [detail, setDetail] = useState();\n  const [isCreateModalActive, setCreateModalActive] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(true);\n      try {\n        const res = await new SwapContract(network).getPairs();\n        setLoading(false);\n        setList(res);\n      } catch (e: any) {\n        setLoading(false);\n        setError(e.message);\n      }\n    }\n    fetch();\n  }, []);\n  if (isLoading) return <div>Loading..</div>;\n  return (\n    <div>\n      <div className=\"level is-mobile\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <h1 className=\"title is-5\">Pools</h1>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            <Link\n              to={SWAP_PATH_LIQUIDITY}\n              // onClick={() => setCreateModalActive(true)}\n              className=\"button is-light\"\n            >\n              Create\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      {list.map((item, i) => {\n        return <PoolCard key={`pool-${i}`} {...item} />;\n      })}\n\n      {isCreateModalActive && (\n        <Modal onClose={() => setCreateModalActive(false)}>\n          <CreatePool />\n        </Modal>\n      )}\n\n      {detail && connectedWallet && (\n        <Modal onClose={() => setDetail(undefined)}>\n          <div>\n            <FarmDetail connectedWallet={connectedWallet} {...detail} />\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default PairList;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/index.tsx",["780","781","782","783","784"],"import React from \"react\";\nimport NavSwitch from \"./components/NavSwitch\";\nimport { Link, Route, useLocation } from \"react-router-dom\";\nimport SwapBox from \"./scenes/Swap\";\nimport { useWallet } from \"../../../packages/provider\";\nimport {\n  INCUBATOR_PATH,\n  INCUBATOR_REGISTER_PATH,\n  SMITH_PATH,\n  SMITH_PATH_NEP11,\n} from \"../../../consts\";\nimport PageLayout from \"../../components/PageLayout\";\nimport Register from \"./scenes/Register\";\nimport Pools from \"./scenes/Pools\";\n\nconst Swap = () => {\n  const location = useLocation();\n  const { network } = useWallet();\n  return (\n    <div>\n      <section className=\"hero is-white\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">DAO Incubator</h1>\n            <p className=\"subtitle\">Start your DAO tokens today.</p>\n            <br />\n          </div>\n        </div>\n        <div className=\"hero-foot\">\n          <nav className=\"tabs is-boxed\">\n            <div className=\"container\">\n              <ul>\n                <li\n                  className={\n                    location.pathname === INCUBATOR_PATH ? \"is-active\" : \"\"\n                  }\n                >\n                  <Link to={INCUBATOR_PATH}>Pools</Link>\n                </li>\n                <li\n                  className={\n                    location.pathname === INCUBATOR_REGISTER_PATH\n                      ? \"is-active\"\n                      : \"\"\n                  }\n                >\n                  <Link to={INCUBATOR_REGISTER_PATH}>Create a pool</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </section>\n\n     <PageLayout>\n\t     <Route exact={true} path={INCUBATOR_PATH} component={Pools} />\n\t     <Route path={INCUBATOR_REGISTER_PATH} component={Register} />\n     </PageLayout>\n    </div>\n  );\n};\n\nexport default Swap;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/NavSwitch/index.tsx",["785"],"/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Swap/index.tsx",["786","787","788","789","790"],"import React, { useEffect, useMemo, useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { GAS_SCRIPT_HASH } from \"../../../../../packages/neo/consts\";\nimport {\n  FTW_SCRIPT_HASH,\n  SwapContract,\n} from \"../../../../../packages/neo/contracts\";\nimport { toast } from \"react-hot-toast\";\nimport { getEstimate } from \"../../../../../packages/neo/contracts/ftw/swap/helpers\";\nimport Input from \"../../components/Input\";\nimport AssetListModal from \"../../components/AssetListModal\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaExchangeAlt } from \"react-icons/all\";\nimport { ASSET_LIST } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport Modal from \"../../../../components/Modal\";\nimport AfterTransactionSubmitted from \"../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { SWAP_PATH_LIQUIDITY } from \"../../../../../consts\";\nimport queryString from \"query-string\";\nimport store from \"store2\";\nimport { LocalStorage } from \"../../../../../packages/neo/local-storage\";\n\nconst Swap = () => {\n  const location = useLocation();\n  const params = queryString.parse(location.search);\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [isAssetChangeModalActive, setAssetChangeModalActive] = useState<\n    \"A\" | \"B\" | \"\"\n  >(\"\");\n  const cachedTokenA = LocalStorage.getSwapTokenA();\n  const [tokenA, setTokenA] = useState<any>(\n    params.tokenA\n      ? params.tokenA\n      : cachedTokenA\n      ? cachedTokenA\n      : FTW_SCRIPT_HASH[network]\n  );\n  const cachedTokenB = LocalStorage.getSwapTokenB();\n  const [tokenB, setTokenB] = useState<any>(\n    params.tokenB ? params.tokenB : cachedTokenB ? cachedTokenB : undefined\n  );\n  const [amountA, setAmountA] = useState(\"\");\n  const [amountB, setAmountB] = useState(\"\");\n  const [reserve, setReserve] = useState<any>();\n  const [isPairLoading, setPairLoading] = useState(false);\n  const [txid, setTxid] = useState(\"\");\n  const onAssetChange = (type: \"A\" | \"B\" | \"\") => {\n    setAssetChangeModalActive(type);\n  };\n\n  const onAssetClick = (assetHash) => {\n    if (isAssetChangeModalActive === \"A\") {\n      LocalStorage.setSwapTokenA(assetHash);\n      setTokenA(assetHash);\n      if (tokenB) {\n        loadPair(assetHash, tokenB);\n      }\n    } else {\n      LocalStorage.setSwapTokenB(assetHash);\n      setTokenB(assetHash);\n      if (tokenA) {\n        loadPair(tokenA, assetHash);\n      }\n    }\n    setAssetChangeModalActive(\"\");\n  };\n\n  const onTokenAAmountChange = async (val: string) => {\n    setAmountA(val);\n    if (tokenB) {\n      const res = await new SwapContract(network).getEstimate(\n        tokenA,\n        tokenB,\n        tokenA,\n        val\n      );\n      setAmountB(res as any);\n    }\n  };\n\n  const onSuccess = () => {\n    setAmountA(\"0\");\n    setAmountB(\"0\");\n    setTxid(\"\");\n  };\n\n  const onSwap = async () => {\n    if (connectedWallet) {\n      if (tokenA && tokenB && amountA && amountB) {\n        try {\n          const res = await new SwapContract(network).swap(\n            connectedWallet,\n            tokenA,\n            amountA,\n            tokenB,\n            amountB\n          );\n          setTxid(res);\n        } catch (e: any) {\n          toast.error(e.description ? e.description : e.message);\n        }\n      }\n    } else {\n      toast.error(\"Please connect wallet\");\n    }\n  };\n  const onSwitch = async () => {\n    setTokenB(tokenA);\n    setTokenA(tokenB ? tokenB : \"\");\n    setAmountB(amountA);\n    setAmountA(amountB);\n    if (tokenB && amountB && amountB !== \"0\" && tokenA) {\n      const estimated = await new SwapContract(network).getEstimate(\n        tokenB,\n        tokenA,\n        tokenB,\n        amountB\n      );\n      setTokenB(tokenA);\n      setTokenA(tokenB ? tokenB : \"\");\n      setAmountA(amountB);\n      setAmountB(estimated ? estimated.toString() : \"0\");\n    } else {\n      setTokenB(tokenA);\n      setTokenA(tokenB ? tokenB : \"\");\n      setAmountB(amountA);\n      setAmountA(amountB);\n    }\n  };\n\n  const loadPair = async (A, B) => {\n    setPairLoading(true);\n    const res = await new SwapContract(network).getPair(A, B, connectedWallet);\n    setReserve(res);\n    setPairLoading(false);\n    if (amountA && res.pair[tokenA] !== 0) {\n      const estimated = await new SwapContract(network).getEstimate(\n        A,\n        B,\n        A,\n        amountA\n      );\n      // @ts-ignore\n      // const estimated = getEstimate(amountA, res[A], res[B]);\n      setAmountB(estimated ? estimated.toString() : \"0\");\n    } else {\n      setAmountB(\"0\");\n    }\n  };\n\n  useEffect(() => {\n    if (params.tokenA && params.tokenB) {\n      loadPair(params.tokenA, params.tokenB);\n    }\n  }, [location]);\n\n  // let tokenBofA = 0;\n  // let tokenAofB = 0;\n  //\n  // if (tokenA && tokenB && amountA && amountB && pairInfo) {\n  //   const reservedA = pairInfo[tokenA];\n  //   const reservedB = pairInfo[tokenB];\n  //   tokenBofA =\n  //     (parseFloat(\"100000000\") * parseFloat(reservedB)) / parseFloat(reservedA);\n  //   tokenBofA = Math.floor(tokenBofA);\n  //   tokenBofA = toDecimal(tokenBofA.toString());\n  //\n  //   tokenAofB =\n  //     (parseFloat(\"100000000\") * parseFloat(reservedA)) / parseFloat(reservedB);\n  //   tokenAofB = Math.floor(tokenAofB);\n  //   tokenAofB = toDecimal(tokenAofB.toString());\n  // }\n  const noLiquidity =\n    reserve && reserve.pair[tokenA] === 0 && reserve.pair[tokenB] === 0;\n  return (\n    <div>\n      <>\n        {noLiquidity && (\n          <div className=\"notification is-info\">\n            No liquidity with the pairs. Provide liquidity and earn fees.\n            <br />\n            <br />\n            <Link className=\"button is-small is-light\" to={SWAP_PATH_LIQUIDITY}>\n              Go to liquidity page\n            </Link>\n          </div>\n        )}\n        <Input\n          heading=\"Swap From\"\n          onClickAsset={() => onAssetChange(\"A\")}\n          asset={tokenA ? ASSET_LIST[network][tokenA] : undefined}\n          val={amountA}\n          setValue={(val, e) => onTokenAAmountChange(val)}\n          userBalance={\n            connectedWallet && reserve ? reserve.balances[tokenA] : undefined\n          }\n        />\n        <div className=\"pt-3 pb-3\">\n          <button onClick={onSwitch} className=\"button is-white\">\n            <FaExchangeAlt />\n          </button>\n        </div>\n        <Input\n          isReadOnly={true}\n          heading=\"Swap To\"\n          isLoading={isPairLoading}\n          onClickAsset={() => onAssetChange(\"B\")}\n          asset={tokenB ? ASSET_LIST[network][tokenB] : undefined}\n          val={amountB}\n          // setValue={(val, e) => onTokenAAmountChange(\"B\", val, e)}\n          setValue={(val, e) => {\n            return false;\n          }}\n          userBalance={\n            connectedWallet && reserve ? reserve.balances[tokenB] : undefined\n          }\n        />\n\n        {connectedWallet ? (\n          tokenA && tokenB && amountA && amountB ? (\n            <>\n              {/*<div className=\"box\">*/}\n              {/*  {`${tokenBofA} ${ASSET_LIST[tokenB].symbol} per ${ASSET_LIST[tokenA].symbol}`}*/}\n              {/*  /!*<br />*!/*/}\n              {/*  /!*{`${tokenAofB} ${ASSET_LIST[tokenA].symbol} per ${ASSET_LIST[tokenB].symbol}`}*!/*/}\n              {/*</div>*/}\n              <hr />\n              <button\n                disabled={\n                  reserve.balances[tokenA] < parseFloat(amountA) ||\n                  reserve.pair[tokenB] < parseFloat(amountB)\n                }\n                onClick={onSwap}\n                className=\"button is-fullwidth is-primary\"\n              >\n                Swap\n              </button>\n            </>\n          ) : (\n            <div />\n          )\n        ) : (\n          <>\n            <hr />\n            <button\n              onClick={openWalletModal}\n              className=\"button is-fullwidth is-primary\"\n            >\n              Connect wallet\n            </button>\n          </>\n        )}\n      </>\n\n      {txid && (\n        <Modal onClose={() => setTxid(\"\")}>\n          <AfterTransactionSubmitted\n            txid={txid}\n            network={network}\n            onSuccess={onSuccess}\n            onError={() => setTxid(\"\")}\n          />\n        </Modal>\n      )}\n\n      {isAssetChangeModalActive && (\n        <AssetListModal\n          tokenA={tokenA}\n          tokenB={tokenB}\n          onAssetClick={onAssetClick}\n          onClose={() => setAssetChangeModalActive(\"\")}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Swap;\n",["791","792"],"/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/Input/index.tsx",["793"],"import React from \"react\";\n// tslint:disable-next-line:no-submodule-imports\nimport { FaAngleDown, FaQuestionCircle } from \"react-icons/all\";\nimport NumberFormat from \"react-number-format\";\n\ninterface IInputProps {\n  asset?: {\n    symbol: string;\n    logo: string;\n  };\n  val: string;\n  heading?: string;\n  isLoading?: boolean;\n  setValue: (val: string, e: any) => void;\n  onClickAsset: () => void;\n  isReadOnly?: boolean;\n  userBalance?: string;\n}\nconst Input = ({\n  asset,\n  val,\n  heading,\n  setValue,\n  onClickAsset,\n  isLoading,\n  isReadOnly,\n  userBalance,\n}: IInputProps) => {\n  return (\n    <div className=\"\">\n      <div className=\"columns\">\n        <div className=\"column is-narrow\">\n          <div style={{ width: \"150px\" }}>\n            <div\n              className=\"media\"\n              style={{ alignItems: \"center\", display: \"flex\" }}\n            >\n              <div className=\"media-left\">\n                <div\n                  onClick={onClickAsset}\n                  style={{\n                    width: \"50px\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                  className=\"image is-clickable is-flex\"\n                >\n                  {asset ? (\n                    <img src={asset.logo} />\n                  ) : (\n                    <FaQuestionCircle size={35} />\n                  )}\n                </div>\n              </div>\n              <div\n                onClick={onClickAsset}\n                className=\"media-content is-clickable\"\n              >\n                {heading && <p className=\"heading\">{heading}</p>}\n                <div style={{ alignItems: \"center\", display: \"flex\" }}>\n                  <span className=\"has-text-weight-bold\">\n                    {asset ? asset.symbol : \"Select\"}\n                  </span>\n                  <span className=\"icon\">\n                    <FaAngleDown />\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column\">\n          <div className={`control ${isLoading ? \"is-loading\" : \"\"}`}>\n            <NumberFormat\n              readOnly={isReadOnly}\n              // ref={this.props, inputRef}\n              // decimalScale={0}\n              inputMode=\"decimal\"\n              className=\"input\"\n              value={val}\n              onValueChange={(value, e) => {\n                if (e.source === \"event\") {\n                  setValue(value.value, e.event);\n                }\n              }}\n              thousandSeparator={true}\n              suffix={asset ? \" \" + asset.symbol : \"\"}\n              allowLeadingZeros={false}\n              // format={(val) => {} }\n            />\n            {userBalance ? (\n              <div className=\"level is-mobile mt-1\">\n                <div className=\"level-left\">\n                  <small className=\"is-size-7\">\n                    <div className=\"level-item\">Your balance</div>\n                  </small>\n                </div>\n\n                <div className=\"level-right\">\n                  <div className=\"level-item\">\n                    <small className=\"is-size-7\">\n                      {userBalance} {asset && asset.symbol}\n                    </small>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div></div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/components/AssetListModal/index.tsx",["794","795"],"import React from \"react\";\nimport Modal from \"../../../../components/Modal\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { ASSETS } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\ninterface IAssetListModalProps {\n  tokenA?: string;\n  tokenB?: string;\n  onClose: () => void;\n  onAssetClick: (assetHash: string) => void;\n}\nconst AssetListModal = ({\n  tokenA,\n  tokenB,\n  onAssetClick,\n  onClose,\n}: IAssetListModalProps) => {\n  const { network } = useWallet();\n  const assets = ASSETS(network).filter((asset) => {\n    return asset.contractHash !== tokenA && asset.contractHash !== tokenB;\n  });\n  return (\n    <Modal onClose={onClose}>\n      <div>\n        <h5 className=\"title is-6\">Select a token</h5>\n        <nav className=\"panel\">\n          {/*<div className=\"panel-block\">*/}\n          {/*  <p className=\"control has-icons-left\">*/}\n          {/*    <input className=\"input\" type=\"text\" placeholder=\"Search\" />*/}\n          {/*    <span className=\"icon is-left\">*/}\n          {/*      <i className=\"fas fa-search\" aria-hidden=\"true\"></i>*/}\n          {/*    </span>*/}\n          {/*  </p>*/}\n          {/*</div>*/}\n\n          {assets.length > 0 ? (\n            assets.map(({ contractHash, logo, symbol }) => {\n              return (\n                <a\n                  onClick={() => onAssetClick(contractHash)}\n                  className=\"panel-block\"\n                  key={contractHash}\n                >\n                  <div className=\"panel-icon\">\n                    <img src={logo} />\n                  </div>\n                  {symbol}\n                </a>\n              );\n            })\n          ) : (\n            <div className=\"panel-block\">No available token to pick</div>\n          )}\n        </nav>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AssetListModal;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Register/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Register/Form.tsx",["796","797","798","799","800"],"import React, { useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { detectEmojiInString } from \"../../../Smith/helpers\";\nimport { toast } from \"react-hot-toast\";\nimport { balanceCheck } from \"../../../../../packages/neo/utils\";\nimport { SmithContract } from \"../../../../../packages/neo/contracts/ftw/smith\";\nimport Modal from \"../../../../components/Modal\";\nimport AfterTransactionSubmitted from \"../../../../../packages/ui/AfterTransactionSubmitted\";\nimport { DEPLOY_FEE } from \"../../../../../packages/neo/contracts/ftw/smith/consts\";\nimport NumberFormat from \"react-number-format\";\nimport { IncubatorContract } from \"../../../../../packages/neo/contracts/ftw/incubator\";\n\nconst Form = (props) => {\n  const { network, connectedWallet, openWalletModal } = useWallet();\n  const [txid, setTxid] = useState<string>();\n  const [values, setValues] = useState({\n    tokenHash: \"\",\n    amount: \"\",\n    description: \"\",\n    website: \"\",\n  });\n  const handleValueChange = (key: string, val: string) => {\n    setValues({\n      ...values,\n      [key]: val,\n    });\n  };\n  const hasEmoji = detectEmojiInString(values) !== 0;\n  const onMint = async () => {\n    if (hasEmoji) {\n      toast.error(\n        \"Emoji is not supported yet. Please remove emojis and try again.\"\n      );\n    } else {\n      if (connectedWallet) {\n        try {\n        \tconsole.log(values)\n          const res = await new IncubatorContract(network).createPool(\n            connectedWallet,\n            values.tokenHash,\n            values.amount,\n            values.website,\n            values.description\n          );\n          setTxid(res);\n        } catch (e: any) {\n          toast.error(e.message);\n        }\n      } else {\n        toast.error(\"Please connect wallet.\");\n      }\n    }\n  };\n  return (\n    <div className=\"box\">\n      {txid ? (\n        <AfterTransactionSubmitted\n          network={network}\n          txid={txid}\n          onSuccess={() => setTxid(\"\")}\n          onError={() => setTxid(\"\")}\n        />\n      ) : (\n        <>\n          <h1 className=\"title\">Create a pool</h1>\n          <div className=\"content\">\n            Please read\n            <ul>\n              <li>Please do not use EMOJI or Unicode.</li>\n            </ul>\n          </div>\n          <hr />\n          <div className=\"field\">\n            <label className=\"label\">Token hash</label>\n            <div className=\"control\">\n              <input\n                value={values.tokenHash}\n                onChange={(e) => handleValueChange(\"tokenHash\", e.target.value)}\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Amount</label>\n            <div className=\"control\">\n              <NumberFormat\n                allowNegative={false}\n                decimalScale={0}\n                inputMode=\"decimal\"\n                className=\"input\"\n                value={values.amount}\n                onValueChange={(value) => {\n                  handleValueChange(\"amount\", value.value);\n                }}\n                allowLeadingZeros={false}\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Description</label>\n            <div className=\"control\">\n              <input\n                value={values.description}\n                onChange={(e) =>\n                  handleValueChange(\"description\", e.target.value)\n                }\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Website</label>\n            <div className=\"control\">\n              <input\n                value={values.website}\n                onChange={(e) => handleValueChange(\"website\", e.target.value)}\n                className=\"input\"\n                type=\"text\"\n              />\n            </div>\n          </div>\n          <hr />\n          {hasEmoji && (\n            <div className=\"notification is-danger\">\n              Emoji is not supported yet.\n            </div>\n          )}\n          <button\n            onClick={onMint}\n            disabled={\n              !values.tokenHash ||\n              !values.amount ||\n              !values.website ||\n              !values.description ||\n              hasEmoji\n            }\n            className=\"button is-primary\"\n          >\n            Create\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Form;\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/index.ts",["801"],"import { INetworkType, Network } from \"../../../network\";\nimport { IConnectedWallet } from \"../../../wallet/interfaces\";\nimport { wallet } from \"../../../index\";\nimport { base64ToHash160, toDecimal } from \"../../../utils\";\nimport { tx, u, wallet as NeonWallet } from \"@cityofzion/neon-core\";\nimport { parsePair, parsePoolInfoPaginate, parseSwapPaginate, parseUserStake } from \"./helpers\";\nimport { DEFAULT_WITNESS_SCOPE } from \"../../../consts\";\nimport { IPairInfo } from \"./interfaces\";\nimport { INCUBATOR_SCRIPT_HASH } from \"./consts\";\n\nexport class IncubatorContract {\n  network: INetworkType;\n  contractHash: string;\n\n  constructor(networkType: INetworkType) {\n    this.network = networkType;\n    this.contractHash = INCUBATOR_SCRIPT_HASH[networkType];\n  }\n\n  createPool = async (\n    connectedWallet: IConnectedWallet,\n    tokenHash: string,\n    amount: string,\n    description: string,\n    website: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"createPool\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenHash,\n        },\n        {\n          type: \"Integer\",\n          value: u.BigInteger.fromDecimal(amount, 8).toString(),\n        },\n        {\n          type: \"String\",\n          value: description,\n        },\n        {\n          type: \"String\",\n          value: website,\n        },\n      ],\n      signers: [\n        {\n          account: senderHash,\n          scopes: tx.WitnessScope.CustomContracts,\n          allowedContracts: [this.contractHash, tokenHash],\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript,\n      undefined,\n      undefined\n    );\n  };\n\n  remove = async (\n    connectedWallet: IConnectedWallet,\n    tokenA: string,\n    tokenB: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"removeLiquidity\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenA,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenB,\n        },\n      ],\n      signers: [DEFAULT_WITNESS_SCOPE(senderHash)],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript,\n      undefined,\n      undefined\n    );\n  };\n\n  claim = async (\n    connectedWallet: IConnectedWallet,\n    tokenA: string,\n    tokenB: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"claim\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenA,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenB,\n        },\n      ],\n      signers: [DEFAULT_WITNESS_SCOPE(senderHash)],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript,\n      undefined,\n      undefined\n    );\n  };\n\n  swap = async (\n    connectedWallet: IConnectedWallet,\n    tokenA: string,\n    amountA: string,\n    tokenB: string,\n    amountB: string\n  ): Promise<string> => {\n    const senderHash = NeonWallet.getScriptHashFromAddress(\n      connectedWallet.account.address\n    );\n    const invokeScript = {\n      operation: \"swap\",\n      scriptHash: this.contractHash,\n      args: [\n        {\n          type: \"Hash160\",\n          value: senderHash,\n        },\n        {\n          type: \"Hash160\",\n          value: tokenA,\n        },\n        {\n          type: \"Integer\",\n          value: u.BigInteger.fromDecimal(amountA, 8).toString(),\n        },\n        {\n          type: \"Hash160\",\n          value: tokenB,\n        },\n        {\n          type: \"Integer\",\n          value: u.BigInteger.fromDecimal(amountB, 8).toString(),\n        },\n      ],\n      signers: [\n        {\n          account: senderHash,\n          scopes: tx.WitnessScope.CustomContracts,\n          allowedContracts: [this.contractHash, tokenA],\n        },\n      ],\n    };\n    return new wallet.WalletAPI(connectedWallet.key).invoke(\n      this.network,\n      invokeScript,\n      undefined,\n      undefined\n    );\n  };\n\n  getPair = async (\n    tokenA: string,\n    tokenB: string,\n    connectedWallet?: IConnectedWallet\n  ): Promise<IPairInfo> => {\n    const scripts: any = [];\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getPair\",\n      args: [\n        { type: \"Hash160\", value: tokenA },\n        { type: \"Hash160\", value: tokenB },\n      ],\n    };\n    scripts.push(script);\n    if (connectedWallet) {\n      const script1 = {\n        scriptHash: tokenA,\n        operation: \"balanceOf\",\n        args: [{ type: \"Address\", value: connectedWallet.account.address }],\n      };\n      const script2 = {\n        scriptHash: tokenB,\n        operation: \"balanceOf\",\n        args: [{ type: \"Address\", value: connectedWallet.account.address }],\n      };\n      scripts.push(script1);\n      scripts.push(script2);\n    }\n    const res = await Network.read(this.network, scripts);\n    const pair = parsePair(res.stack[0]);\n    const obj = {\n      reserve: pair,\n      pair: {\n        [pair.tokenA]: pair.amountA,\n        [pair.tokenB]: pair.amountB,\n      },\n      // [pair.tokenA]: pair.amountA,\n      // [pair.tokenB]: pair.amountB,\n      balances: {\n        [tokenA]: 0,\n        [tokenB]: 0,\n      },\n    };\n    if (connectedWallet) {\n      obj.balances[tokenA] = toDecimal(res.stack[1].value as string);\n      obj.balances[tokenB] = toDecimal(res.stack[2].value as string);\n    }\n    return obj;\n  };\n\n  getPairs = async () => {\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getPairs\",\n      args: [],\n    };\n    try {\n      const res = await Network.read(this.network, [script], true);\n      // @ts-ignore\n      return res.stack[0].iterator.map((item) => {\n        const tokenA = base64ToHash160(item.value[0].value as string);\n        const tokenB = base64ToHash160(item.value[1].value as string);\n        const amountA = item.value[2].value;\n        const amountB = item.value[3].value;\n        return {\n          tokenA,\n          tokenB,\n          amountA: toDecimal(amountA),\n          amountB: toDecimal(amountB),\n        };\n      });\n    } catch (e) {\n      return [];\n    }\n  };\n\n  getEstimate = async (tokenA, tokenB, swapToken, amount) => {\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getEstimate\",\n      args: [\n        { type: \"Hash160\", value: tokenA },\n        { type: \"Hash160\", value: tokenB },\n        { type: \"Hash160\", value: swapToken },\n        {\n          type: \"Integer\",\n          value: u.BigInteger.fromDecimal(amount, 8).toString(),\n        },\n      ],\n    };\n    try {\n      const res = await Network.read(this.network, [script], true);\n      return toDecimal(res.stack[0].value as string);\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  getUserStake = async (\n    connectedWallet: IConnectedWallet,\n    tokenA: string,\n    tokenB: string\n  ) => {\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getUserStake\",\n      args: [\n        { type: \"Address\", value: connectedWallet.account.address },\n        { type: \"Hash160\", value: tokenA },\n        { type: \"Hash160\", value: tokenB },\n      ],\n    };\n    const script1 = {\n      scriptHash: this.contractHash,\n      operation: \"getPair\",\n      args: [\n        { type: \"Hash160\", value: tokenA },\n        { type: \"Hash160\", value: tokenB },\n      ],\n    };\n    try {\n      const res = await Network.read(this.network, [script, script1], true);\n      return {\n        stake: parseUserStake(res.stack[0]),\n        pair: parsePair(res.stack[1]),\n      };\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  getClaimAble = async (\n    connectedWallet: IConnectedWallet,\n    tokenA: string,\n    tokenB: string\n  ) => {\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getClaimableFee\",\n      args: [\n        { type: \"Hash160\", value: tokenA },\n        { type: \"Hash160\", value: tokenB },\n        { type: \"Address\", value: connectedWallet.account.address },\n      ],\n    };\n    try {\n      const res = await Network.read(this.network, [script], true);\n      return parseUserStake(res.stack[0]);\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  pools = async (page: string) => {\n    const script = {\n      scriptHash: this.contractHash,\n      operation: \"getPoolInfos\",\n      args: [{ type: \"Integer\", value: page }],\n    };\n    try {\n      const res = await Network.read(this.network, [script]);\n      return parsePoolInfoPaginate(res.stack[0].value);\n    } catch (e) {\n      return undefined;\n    }\n  };\n}\n","/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/consts.ts",[],"/Users/ed/Projects/FTW/client/src/packages/neo/contracts/ftw/incubator/helpers.ts",["802","803"],"import { u } from \"@cityofzion/neon-core\";\nimport {\n  base64ToAddress,\n  base64ToDate,\n  base64ToFixed8,\n  base64ToHash160,\n  base64ToString,\n  toDecimal,\n} from \"../../../utils\";\nimport { IPair } from \"./interfaces\";\n\nexport const getEstimate = (\n  amount: string,\n  reserveA: number,\n  reserveB: number\n): number => {\n  const fixed8TokenAmount = u.BigInteger.fromDecimal(amount, 8).toString();\n  // let keys = Object.keys(pairInfo);\n  // keys = keys.filter((k) => k !== token);\n  // const reservedA = pairInfo[token];\n  // const reservedB = pairInfo[keys[0]];\n  let estimated = (parseFloat(fixed8TokenAmount) * reserveB) / reserveA;\n  estimated = Math.floor(estimated);\n  return toDecimal(estimated.toString());\n};\n\nexport const getUserShare = (totalShares, userShare, poolA, poolB) => {\n  // totalShares = parseFloat(totalShares);\n  // userShare = parseFloat(userShare);\n  // poolA = parseFloat(poolA);\n  // poolB = parseFloat(poolB);\n  return {\n    amountA: (poolA * userShare) / totalShares,\n    amountB: (poolB * userShare) / totalShares,\n  };\n};\n\nexport const parseUserStake = (stackItem) => {\n  return {\n    tokenA: base64ToHash160(stackItem.value[0].value as string),\n    tokenB: base64ToHash160(stackItem.value[1].value as string),\n    amountA: toDecimal(stackItem.value[2].value),\n    amountB: toDecimal(stackItem.value[3].value),\n  };\n};\n\nexport const parsePair = (stackItem): IPair => {\n  return {\n    tokenA: base64ToHash160(stackItem.value[0].value as string),\n    tokenB: base64ToHash160(stackItem.value[1].value as string),\n    amountA: toDecimal(stackItem.value[2].value),\n    amountB: toDecimal(stackItem.value[3].value),\n    totalShare: toDecimal(stackItem.value[4].value),\n  };\n};\n\nexport const parseSwapPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parseSwap(stackItem[3].value),\n  };\n};\n\nconst parseSwap = (stackItem) => {\n  return stackItem.map((item) => {\n    return {\n      tokenIn: base64ToHash160(item.value[0].value),\n      tokenOut: base64ToHash160(item.value[1].value), // NEO amount\n      tokenInAmount: toDecimal(item.value[2].value), // NEO amount\n      tokenOutAmount: toDecimal(item.value[3].value),\n    };\n  });\n};\n\nexport const parsePoolInfoPaginate = (stackItem: any) => {\n  return {\n    totalItems: stackItem[0].value,\n    totalPages: stackItem[1].value,\n    page: stackItem[2].value,\n    items: parsePoolInfo(stackItem[3].value),\n  };\n};\n\nconst parsePoolInfo = (stackItem) => {\n  console.log(stackItem);\n  return stackItem.map((item) => {\n    return {\n      totalSupply: toDecimal(item.value[0].value),\n      name: base64ToString(item.value[1].value), // NEO amount\n      symbol: base64ToString(item.value[2].value), // NEO amount\n      decimals: item.value[3].value,\n      website: base64ToString(item.value[4].value),\n      description: base64ToString(item.value[5].value),\n      initialFTWAmount: toDecimal(item.value[6].value),\n      initialAmount: toDecimal(item.value[7].value),\n      creator: base64ToAddress(item.value[8].value),\n    };\n  });\n};\n","/Users/ed/Projects/FTW/client/src/ui/pages/Incubator/scenes/Pools/index.tsx",["804","805","806"],"import React, { useEffect, useState } from \"react\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { IncubatorContract } from \"../../../../../packages/neo/contracts/ftw/incubator\";\nimport { Link } from \"react-router-dom\";\nimport { INCUBATOR_POOL_PATH } from \"../../../../../consts\";\n\nconst Pools = (props) => {\n  const { network, connectedWallet } = useWallet();\n  const [data, setData] = useState<any>();\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetch() {\n      setLoading(true);\n      try {\n        const res = await new IncubatorContract(network).pools(\"1\");\n        // tslint:disable-next-line:no-console\n        console.log(res);\n        setLoading(false);\n        setData(res as any);\n      } catch (e: any) {\n        setLoading(false);\n        setError(e.message);\n      }\n    }\n    fetch();\n  }, []);\n  if (isLoading) return <div>Loading pairs..</div>;\n  console.log(data);\n  return (\n    <div className=\"box\">\n      {data &&\n        data.items.map((item) => {\n          const lockedPercent = (item.initialAmount / item.totalSupply) * 100;\n          return (\n            <div className=\"media\">\n              <div className=\"media-content\">\n                <div className=\"content\">\n                  <strong>{item.name}</strong>\n                  <br />\n                  {item.description}\n                  <br />\n                  {item.website}\n                </div>\n                <div className=\"content is-small\">\n                  Locked supply: {item.initialAmount} ({lockedPercent}%)\n                  <br />\n                  Symbol: {item.symbol}\n                </div>\n              </div>\n              <div className=\"media-right\">\n                <Link className=\"button is-info\" to={INCUBATOR_POOL_PATH + \"/\"}>\n                  Trade\n                </Link>\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Pools;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/PairSelect/index.tsx",[],"/Users/ed/Projects/FTW/client/src/ui/pages/Swap/scenes/Farm/scenes/CreatePool/index.tsx",["807","808","809"],"import React, { useState } from \"react\";\nimport { wallet } from \"@cityofzion/neon-core\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  FTW_SCRIPT_HASH,\n  NUDES_SCRIPT_HASH,\n  SwapContract,\n} from \"../../../../../../../packages/neo/contracts\";\nimport { useWallet } from \"../../../../../../../packages/provider\";\nimport { useHistory } from \"react-router-dom\";\nimport { SWAP_PATH_LIQUIDITY } from \"../../../../../../../consts\";\n\nconst CreatePool = (props) => {\n  const { network } = useWallet();\n  const history = useHistory();\n  const [tokenA, setTokenA] = useState<string | undefined>();\n  const [tokenB, setTokenB] = useState<string | undefined>();\n  const [isLoading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const handleSubmit = async () => {\n    setErrors([]);\n    setLoading(true);\n    const _errors: string[] = [];\n\n    if (\n      !wallet.isScriptHash(tokenA as string) ||\n      !wallet.isScriptHash(tokenB as string)\n    ) {\n      _errors.push(\"Check contract hashes\");\n    }\n\n    if (tokenA === tokenB) {\n      _errors.push(\"Token A and Token B cannot be the same.\");\n    }\n\n    if (_errors.length === 0) {\n      const res = await new SwapContract(network).getContractHashes(\n        // @ts-ignore\n        tokenA,\n        tokenB\n      );\n\n      if (res.tokenA.decimals !== \"8\" || res.tokenB.decimals !== \"8\") {\n        _errors.push(\"We only can support tokens with 8 decimals.\");\n      }\n\n      if (res.reserve.amountA === 0 || res.reserve.amountB !== 0) {\n        _errors.push(\"There is existing pool.\");\n      }\n    }\n\n    if (_errors.length === 0) {\n      history.push(`${SWAP_PATH_LIQUIDITY}?tokenA=${tokenA}&tokenB=${tokenB}`);\n    } else {\n      setLoading(false);\n      setErrors(_errors);\n    }\n  };\n  return (\n    <div>\n      <h1 className=\"title\">Create a new swap pool</h1>\n      {errors.length > 0 ? (\n        <div className=\"notification is-danger content\">\n          <strong>Please check following messages</strong>\n          <br />\n          <ul>\n            {errors.map((err) => (\n              <li key={err}>{err}</li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"notification is-info\">\n          <strong>Liquidity Provider Rewards</strong>\n          <br />\n          Liquidity providers earn a 0.25% fee on all trades proportional to\n          their share of the pool. Fees are added to the pool, accrue in real\n          time and can be claimed by withdrawing your liquidity.\n        </div>\n      )}\n\n      <hr />\n      <div className=\"field\">\n        <label className=\"label\">Token A</label>\n        <input\n          value={tokenA}\n          onChange={(e: any) => setTokenA(e.target.value)}\n          className=\"input\"\n        />\n      </div>\n      <div className=\"field\">\n        <label className=\"label\">Token B</label>\n        <input\n          value={tokenB}\n          onChange={(e: any) => setTokenB(e.target.value)}\n          className=\"input\"\n        />\n      </div>\n      <hr />\n      <button\n        onClick={handleSubmit}\n        disabled={!tokenA || !tokenB}\n        className={`button is-primary ${isLoading ? \"is-loading\" : \"\"}`}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default CreatePool;\n","/Users/ed/Projects/FTW/client/src/ui/pages/Swap/components/PoolCard/index.tsx",["810","811"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { SWAP_PATH_HISTORY, SWAP_PATH_TRADE } from \"../../../../../consts\";\nimport { ASSET_LIST } from \"../../../../../packages/neo/contracts/ftw/swap/consts\";\nimport { useWallet } from \"../../../../../packages/provider\";\nimport { SwapContract } from \"../../../../../packages/neo/contracts\";\n\ninterface IPoolCardProps {\n  tokenA: string;\n  tokenB: string;\n  amountA: number;\n  amountB: number;\n}\nconst PoolCard = ({ tokenA, tokenB, amountA, amountB }: IPoolCardProps) => {\n  const { network } = useWallet();\n  const [tokenASymbol, setTokenASymbol] = useState(\"\");\n  const [tokenBSymbol, setTokenBSymbol] = useState(\"\");\n  useEffect(() => {\n    async function fetchTokenInfo() {\n      const res = await new SwapContract(network).getContractHashes(\n\t      tokenA,\n\t      tokenB\n      );\n      setTokenASymbol(res.tokenA.symbol);\n      setTokenBSymbol(res.tokenB.symbol);\n    }\n    fetchTokenInfo();\n  }, [tokenA, tokenB]);\n  return (\n    <div style={{ alignItems: \"center\" }} className=\"media\">\n      <div className=\"media-left\">\n        <strong>TVL</strong>\n      </div>\n      <div className=\"media-content is-vcentered\">\n        {tokenASymbol} / {tokenBSymbol}\n        <br />\n        <small>\n          {amountA.toLocaleString()} / {amountB.toLocaleString()}\n        </small>\n        <br />\n        <Link\n          to={{\n            pathname: `${SWAP_PATH_HISTORY}`,\n            search: `?tokenA=${tokenA}&tokenB=${tokenB}&symbolA=${tokenASymbol}&symbolB=${tokenBSymbol}`,\n          }}\n        >\n          Swap history\n        </Link>\n        {/*<br />*/}\n        {/*<Link*/}\n        {/*  to={{*/}\n        {/*    pathname: `${SWAP_PATH_LIQUIDITY}`,*/}\n        {/*    search: `?tokenA=${item.tokenA}&tokenB=${item.tokenB}`,*/}\n        {/*  }}*/}\n        {/*>*/}\n        {/*  Add liquidity*/}\n        {/*</Link>*/}\n      </div>\n      <div className=\"media-right\">\n        <Link\n          to={{\n            pathname: `${SWAP_PATH_TRADE}`,\n            search: `?tokenA=${tokenA}&tokenB=${tokenB}&symbolA=${tokenASymbol}&symbolB=${tokenBSymbol}`,\n          }}\n          // onClick={() => setDetail(item)}\n          className=\"button is-primary\"\n        >\n          Trade\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default PoolCard;\n",{"ruleId":"812","replacedBy":"813"},{"ruleId":"814","replacedBy":"815"},{"ruleId":"816","severity":1,"message":"817","line":29,"column":9,"nodeType":"818","messageId":"819","endLine":29,"endColumn":28},{"ruleId":"820","severity":1,"message":"821","line":84,"column":21,"nodeType":"822","endLine":87,"endColumn":23},{"ruleId":"823","severity":1,"message":"824","line":99,"column":15,"nodeType":"822","endLine":99,"endColumn":75},{"ruleId":"825","severity":1,"message":"826","line":147,"column":13,"nodeType":"822","messageId":"827","endLine":151,"endColumn":14,"fix":"828"},{"ruleId":"825","severity":1,"message":"826","line":154,"column":13,"nodeType":"822","messageId":"827","endLine":158,"endColumn":14,"fix":"829"},{"ruleId":"825","severity":1,"message":"826","line":161,"column":13,"nodeType":"822","messageId":"827","endLine":165,"endColumn":14,"fix":"830"},{"ruleId":"816","severity":1,"message":"831","line":5,"column":10,"nodeType":"818","messageId":"819","endLine":5,"endColumn":20},{"ruleId":"832","severity":1,"message":"833","line":50,"column":6,"nodeType":"834","endLine":50,"endColumn":30,"suggestions":"835"},{"ruleId":"823","severity":1,"message":"824","line":63,"column":19,"nodeType":"822","endLine":63,"endColumn":55},{"ruleId":"823","severity":1,"message":"824","line":67,"column":21,"nodeType":"822","endLine":67,"endColumn":59},{"ruleId":"823","severity":1,"message":"824","line":71,"column":19,"nodeType":"822","endLine":71,"endColumn":60},{"ruleId":"823","severity":1,"message":"824","line":74,"column":19,"nodeType":"822","endLine":74,"endColumn":56},{"ruleId":"820","severity":1,"message":"821","line":57,"column":21,"nodeType":"822","endLine":57,"endColumn":46},{"ruleId":"816","severity":1,"message":"836","line":3,"column":10,"nodeType":"818","messageId":"819","endLine":3,"endColumn":14},{"ruleId":"820","severity":1,"message":"821","line":89,"column":15,"nodeType":"822","endLine":89,"endColumn":40},{"ruleId":"832","severity":1,"message":"837","line":84,"column":6,"nodeType":"834","endLine":84,"endColumn":8,"suggestions":"838"},{"ruleId":"820","severity":1,"message":"821","line":101,"column":17,"nodeType":"822","endLine":101,"endColumn":65},{"ruleId":"823","severity":1,"message":"824","line":117,"column":11,"nodeType":"822","endLine":117,"endColumn":73},{"ruleId":"823","severity":1,"message":"824","line":43,"column":17,"nodeType":"822","endLine":43,"endColumn":59},{"ruleId":"825","severity":1,"message":"826","line":64,"column":11,"nodeType":"822","messageId":"827","endLine":68,"endColumn":12,"fix":"839"},{"ruleId":"825","severity":1,"message":"826","line":71,"column":11,"nodeType":"822","messageId":"827","endLine":75,"endColumn":12,"fix":"840"},{"ruleId":"825","severity":1,"message":"826","line":78,"column":11,"nodeType":"822","messageId":"827","endLine":82,"endColumn":12,"fix":"841"},{"ruleId":"816","severity":1,"message":"842","line":14,"column":10,"nodeType":"818","messageId":"819","endLine":14,"endColumn":14},{"ruleId":"816","severity":1,"message":"843","line":3,"column":8,"nodeType":"818","messageId":"819","endLine":3,"endColumn":25},{"ruleId":"832","severity":1,"message":"844","line":31,"column":6,"nodeType":"834","endLine":31,"endColumn":15,"suggestions":"845"},{"ruleId":"820","severity":1,"message":"821","line":47,"column":13,"nodeType":"822","endLine":47,"endColumn":37},{"ruleId":"816","severity":1,"message":"846","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":20},{"ruleId":"816","severity":1,"message":"847","line":4,"column":8,"nodeType":"818","messageId":"819","endLine":4,"endColumn":25},{"ruleId":"816","severity":1,"message":"848","line":17,"column":17,"nodeType":"818","messageId":"819","endLine":17,"endColumn":20},{"ruleId":"832","severity":1,"message":"849","line":29,"column":6,"nodeType":"834","endLine":29,"endColumn":27,"suggestions":"850"},{"ruleId":"812","replacedBy":"851"},{"ruleId":"814","replacedBy":"852"},{"ruleId":"816","severity":1,"message":"853","line":5,"column":10,"nodeType":"818","messageId":"819","endLine":5,"endColumn":20},{"ruleId":"816","severity":1,"message":"854","line":14,"column":10,"nodeType":"818","messageId":"819","endLine":14,"endColumn":26},{"ruleId":"816","severity":1,"message":"855","line":15,"column":10,"nodeType":"818","messageId":"819","endLine":15,"endColumn":25},{"ruleId":"812","replacedBy":"856"},{"ruleId":"814","replacedBy":"857"},{"ruleId":"816","severity":1,"message":"858","line":3,"column":8,"nodeType":"818","messageId":"819","endLine":3,"endColumn":18},{"ruleId":"816","severity":1,"message":"859","line":22,"column":10,"nodeType":"818","messageId":"819","endLine":22,"endColumn":15},{"ruleId":"832","severity":1,"message":"860","line":40,"column":6,"nodeType":"834","endLine":40,"endColumn":34,"suggestions":"861"},{"ruleId":"832","severity":1,"message":"862","line":69,"column":10,"nodeType":"834","endLine":69,"endColumn":29,"suggestions":"863"},{"ruleId":"823","severity":1,"message":"824","line":18,"column":13,"nodeType":"822","endLine":22,"endColumn":14},{"ruleId":"820","severity":1,"message":"821","line":24,"column":17,"nodeType":"822","endLine":24,"endColumn":57},{"ruleId":"816","severity":1,"message":"864","line":11,"column":10,"nodeType":"818","messageId":"819","endLine":11,"endColumn":16},{"ruleId":"816","severity":1,"message":"859","line":12,"column":10,"nodeType":"818","messageId":"819","endLine":12,"endColumn":15},{"ruleId":"832","severity":1,"message":"833","line":32,"column":6,"nodeType":"834","endLine":32,"endColumn":23,"suggestions":"865"},{"ruleId":"812","replacedBy":"866"},{"ruleId":"814","replacedBy":"867"},{"ruleId":"820","severity":1,"message":"821","line":34,"column":13,"nodeType":"822","endLine":34,"endColumn":61},{"ruleId":"823","severity":1,"message":"868","line":47,"column":11,"nodeType":"822","endLine":51,"endColumn":12},{"ruleId":"816","severity":1,"message":"869","line":16,"column":3,"nodeType":"818","messageId":"819","endLine":16,"endColumn":26},{"ruleId":"870","severity":1,"message":"871","line":117,"column":26,"nodeType":"872","messageId":"873","endLine":117,"endColumn":28},{"ruleId":"870","severity":1,"message":"871","line":63,"column":33,"nodeType":"872","messageId":"873","endLine":63,"endColumn":35},{"ruleId":"870","severity":1,"message":"871","line":228,"column":28,"nodeType":"872","messageId":"873","endLine":228,"endColumn":30},{"ruleId":"870","severity":1,"message":"871","line":8,"column":33,"nodeType":"872","messageId":"873","endLine":8,"endColumn":35},{"ruleId":"816","severity":1,"message":"874","line":2,"column":40,"nodeType":"818","messageId":"819","endLine":2,"endColumn":54},{"ruleId":"832","severity":1,"message":"860","line":43,"column":6,"nodeType":"834","endLine":43,"endColumn":38,"suggestions":"875"},{"ruleId":"816","severity":1,"message":"876","line":30,"column":10,"nodeType":"818","messageId":"819","endLine":30,"endColumn":19},{"ruleId":"816","severity":1,"message":"859","line":31,"column":10,"nodeType":"818","messageId":"819","endLine":31,"endColumn":15},{"ruleId":"832","severity":1,"message":"877","line":53,"column":6,"nodeType":"834","endLine":53,"endColumn":23,"suggestions":"878"},{"ruleId":"820","severity":1,"message":"821","line":68,"column":17,"nodeType":"822","endLine":68,"endColumn":43},{"ruleId":"820","severity":1,"message":"821","line":92,"column":25,"nodeType":"822","endLine":92,"endColumn":50},{"ruleId":"816","severity":1,"message":"879","line":5,"column":10,"nodeType":"818","messageId":"819","endLine":5,"endColumn":33},{"ruleId":"820","severity":1,"message":"821","line":14,"column":11,"nodeType":"822","endLine":14,"endColumn":35},{"ruleId":"832","severity":1,"message":"833","line":45,"column":6,"nodeType":"834","endLine":45,"endColumn":15,"suggestions":"880"},{"ruleId":"820","severity":1,"message":"821","line":56,"column":11,"nodeType":"822","endLine":56,"endColumn":36},{"ruleId":"832","severity":1,"message":"833","line":39,"column":6,"nodeType":"834","endLine":39,"endColumn":15,"suggestions":"881"},{"ruleId":"820","severity":1,"message":"821","line":47,"column":7,"nodeType":"822","endLine":47,"endColumn":32},{"ruleId":"832","severity":1,"message":"860","line":59,"column":6,"nodeType":"834","endLine":59,"endColumn":41,"suggestions":"882"},{"ruleId":"816","severity":1,"message":"883","line":2,"column":40,"nodeType":"818","messageId":"819","endLine":2,"endColumn":55},{"ruleId":"816","severity":1,"message":"884","line":1,"column":28,"nodeType":"818","messageId":"819","endLine":1,"endColumn":34},{"ruleId":"825","severity":1,"message":"826","line":22,"column":11,"nodeType":"822","messageId":"827","endLine":29,"endColumn":12,"fix":"885"},{"ruleId":"816","severity":1,"message":"886","line":17,"column":37,"nodeType":"818","messageId":"819","endLine":17,"endColumn":52},{"ruleId":"816","severity":1,"message":"884","line":1,"column":28,"nodeType":"818","messageId":"819","endLine":1,"endColumn":34},{"ruleId":"825","severity":1,"message":"826","line":26,"column":11,"nodeType":"822","messageId":"827","endLine":33,"endColumn":12,"fix":"887"},{"ruleId":"816","severity":1,"message":"888","line":9,"column":10,"nodeType":"818","messageId":"819","endLine":9,"endColumn":16},{"ruleId":"825","severity":1,"message":"826","line":66,"column":17,"nodeType":"822","messageId":"827","endLine":74,"endColumn":18,"fix":"889"},{"ruleId":"832","severity":1,"message":"890","line":26,"column":6,"nodeType":"834","endLine":26,"endColumn":15,"suggestions":"891"},{"ruleId":"820","severity":1,"message":"821","line":28,"column":10,"nodeType":"822","endLine":28,"endColumn":62},{"ruleId":"832","severity":1,"message":"833","line":36,"column":6,"nodeType":"834","endLine":36,"endColumn":12,"suggestions":"892"},{"ruleId":"825","severity":1,"message":"826","line":73,"column":15,"nodeType":"822","messageId":"827","endLine":78,"endColumn":16,"fix":"893"},{"ruleId":"816","severity":1,"message":"894","line":5,"column":17,"nodeType":"818","messageId":"819","endLine":5,"endColumn":26},{"ruleId":"832","severity":1,"message":"895","line":51,"column":6,"nodeType":"834","endLine":51,"endColumn":8,"suggestions":"896"},{"ruleId":"820","severity":1,"message":"821","line":54,"column":5,"nodeType":"822","endLine":54,"endColumn":78},{"ruleId":"832","severity":1,"message":"897","line":30,"column":6,"nodeType":"834","endLine":30,"endColumn":8,"suggestions":"898"},{"ruleId":"820","severity":1,"message":"821","line":33,"column":5,"nodeType":"822","endLine":33,"endColumn":77},{"ruleId":"812","replacedBy":"899"},{"ruleId":"814","replacedBy":"900"},{"ruleId":"816","severity":1,"message":"901","line":1,"column":17,"nodeType":"818","messageId":"819","endLine":1,"endColumn":26},{"ruleId":"816","severity":1,"message":"902","line":1,"column":28,"nodeType":"818","messageId":"819","endLine":1,"endColumn":36},{"ruleId":"816","severity":1,"message":"903","line":7,"column":10,"nodeType":"818","messageId":"819","endLine":7,"endColumn":22},{"ruleId":"820","severity":1,"message":"821","line":54,"column":27,"nodeType":"822","endLine":54,"endColumn":45},{"ruleId":"816","severity":1,"message":"904","line":4,"column":3,"nodeType":"818","messageId":"819","endLine":4,"endColumn":18},{"ruleId":"816","severity":1,"message":"905","line":12,"column":10,"nodeType":"818","messageId":"819","endLine":12,"endColumn":20},{"ruleId":"832","severity":1,"message":"906","line":169,"column":6,"nodeType":"834","endLine":169,"endColumn":16,"suggestions":"907"},{"ruleId":"832","severity":1,"message":"908","line":164,"column":6,"nodeType":"834","endLine":164,"endColumn":22,"suggestions":"909"},{"ruleId":"816","severity":1,"message":"910","line":3,"column":3,"nodeType":"818","messageId":"819","endLine":3,"endColumn":19},{"ruleId":"816","severity":1,"message":"911","line":5,"column":3,"nodeType":"818","messageId":"819","endLine":5,"endColumn":19},{"ruleId":"823","severity":1,"message":"824","line":85,"column":19,"nodeType":"822","endLine":89,"endColumn":20},{"ruleId":"820","severity":1,"message":"821","line":91,"column":23,"nodeType":"822","endLine":91,"endColumn":41},{"ruleId":"823","severity":1,"message":"824","line":100,"column":13,"nodeType":"822","endLine":104,"endColumn":14},{"ruleId":"816","severity":1,"message":"912","line":3,"column":3,"nodeType":"818","messageId":"819","endLine":3,"endColumn":15},{"ruleId":"816","severity":1,"message":"913","line":4,"column":3,"nodeType":"818","messageId":"819","endLine":4,"endColumn":17},{"ruleId":"816","severity":1,"message":"859","line":20,"column":10,"nodeType":"818","messageId":"819","endLine":20,"endColumn":15},{"ruleId":"816","severity":1,"message":"914","line":20,"column":17,"nodeType":"818","messageId":"819","endLine":20,"endColumn":25},{"ruleId":"832","severity":1,"message":"915","line":82,"column":6,"nodeType":"834","endLine":82,"endColumn":17,"suggestions":"916"},{"ruleId":"820","severity":1,"message":"821","line":18,"column":14,"nodeType":"822","endLine":18,"endColumn":31},{"ruleId":"820","severity":1,"message":"821","line":62,"column":23,"nodeType":"822","endLine":62,"endColumn":48},{"ruleId":"816","severity":1,"message":"917","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":15},{"ruleId":"816","severity":1,"message":"918","line":3,"column":10,"nodeType":"818","messageId":"819","endLine":3,"endColumn":28},{"ruleId":"816","severity":1,"message":"919","line":4,"column":8,"nodeType":"818","messageId":"819","endLine":4,"endColumn":33},{"ruleId":"816","severity":1,"message":"920","line":6,"column":10,"nodeType":"818","messageId":"819","endLine":6,"endColumn":21},{"ruleId":"820","severity":1,"message":"821","line":67,"column":23,"nodeType":"822","endLine":67,"endColumn":48},{"ruleId":"870","severity":1,"message":"871","line":6,"column":30,"nodeType":"872","messageId":"873","endLine":6,"endColumn":32},{"ruleId":"816","severity":1,"message":"921","line":6,"column":10,"nodeType":"818","messageId":"819","endLine":6,"endColumn":31},{"ruleId":"820","severity":1,"message":"821","line":83,"column":23,"nodeType":"822","endLine":83,"endColumn":48},{"ruleId":"820","severity":1,"message":"821","line":105,"column":29,"nodeType":"822","endLine":105,"endColumn":55},{"ruleId":"825","severity":1,"message":"826","line":44,"column":19,"nodeType":"822","messageId":"827","endLine":48,"endColumn":20,"fix":"922"},{"ruleId":"825","severity":1,"message":"826","line":85,"column":19,"nodeType":"822","messageId":"827","endLine":89,"endColumn":20,"fix":"923"},{"ruleId":"825","severity":1,"message":"826","line":104,"column":19,"nodeType":"822","messageId":"827","endLine":108,"endColumn":20,"fix":"924"},{"ruleId":"825","severity":1,"message":"826","line":116,"column":19,"nodeType":"822","messageId":"827","endLine":120,"endColumn":20,"fix":"925"},{"ruleId":"816","severity":1,"message":"859","line":17,"column":10,"nodeType":"818","messageId":"819","endLine":17,"endColumn":15},{"ruleId":"832","severity":1,"message":"926","line":43,"column":6,"nodeType":"834","endLine":43,"endColumn":29,"suggestions":"927"},{"ruleId":"816","severity":1,"message":"905","line":2,"column":10,"nodeType":"818","messageId":"819","endLine":2,"endColumn":20},{"ruleId":"816","severity":1,"message":"928","line":5,"column":3,"nodeType":"818","messageId":"819","endLine":5,"endColumn":20},{"ruleId":"816","severity":1,"message":"929","line":7,"column":3,"nodeType":"818","messageId":"819","endLine":7,"endColumn":18},{"ruleId":"816","severity":1,"message":"859","line":22,"column":10,"nodeType":"818","messageId":"819","endLine":22,"endColumn":15},{"ruleId":"832","severity":1,"message":"833","line":37,"column":6,"nodeType":"834","endLine":37,"endColumn":8,"suggestions":"930"},{"ruleId":"816","severity":1,"message":"931","line":2,"column":8,"nodeType":"818","messageId":"819","endLine":2,"endColumn":17},{"ruleId":"816","severity":1,"message":"932","line":4,"column":8,"nodeType":"818","messageId":"819","endLine":4,"endColumn":15},{"ruleId":"816","severity":1,"message":"933","line":9,"column":3,"nodeType":"818","messageId":"819","endLine":9,"endColumn":13},{"ruleId":"816","severity":1,"message":"934","line":10,"column":3,"nodeType":"818","messageId":"819","endLine":10,"endColumn":19},{"ruleId":"816","severity":1,"message":"935","line":18,"column":11,"nodeType":"818","messageId":"819","endLine":18,"endColumn":18},{"ruleId":"816","severity":1,"message":"928","line":6,"column":3,"nodeType":"818","messageId":"819","endLine":6,"endColumn":20},{"ruleId":"816","severity":1,"message":"936","line":1,"column":28,"nodeType":"818","messageId":"819","endLine":1,"endColumn":35},{"ruleId":"816","severity":1,"message":"937","line":3,"column":10,"nodeType":"818","messageId":"819","endLine":3,"endColumn":25},{"ruleId":"816","severity":1,"message":"938","line":9,"column":10,"nodeType":"818","messageId":"819","endLine":9,"endColumn":21},{"ruleId":"816","severity":1,"message":"939","line":20,"column":8,"nodeType":"818","messageId":"819","endLine":20,"endColumn":13},{"ruleId":"832","severity":1,"message":"906","line":155,"column":6,"nodeType":"834","endLine":155,"endColumn":16,"suggestions":"940"},{"ruleId":"812","replacedBy":"941"},{"ruleId":"814","replacedBy":"942"},{"ruleId":"820","severity":1,"message":"821","line":49,"column":21,"nodeType":"822","endLine":49,"endColumn":45},{"ruleId":"823","severity":1,"message":"824","line":38,"column":17,"nodeType":"822","endLine":42,"endColumn":18},{"ruleId":"820","severity":1,"message":"821","line":44,"column":21,"nodeType":"822","endLine":44,"endColumn":39},{"ruleId":"816","severity":1,"message":"943","line":5,"column":10,"nodeType":"818","messageId":"819","endLine":5,"endColumn":22},{"ruleId":"816","severity":1,"message":"944","line":6,"column":10,"nodeType":"818","messageId":"819","endLine":6,"endColumn":23},{"ruleId":"816","severity":1,"message":"945","line":7,"column":8,"nodeType":"818","messageId":"819","endLine":7,"endColumn":13},{"ruleId":"816","severity":1,"message":"853","line":9,"column":10,"nodeType":"818","messageId":"819","endLine":9,"endColumn":20},{"ruleId":"816","severity":1,"message":"886","line":14,"column":37,"nodeType":"818","messageId":"819","endLine":14,"endColumn":52},{"ruleId":"816","severity":1,"message":"946","line":6,"column":44,"nodeType":"818","messageId":"819","endLine":6,"endColumn":61},{"ruleId":"816","severity":1,"message":"912","line":4,"column":3,"nodeType":"818","messageId":"819","endLine":4,"endColumn":15},{"ruleId":"816","severity":1,"message":"913","line":5,"column":3,"nodeType":"818","messageId":"819","endLine":5,"endColumn":17},{"ruleId":"816","severity":1,"message":"947","line":8,"column":20,"nodeType":"818","messageId":"819","endLine":8,"endColumn":35},{"ruleId":"816","severity":1,"message":"859","line":11,"column":10,"nodeType":"818","messageId":"819","endLine":11,"endColumn":15},{"ruleId":"832","severity":1,"message":"833","line":28,"column":6,"nodeType":"834","endLine":28,"endColumn":8,"suggestions":"948"},{"ruleId":"816","severity":1,"message":"917","line":3,"column":10,"nodeType":"818","messageId":"819","endLine":3,"endColumn":15},{"ruleId":"816","severity":1,"message":"904","line":5,"column":3,"nodeType":"818","messageId":"819","endLine":5,"endColumn":18},{"ruleId":"816","severity":1,"message":"949","line":6,"column":3,"nodeType":"818","messageId":"819","endLine":6,"endColumn":20},{"ruleId":"816","severity":1,"message":"905","line":4,"column":10,"nodeType":"818","messageId":"819","endLine":4,"endColumn":20},{"ruleId":"832","severity":1,"message":"833","line":28,"column":6,"nodeType":"834","endLine":28,"endColumn":22,"suggestions":"950"},"no-native-reassign",["951"],"no-negated-in-lhs",["952"],"@typescript-eslint/no-unused-vars","'handleSwitchNetwork' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"953","text":"954"},{"range":"955","text":"954"},{"range":"956","text":"954"},"'ARENA_PATH' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'network'. Either include it or remove the dependency array.","ArrayExpression",["957"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'connectWallet', 'connectedWallet.key', and 'disConnectWallet'. Either include them or remove the dependency array.",["958"],{"range":"959","text":"954"},{"range":"960","text":"954"},{"range":"961","text":"954"},"'txid' is assigned a value but never used.","'SnapshotCountdown' is defined but never used.","React Hook useEffect has a missing dependency: 'tokenId'. Either include it or remove the dependency array.",["962"],"'RUNE_PRICE' is defined but never used.","'DisplayRandomRune' is defined but never used.","'res' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'network' and 'removePendingTransaction'. Either include them or remove the dependency array.",["963"],["951"],["952"],"'DEPLOY_FEE' is defined but never used.","'RUNE_SCRIPT_HASH' is defined but never used.","'TTM_SCRIPT_HASH' is defined but never used.",["951"],["952"],"'PageLayout' is defined but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'arenaNo'. Either include it or remove the dependency array.",["964"],"React Hook React.useMemo has a missing dependency: 'arenaNo'. Either include it or remove the dependency array.",["965"],"'tokens' is assigned a value but never used.",["966"],["951"],["952"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'GetRawTransactionResult' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'base64ToString' is defined but never used.",["967"],"'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arenaNo', 'connectedWallet', and 'player.tokenId'. Either include them or remove the dependency array.",["968"],"'TOURNAMENT_TIME_PADDING' is defined but never used.",["969"],["970"],["971"],"'TOURNAMENT_PATH' is defined but never used.","'useRef' is defined but never used.",{"range":"972","text":"954"},"'openWalletModal' is assigned a value but never used.",{"range":"973","text":"954"},"'wallet' is defined but never used.",{"range":"974","text":"954"},"React Hook useEffect has missing dependencies: 'contractHash' and 'network'. Either include them or remove the dependency array.",["975"],["976"],{"range":"977","text":"954"},"'setColors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBg' needs the current value of 'colors'.",["978"],"React Hook useEffect has a missing dependency: 'isActive'. Either include it or remove the dependency array.",["979"],["951"],["952"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'SwapContract' is defined but never used.","'FTW_SCRIPT_HASH' is defined but never used.","'ASSET_LIST' is defined but never used.","React Hook useEffect has missing dependencies: 'loadPair', 'params.tokenA', and 'params.tokenB'. Either include them or remove the dependency array.",["980"],"React Hook useEffect has missing dependencies: 'amountA', 'amountB', 'connectedWallet', and 'network'. Either include them or remove the dependency array.",["981"],"'DOGE_SCRIPT_HASH' is defined but never used.","'MOON_SCRIPT_HASH' is defined but never used.","'base64ToDate' is defined but never used.","'base64ToFixed8' is defined but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'connectedWallet', 'network', 'tokenA', and 'tokenB'. Either include them or remove the dependency array.",["982"],"'toast' is defined but never used.","'TournamentContract' is defined but never used.","'AfterTransactionSubmitted' is defined but never used.","'NFTContract' is defined but never used.","'DEFAULT_WITNESS_SCOPE' is defined but never used.",{"range":"983","text":"954"},{"range":"984","text":"954"},{"range":"985","text":"954"},{"range":"986","text":"954"},"React Hook useEffect has missing dependencies: 'network', 'tokenA', and 'tokenB'. Either include them or remove the dependency array.",["987"],"'SWAP_PATH_HISTORY' is defined but never used.","'SWAP_PATH_TRADE' is defined but never used.",["988"],"'NavSwitch' is defined but never used.","'SwapBox' is defined but never used.","'SMITH_PATH' is defined but never used.","'SMITH_PATH_NEP11' is defined but never used.","'network' is assigned a value but never used.","'useMemo' is defined but never used.","'GAS_SCRIPT_HASH' is defined but never used.","'getEstimate' is defined but never used.","'store' is defined but never used.",["989"],["951"],["952"],"'balanceCheck' is defined but never used.","'SmithContract' is defined but never used.","'Modal' is defined but never used.","'parseSwapPaginate' is defined but never used.","'connectedWallet' is assigned a value but never used.",["990"],"'NUDES_SCRIPT_HASH' is defined but never used.",["991"],"no-global-assign","no-unsafe-negation",[5282,5282]," rel=\"noreferrer\"",[5488,5488],[5701,5701],{"desc":"992","fix":"993"},{"desc":"994","fix":"995"},[2328,2328],[2520,2520],[2719,2719],{"desc":"996","fix":"997"},{"desc":"998","fix":"999"},{"desc":"1000","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"996","fix":"1012"},{"desc":"1013","fix":"1014"},[982,982],[1226,1226],[2461,2461],{"desc":"1015","fix":"1016"},{"desc":"1017","fix":"1018"},[2298,2298],{"desc":"1019","fix":"1020"},{"desc":"1021","fix":"1022"},{"desc":"1023","fix":"1024"},{"desc":"1025","fix":"1026"},{"desc":"1027","fix":"1028"},[1477,1477],[2908,2908],[3547,3547],[4019,4019],{"desc":"1029","fix":"1030"},{"desc":"1031","fix":"1032"},{"desc":"1023","fix":"1033"},{"desc":"1031","fix":"1034"},{"desc":"1035","fix":"1036"},"Update the dependencies array to be: [connectedWallet, network, route]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [connectWallet, connectedWallet.key, disConnectWallet]",{"range":"1039","text":"1040"},"Update the dependencies array to be: [network, tokenId]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [network, pendingTransactions, removePendingTransaction]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [network, location.pathname, arenaNo]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [isLoading, arenaNo, status]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [connectedWallet, network]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [arenaNo, connectedWallet, network, page]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [arenaNo, connectedWallet, gameNo, network, player.tokenId]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [history, network]",{"range":"1055","text":"1056"},{"range":"1057","text":"1042"},"Update the dependencies array to be: [connectedWallet, network, history, arenaNo]",{"range":"1058","text":"1059"},"Update the dependencies array to be: [contractHash, network, tokenId]",{"range":"1060","text":"1061"},"Update the dependencies array to be: [network, txid]",{"range":"1062","text":"1063"},"Update the dependencies array to be: [colors]",{"range":"1064","text":"1065"},"Update the dependencies array to be: [isActive]",{"range":"1066","text":"1067"},"Update the dependencies array to be: [loadPair, location, params.tokenA, params.tokenB]",{"range":"1068","text":"1069"},"Update the dependencies array to be: [amountA, amountB, connectedWallet, network, tokenA, tokenB]",{"range":"1070","text":"1071"},"Update the dependencies array to be: [connectedWallet, network, reloadCnt, tokenA, tokenB]",{"range":"1072","text":"1073"},"Update the dependencies array to be: [location, currentPage, network, tokenA, tokenB]",{"range":"1074","text":"1075"},"Update the dependencies array to be: [network]",{"range":"1076","text":"1077"},{"range":"1078","text":"1069"},{"range":"1079","text":"1077"},"Update the dependencies array to be: [network, tokenA, tokenB]",{"range":"1080","text":"1081"},[1983,2007],"[connectedWallet, network, route]",[2595,2597],"[connectWallet, connectedWallet.key, disConnectWallet]",[923,932],"[network, tokenId]",[743,764],"[network, pendingTransactions, removePendingTransaction]",[1291,1319],"[network, location.pathname, arenaNo]",[2121,2140],"[isLoading, arenaNo, status]",[1021,1038],"[connectedWallet, network]",[1547,1579],"[arenaNo, connectedWallet, network, page]",[1719,1736],"[arenaNo, connectedWallet, gameNo, network, player.tokenId]",[1318,1327],"[history, network]",[1078,1087],[1827,1862],"[connectedWallet, network, history, arenaNo]",[751,760],"[contractHash, network, tokenId]",[1012,1018],"[network, txid]",[2062,2064],"[colors]",[1444,1446],"[isActive]",[5128,5138],"[loadPair, location, params.tokenA, params.tokenB]",[4613,4629],"[amountA, amountB, connectedWallet, network, tokenA, tokenB]",[2458,2469],"[connectedWallet, network, reloadCnt, tokenA, tokenB]",[1363,1386],"[location, currentPage, network, tokenA, tokenB]",[1275,1277],"[network]",[4713,4723],[921,923],[995,1011],"[network, tokenA, tokenB]"]