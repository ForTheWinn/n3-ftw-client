import Query, { ApplicationLogJson } from "../Query";
import { RpcDispatcher, RpcDispatcherMixin } from "./RpcDispatcher";
export declare function ApplicationLogsRpcMixin<TBase extends RpcDispatcherMixin>(base: TBase): {
    new (...args: any[]): {
        getApplicationLog(blockOrTxHash: string): Promise<ApplicationLogJson>;
        url: string;
        execute<TResponse>(query: Query<unknown[], TResponse>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponse>;
    };
} & TBase;
declare const ApplicationLogsRpcClient_base: {
    new (...args: any[]): {
        getApplicationLog(blockOrTxHash: string): Promise<ApplicationLogJson>;
        url: string;
        execute<TResponse>(query: Query<unknown[], TResponse>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponse>;
    };
} & typeof RpcDispatcher;
export declare class ApplicationLogsRpcClient extends ApplicationLogsRpcClient_base {
    get [Symbol.toStringTag](): string;
}
export {};
//# sourceMappingURL=ApplicationLogsRpcClient.d.ts.map